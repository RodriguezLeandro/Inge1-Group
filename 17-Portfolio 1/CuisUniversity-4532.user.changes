

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (13 September 2021 20:08:24) as /home/luisb/Programs/smalltalk_base/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Programs/smalltalk_base/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/luisb/Programs/smalltalk_base/Packages/Features/VectorGraphics.pck.st----!

----SNAPSHOT----(13 September 2021 20:10:03) CuisUniversity-4532.image priorSource: 16885703!

----QUIT----(13 September 2021 20:10:07) CuisUniversity-4532.image priorSource: 17256809!

----STARTUP---- (13 September 2021 20:10:11) as /home/luisb/Programs/smalltalk_base/CuisUniversity-4532.image!


----QUIT----(13 September 2021 20:11:20) CuisUniversity-4532.image priorSource: 17256904!

----STARTUP---- (13 September 2021 20:13:24) as /home/luisb/Programs/smalltalk_base/CuisUniversity-4532.image!


----QUIT----(13 September 2021 20:15:22) CuisUniversity-4532.image priorSource: 17257108!

----STARTUP---- (13 September 2021 20:17:22) as /home/luisb/Programs/smalltalk_base/CuisUniversity-4532.image!


----QUIT----(13 September 2021 20:17:39) CuisUniversity-4532.image priorSource: 17257312!

----STARTUP---- (13 September 2021 20:19:18) as /home/luisb/Programs/smalltalk_base/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Downloads/Numero-Exercise.st----!

----STARTUP---- (7 October 2021 20:29:22) as /home/luisb/Programs/smalltalk_base (3rd copy)/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Documents/aInge1Folder/2021-2c/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:32:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:32:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:32:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:32:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:32:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:32:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:32:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:32:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:33:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:33:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:41:10' prior: 50871167!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction class = Deposit) ifTrue: aTransaction value.
		(aTransaction class = Withdraw) ifTrue: 0-(aTransaction value) ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:41:19' prior: 50871219!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction class = Deposit) ifTrue: aTransaction value.
		(aTransaction class = Withdraw) ifTrue: 0-(aTransaction value) .] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:41:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:41:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:41:19'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:42:03' prior: 50871228!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction class = Deposit) ifTrue: aTransaction value.
		(aTransaction class = Withdraw) ifTrue: (0-aTransaction value) .] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:42:41' prior: 50871264!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: aTransaction value.
		(aTransaction isKindOf: Withdraw) ifTrue: (0-aTransaction value) .] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:42:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:42:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:42:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:42:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:42:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:42:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:42:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:42:54'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:43:47' prior: 50871273!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [(0-aTransaction value)] .] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:43:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:43:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:43:47'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:44:05' prior: 50871313!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [(0-aTransaction value)].
		] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:44:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:44:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:44:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:44:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:44:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:44:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:44:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:44:08'!
ERROR!

aTransaction value!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:45:42'!
ERROR!

----End fileIn of /home/luisb/Programs/smalltalk_base (3rd copy)/Packages/TerseGuide.pck.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:47:15'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:47:15'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:47:16'!
ERROR!

aTransaction value!

(0-aTransaction value)!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:51:55' prior: 50871349!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [^(0-aTransaction value)].
		] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:51:57' prior: 50874351!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [^(0-aTransaction value)].
		] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:51:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:51:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:51:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:51:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:51:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:51:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:51:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:51:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:52:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:52:20'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:52:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:52:49' prior: 50874361!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [(0-aTransaction value)].
		] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:55:29' prior: 50874416!
balance
	|sum|
	sum:=0.
	^transactions do: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [sum:=aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [sum:=(0-aTransaction value)].
		] "ifEmpty: [ 0 ]."! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:56:32' prior: 50874426!
balance
	|sum|
	sum:=0.
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [sum:=aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [sum:=(0-aTransaction value)].
		].
	^sum! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:56:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:56:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:56:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:56:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:56:48'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:56:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:56:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:56:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:56:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:56:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 20:58:12' prior: 50874436!
balance
	|sum|
	sum:=0.
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [sum:= sum + aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [sum:= sum +(0-aTransaction value)].
		].
	^sum! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:58:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 20:58:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:58:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 20:58:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 20:58:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 20:58:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 20:58:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 20:58:16'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 21:00:01' prior: 50874506!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse:[(0-aTransaction value)].
		] ifEmpty: [ 0 ].
"balance
	|sum|
	sum:=0.
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [sum:= sum + aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: [sum:= sum +(0-aTransaction value)].
		].
	^sum"
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/7/2021 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/7/2021 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/7/2021 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/7/2021 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/7/2021 21:00:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/7/2021 21:00:03'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/7/2021 21:00:46' prior: 50874547!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse:[(0-aTransaction value)].
		] ifEmpty: [ 0 ].
! !

----QUIT----(7 October 2021 22:10:23) CuisUniversity-4532.image priorSource: 17257516!

----STARTUP---- (12 October 2021 08:48:27) as /home/luisb/Programs/smalltalk_base (3rd copy)/CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 08:49:40'!
PASSED!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'LB 10/12/2021 08:53:57'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'LB 10/12/2021 08:54:39' prior: 50871153 overrides: 16896425!
initialize

	deposits := OrderedCollection new.
	withdraws := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 08:57:10' prior: 50871158!
register: aTransaction

	(aTransaction isKindOf: Deposit) ifTrue: [deposits add: aTransaction ]
	ifFalse: [ withdraws add: aTransaction ]
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 08:58:33' prior: 50871163!
transactions 

	^ (deposits, withdraws) copy! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:00:43' prior: 50871172!
hasRegistered: aTransaction

	^(aTransaction isKindOf: Deposit) ifTrue: [deposits includes: aTransaction ]
	ifFalse: [ withdraws includes: aTransaction ]
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:00:48' prior: 50874664!
hasRegistered: aTransaction

	^(aTransaction isKindOf: Deposit) 
	ifTrue: [deposits includes: aTransaction ]
	ifFalse: [ withdraws includes: aTransaction ]
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:02:29' prior: 50874589!
balance

	^(deposits sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ]) -
	(withdraws sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ])
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:02:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:02:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:02:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:02:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:02:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:02:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:02:33'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:02:47' prior: 50874651!
register: aTransaction

	(aTransaction isKindOf: Deposit) 
	ifTrue: [deposits add: aTransaction ]
	ifFalse: [ withdraws add: aTransaction ]
! !
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:06:40'!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:07:23' overrides: 50874722!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:07:23' overrides: 50874722!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !

!methodRemoval: AccountTransaction #registerToReceptiveAccount: stamp: 'LB 10/12/2021 09:07:23'!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:07:27'!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:08:16' prior: 50874745!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:09:07' prior: 50874728 overrides: 50874751!
registerToReceptiveAccount: aReceptiveAccount

	aReceptiveAccount registerADeposit: self.! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:09:19' prior: 50874734 overrides: 50874751!
registerToReceptiveAccount: aReceptiveAccount

	aReceptiveAccount registerAWithdraw: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:09:48'!
registerADeposit: aDeposit

	deposits add: aDeposit.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:10:07'!
registerAWithdraw: aWithdraw

	withdraws add: aWithdraw.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:10:33' prior: 50874715!
register: aTransaction

	aTransaction registerToReceptiveAccount: self.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:10:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:10:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:10:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:10:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:10:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:10:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:10:35'!
PASSED!
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:15:54'!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:16:13' prior: 50874672!
hasRegistered: aTransaction
	aTransaction isRegistedOnReceptiveAccount: self.
	^(aTransaction isKindOf: Deposit) 
	ifTrue: [deposits includes: aTransaction ]
	ifFalse: [ withdraws includes: aTransaction ]
! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:16:40' overrides: 50874811!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:16:40' overrides: 50874811!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !

!methodRemoval: AccountTransaction #isRegistedOnReceptiveAccount: stamp: 'LB 10/12/2021 09:16:40'!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:16:42'!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:17:43'!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:17:43'!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:17:43' overrides: 50874854!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:17:43' prior: 50874817!
hasRegistered: aTransaction
	aTransaction isRegisteredOnReceptiveAccount: self.
	^(aTransaction isKindOf: Deposit) 
	ifTrue: [deposits includes: aTransaction ]
	ifFalse: [ withdraws includes: aTransaction ]
! !

!methodRemoval: Withdraw #isRegistedOnReceptiveAccount: stamp: 'LB 10/12/2021 09:17:43'!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!

!methodRemoval: AccountTransaction #isRegistedOnReceptiveAccount: stamp: 'LB 10/12/2021 09:17:44'!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!

!methodRemoval: Deposit #isRegistedOnReceptiveAccount: stamp: 'LB 10/12/2021 09:17:44'!
isRegistedOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:18:35' prior: 50874860 overrides: 50874854!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	aReceptiveAccount hasRegisteredADeposit: self.! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:18:51' prior: 50874849 overrides: 50874854!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	aReceptiveAccount hasRegisteredAWithdraw: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:19:25'!
hasRegisteredADeposit: aDeposit

	^deposits includes: aDeposit.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:20:08'!
hasRegisteredAWithdraw: aWithdraw

	^withdraws includes: aWithdraw.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:20:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:20:18'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:20:58' prior: 50874866!
hasRegistered: aTransaction

	^aTransaction isRegisteredOnReceptiveAccount: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:21:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:21:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:21:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:21:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:21:00'!
PASSED!
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:21:06' prior: 50874899 overrides: 50874854!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	^aReceptiveAccount hasRegisteredAWithdraw: self.! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:21:13' prior: 50874892 overrides: 50874854!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	^aReceptiveAccount hasRegisteredADeposit: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:21:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:22:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:22:28'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:28:41' prior: 50874680!
balance
	^(self depositsBalance - self withdrawsBalance).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:29:12'!
depositsBalance
	^(deposits sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ]).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:29:23'!
withdrawsBalance
	^(withdraws sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ]).
	
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:29:25'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:29:36' prior: 50875081!
depositsBalance
	
	^(deposits sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ]).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:29:40' prior: 50875087!
withdrawsBalance
	
	^(withdraws sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ]).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:30:30' prior: 50875126!
withdrawsBalance
	self sumOfTransactions: withdraws.
	^(withdraws sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ]).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:31:22'!
sumOfTransactions: aListOfTransactions
	
	^aListOfTransactions sum: [ :aTransaction | aTransaction value		] ifEmpty: [ 0 ].
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:31:39' prior: 50875132!
withdrawsBalance

	^ self sumOfTransactions: withdraws.
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:31:42' prior: 50875146!
withdrawsBalance

	^self sumOfTransactions: withdraws.
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:31:52' prior: 50875120!
depositsBalance
	
	^self sumOfTransactions: deposits.
	
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:31:54'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:33:11' prior: 50875139!
sumOfTransactions: aListOfTransactions
	
	^aListOfTransactions sum: [ :aTransaction | aTransaction value		] 
	ifEmpty: [ 0 ].
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:33:19' prior: 50875076!
balance
	
	^(self depositsBalance - self withdrawsBalance).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:42:09' prior: 50875195!
balance
	
	^(self sumOfTransactions: self transactions).
	
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:42:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:42:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:42:10'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:42:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:42:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:42:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:42:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:42:10'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:33:19' prior: 50875200!
balance
	
	^(self depositsBalance - self withdrawsBalance).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:42:51' prior: 50875236!
balance
	
	^(self sumOfTransactions: self transactions).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:33:19' prior: 50875241!
balance
	
	^(self depositsBalance - self withdrawsBalance).
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:43:02' prior: 50875246!
balance
	
	^(self depositsBalance - self withdrawsBalance).! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LB 10/12/2021 09:52:09'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 09:51:52'!
test08
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: balance equals: 0.
! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 09:52:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:52:24'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:52:33' prior: 50875273!
balance
	^0.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 09:52:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 09:52:37'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 09:55:07' prior: 50875263!
test08
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: balance equals: 100.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 09:51:52' prior: 50875313!
test08
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: balance equals: 0.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 09:55:26'!
test09
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: balance equals: 100.
! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 09:55:35'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:55:44'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:56:57' prior: 50875344!
addAccount: aReceptiveAccount 
	^aReceptiveAccount balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:58:36' prior: 50875349!
addAccount: aReceptiveAccount 
	! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LB 10/12/2021 09:58:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:59:46' prior: 50875354!
addAccount: aReceptiveAccount 
	accounts := aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 09:59:54' prior: 50875278!
balance
	^accounts .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:00:04' prior: 50875375!
balance
	^accounts balance.! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:00:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:00:06'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:01:07' prior: 50875379!
balance
	(accounts isNil) ifTrue: [^0].
	^accounts balance.! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:01:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:01:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:01:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:01:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:01:09'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:06:47'!
test10
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: balance equals: 0.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:06:50'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:06:58'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LB 10/12/2021 10:07:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:07:22' prior: 50875472!
addPortfolio: aPortfolio 
	portfolios := aPortfolio.! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:07:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:07:33'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:12:40'!
test11
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	balance := portfolio balance.
	
	self assert: balance equals: 100.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:13:12' prior: 50875526!
test11
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:13:20' prior: 50875324!
test08
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: 100.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:13:27' prior: 50875556!
test08
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:13:35' prior: 50875331!
test09
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:13:41' prior: 50875459!
test10
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:14:07' prior: 50875541!
test11
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:14:07'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:15:59' prior: 50875370!
addAccount: aReceptiveAccount 
	accounts ifNil: [accounts := OrderedCollection new].
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:16:52' prior: 50875420!
balance
	(accounts isNil) ifTrue: [^0].
	^accounts sum: [:anAccount| anAccount balance ].! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:17:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:17:05'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:21:23' prior: 50875592!
test11
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:21:29'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:26:15' prior: 50875617!
balance
	((accounts isNil) and: [portfolios isNil]) ifTrue: [^0].
	^(accounts sum: [:anAccount| anAccount balance ]) +
	(portfolios sum: [:aPortfolio| aPortfolio balance ]).! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:26:20'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:26:45' prior: 50875485!
addPortfolio: aPortfolio 
	portfolios ifNil: [portfolios := OrderedCollection new].
	portfolios add: aPortfolio.! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:26:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:27:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:27:56'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:28:28'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:28:46' prior: 50875680!
balance
	((accounts isNil) or: [portfolios isNil]) ifTrue: [^0].
	^(accounts sum: [:anAccount| anAccount balance ]) +
	(portfolios sum: [:aPortfolio| aPortfolio balance ]).! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:28:48'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:31:22' prior: 50875708!
balance
	((accounts isNil) and: [portfolios isNil]) ifTrue: [^0].
	^(accounts sum: [:anAccount| anAccount balance ] ifEmpty: [0]) +
	(portfolios sum: [:aPortfolio| aPortfolio balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:31:42' prior: 50875720!
balance
	accounts ifNil: [accounts := OrderedCollection new].
	portfolios ifNil: [portfolios := OrderedCollection new].

	((accounts isNil) and: [portfolios isNil]) ifTrue: [^0].
	^(accounts sum: [:anAccount| anAccount balance ] ifEmpty: [0]) +
	(portfolios sum: [:aPortfolio| aPortfolio balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:31:56' prior: 50875730!
balance
	accounts ifNil: [accounts := OrderedCollection new].
	portfolios ifNil: [portfolios := OrderedCollection new].

	^(accounts sum: [:anAccount| anAccount balance ] ifEmpty: [0]) +
	(portfolios sum: [:aPortfolio| aPortfolio balance ] ifEmpty: [0]).! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:31:57'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:33:27' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:33:32' prior: 50875743!
balance
	^(accounts sum: [:anAccount| anAccount balance ] ifEmpty: [0]) +
	(portfolios sum: [:aPortfolio| aPortfolio balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:33:37' prior: 50875610!
addAccount: aReceptiveAccount 
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:33:41' prior: 50875691!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:33:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:33:42'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:35:07'!
test08ANewPortfolioBalanceIsZero
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !

!methodRemoval: ReceptiveAccountTest #test08ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:35:18'!
test08ANewPortfolioBalanceIsZero
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:35:31'!
test08ANewPortfolioBalanceIsZero
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'LB 10/12/2021 10:35:31'!
test08
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
!

TestCase subclass: #PortfolioTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTests category: 'Portfolio-Ejercicio' stamp: 'LB 10/12/2021 10:36:58'!
TestCase subclass: #PortfolioTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTests methodsFor: 'nil' stamp: 'LB 10/12/2021 10:37:55'!
test01ANewPortfolioBalanceIsZero
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:09'!
test09
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LB 10/12/2021 10:38:16'!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:16'!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'LB 10/12/2021 10:38:16'!
test09
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
!

!methodRemoval: PortfolioTests #test09 stamp: 'LB 10/12/2021 10:38:16'!
test09
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:38'!
test03
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:49'!
test04
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.! !

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'LB 10/12/2021 10:38:52'!
test11
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.!

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'LB 10/12/2021 10:38:53'!
test10
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
!

!methodRemoval: ReceptiveAccountTest #test08ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:38:55'!
test08ANewPortfolioBalanceIsZero
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:39:00'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:39:00'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:39:00'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:39:00'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:39:00'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test02 stamp: 'LB 10/12/2021 10:40:02'!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/12/2021 10:40:11'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:40:13'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:40:13'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:40:13'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:40:13'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:40:13'!
PASSED!

----SNAPSHOT----(12 October 2021 10:42:49) CuisUniversity-4532.image priorSource: 17374284!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:43:46'!
test05
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.! !

!methodRemoval: PortfolioTests #test04 stamp: 'LB 10/12/2021 10:43:46'!
test04
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:44:36' prior: 50875930!
test02
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
! !

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:44:37'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:44:37'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:44:37'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:44:37'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 10:44:37'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:16' prior: 50876110!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:45:02'!
test04
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
! !

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:45:10'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:45:10'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:45:10'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:45:10'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:45:10'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 10:45:10'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:47:26'!
test06
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:47:30'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:47:39'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:47:56' prior: 50876188!
transactions
	^OrderedCollection new! !

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:47:59'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:47:59'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:47:59'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:47:59'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:47:59'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 10:47:59'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:47:59'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:49:13'!
test07
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: account transactions equals: portfolio transactions.
! !

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 10:49:19'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:51:13' prior: 50876193!
transactions
	^(accounts first) transactions.! !

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:51:14'!
ERROR!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 10:51:14'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:51:14'!
ERROR!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:52:11'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:52:11'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:52:11'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:52:11'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 10:52:11'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:52:11'!
ERROR!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 10:52:11'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:52:11'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:54:45' prior: 50876228!
transactions
	(accounts isEmpty) ifTrue: [^OrderedCollection new].
	^(accounts first) transactions.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 10:54:46'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 10:54:46'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 10:54:46'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 10:54:46'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 10:54:46'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 10:54:46'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 10:54:46'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:57:28'!
test08
	| portfolio portfolioAAgregar  account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: 100 equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:57:40' prior: 50876299!
test08
	| portfolio portfolioAAgregar  account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: 100 equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:57:54' prior: 50876313!
test08
	| portfolio portfolioAAgregar account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.! !

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 10:57:59'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:02:15' prior: 50876275!
transactions
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) ifTrue: [^OrderedCollection new].
		^(portfolios first) transactions.
		].
	^(accounts first) transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:02:35' prior: 50876344!
transactions
	
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) ifTrue: [^OrderedCollection new].
		^(portfolios first) transactions.
		].
	^(accounts first) transactions.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:02:49'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:08:47'!
test09
	| portfolio portfolioAAgregar account1 account2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioAAgregar addAccount: account1.	
	portfolio addAccount: account2.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.! !

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:09:08'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:12:20' prior: 50876353!
transactions
	
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) ifTrue: [^OrderedCollection new].
		^(portfolios first) transactions.
		].
	^((portfolios first) transactions, (accounts first) transactions).! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:12:22'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:12:22'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:12:22'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:12:22'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:12:22'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:12:22'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:12:22'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:12:22'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:12:22'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:13:09' prior: 50876402!
transactions
	
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) ifTrue: [^OrderedCollection new].
		^((portfolios first) transactions, (accounts first) transactions).
		].
	^(accounts first) transactions.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:13:11'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:13:11'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:13:11'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:18:50' prior: 50876434!
transactions
	|accountsTransactions portfoliosTransactions|

	(accounts isEmpty) 
		ifTrue: [accountsTransactions := OrderedCollection new]
		ifFalse: [accountsTransactions := (accounts first) transactions.].
	(portfolios isEmpty)
		ifTrue: [portfoliosTransactions := OrderedCollection new]
		ifFalse: [portfoliosTransactions := (portfolios first) transactions.].
	
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:18:52'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:19:54'!
test10
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.
! !

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:19:58'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:24:21' prior: 50876466!
transactions
	|accountsTransactions portfoliosTransactions|

	(accounts isEmpty) 
		ifTrue: [accountsTransactions := OrderedCollection new]
		ifFalse: [
			accounts do:[:anAccount| 
				accountsTransactions add: anAccount transactions ].
			].
	(portfolios isEmpty)
		ifTrue: [portfoliosTransactions := OrderedCollection new]
		ifFalse: [portfoliosTransactions := (portfolios first) transactions.].
	
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:24:27'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:24:27'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:24:27'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:24:27'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:24:27'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:24:27'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:24:27'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:24:27'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:24:27'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:24:27'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:26:37' prior: 50876522!
transactions
	|accountsTransactions portfoliosTransactions|
	
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	(accounts isEmpty) 
		ifTrue: [accountsTransactions := OrderedCollection new]
		ifFalse: [
			accounts do:[:anAccount| 
				(accountsTransactions, anAccount transactions) ].
			].
	(portfolios isEmpty)
		ifTrue: [portfoliosTransactions := OrderedCollection new]
		ifFalse: [portfoliosTransactions := (portfolios first) transactions.].
	
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:26:39'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:26:39'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:26:39'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:26:39'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:26:39'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:26:39'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:26:39'!
FAILURE!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:26:39'!
FAILURE!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:26:39'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:26:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:27:31' prior: 50876564!
transactions
	|accountsTransactions portfoliosTransactions|
	
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	(accounts isEmpty) 
		ifTrue: [accountsTransactions := OrderedCollection new]
		ifFalse: [
			accounts do:[:anAccount| 
				accountsTransactions := (accountsTransactions, anAccount transactions) ].
			].
	(portfolios isEmpty)
		ifTrue: [portfoliosTransactions := OrderedCollection new]
		ifFalse: [portfoliosTransactions := (portfolios first) transactions.].
	
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:27:33'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:28:05' prior: 50876609!
transactions
	|accountsTransactions portfoliosTransactions|
	
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	accounts do:[:anAccount| 
				accountsTransactions := (accountsTransactions, anAccount transactions)
			].
	(portfolios isEmpty)
		ifTrue: [portfoliosTransactions := OrderedCollection new]
		ifFalse: [portfoliosTransactions := (portfolios first) transactions.].
	
	
	^(portfoliosTransactions ,accountsTransactions)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:28:16' prior: 50876655!
transactions
	|accountsTransactions portfoliosTransactions|
	
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	accounts do:[:anAccount| 
		accountsTransactions := (accountsTransactions, anAccount transactions)
		].
	(portfolios isEmpty)
		ifTrue: [portfoliosTransactions := OrderedCollection new]
		ifFalse: [portfoliosTransactions := (portfolios first) transactions.].
	
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:28:17'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:30:29'!
test11
	| portfolio portfolioToAdd1 portfolioToAdd2 account1 account2 |
	
	portfolio := Portfolio new.
	portfolioToAdd1 := Portfolio new.
	portfolioToAdd2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolioToAdd1 addAccount: account1.	
	portfolioToAdd2 addAccount: account2.	
	
	portfolio addPortfolio: portfolioToAdd1.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.! !

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:30:33'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:31:19' prior: 50876673!
transactions
	|accountsTransactions portfoliosTransactions|
	
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	accounts do:[:anAccount| 
		accountsTransactions := (accountsTransactions, anAccount transactions)
		].
	portfolios do:[:aPortfolio| 
		portfoliosTransactions := (portfoliosTransactions, aPortfolio transactions)
		].
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:31:20'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:33:56'!
test12
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:35:56' prior: 50876784!
test12
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio transactions) isEmpty.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:36:59' prior: 50876791!
test12
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio hasRegistered: aTransaction).! !

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:37:22'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:37:31'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:37:37' prior: 50876815!
hasRegistered: aDeposit 
	^false.! !

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:37:39'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:38:18'!
test13
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:38:20'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:39:57' prior: 50876820!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^true.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:39:59'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:40:39' prior: 50876856!
test13
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:40:50' prior: 50876909!
test13
	| portfolio aTransaction1 account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.
	
	aTransaction1 := (account transactions) first.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: aTransaction1).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:40:59' prior: 50876923!
test13
	| portfolio aTransaction1 account aTransaction2 |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.
	
	aTransaction1 := (account transactions) first.
	aTransaction2 := (account transactions) second.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: aTransaction1).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:42:00' prior: 50876937!
test13
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	
	self assert: (portfolio hasRegistered: aTransaction1).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:42:08' prior: 50876953!
test13
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:42:16'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:42:20' prior: 50876970!
test13
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).! !

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:42:34'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:43:08' prior: 50876871!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^(accounts transactions) first = aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:43:17'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:43:17'!
ERROR!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:43:17'!
ERROR!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:44:00'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:44:00'!
ERROR!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:44:00'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:44:39' prior: 50877042!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^accounts first = aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:44:41'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:45:01' prior: 50877117!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^self transactions first = aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:45:02'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:45:07' prior: 50877155!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^accounts first = aDeposit.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:45:56' prior: 50877193!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^((accounts first) transactions) first = aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:45:57'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:47:09'!
test14
	| portfolio portfolioAAgregar account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:47:52' prior: 50877237!
test14
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:48:10' prior: 50877251!
test14
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:48:31' prior: 50877267!
test14
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!testRun: #PortfolioTests #test14 stamp: 'LB 10/12/2021 11:48:34'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:50:19' prior: 50877199!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [^false].
	^(accounts first) hasRegistered: aDeposit.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:52:07' prior: 50877301!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[(portfolios first) hasRegistered: aDeposit].
		].
	^(accounts first) hasRegistered: aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:52:08'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/12/2021 11:52:08'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/12/2021 11:52:08'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:54:11' prior: 50877308!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[(portfolios first) hasRegistered: aDeposit].
		].
	^(accounts first) hasRegistered: aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:54:13'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/12/2021 11:54:13'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/12/2021 11:54:13'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:54:54' prior: 50877354!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[^(portfolios first) hasRegistered: aDeposit].
		].
	^(accounts first) hasRegistered: aDeposit.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/12/2021 11:54:55'!
PASSED!

----SNAPSHOT----(12 October 2021 11:56:50) CuisUniversity-4532.image priorSource: 17421696!

----QUIT----(12 October 2021 11:57:23) CuisUniversity-4532.image priorSource: 17465364!

----STARTUP---- (13 October 2021 18:09:34) as /home/luisb/Programs/smalltalk_base (3rd copy)/CuisUniversity-4532.image!

!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:18:46'!
test15
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test14 stamp: 'LB 10/13/2021 18:18:46'!
test14
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:19:13'!
test14
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test15 stamp: 'LB 10/13/2021 18:19:13'!
test15
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:22:44'!
test15
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio hasRegistered: aTransaction1).
	self assert: (portfolio hasRegistered: aTransaction2).! !

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:22:47'!
FAILURE!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:02'!
test16
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio hasRegistered: aTransaction1).
	self assert: (portfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTests #test15 stamp: 'LB 10/13/2021 18:25:02'!
test15
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio hasRegistered: aTransaction1).
	self assert: (portfolio hasRegistered: aTransaction2).!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:07'!
test15
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test14 stamp: 'LB 10/13/2021 18:25:07'!
test14
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:12'!
test14
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTests #test13 stamp: 'LB 10/13/2021 18:25:12'!
test13
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:52'!
test13
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:25:54'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:25:54'!
FAILURE!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:25:54'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:29:16' prior: 50877400!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[^(portfolios first) hasRegistered: aDeposit].
		].
	^accounts detect: [:anAccount | anAccount hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:32:42' prior: 50877693!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[^(portfolios first) hasRegistered: aDeposit].
		].
	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aDeposit]! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:32:45'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:32:48'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:37:05'!
test17
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 addAccount: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 addAccount: account2.
	
	portfolio addPortfolio: portfolioAAgregar1.
	portfolio addPortfolio: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:37:19' prior: 50877535!
test16
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:37:38' prior: 50877795!
test17
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 addAccount: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 addAccount: account2.
	
	portfolio addPortfolio: portfolioAAgregar1.
	portfolio addPortfolio: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:37:40'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:38:59' prior: 50877704!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[^
				portfolios anySatisfy: [:anAccount | anAccount hasRegistered: aDeposit]
		].
	].
	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aDeposit].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:39:07' prior: 50877866!
hasRegistered: aDeposit 
	(accounts isEmpty) ifTrue: [
		(portfolios isEmpty) 
			ifTrue: [		^false]
			ifFalse:[^
				portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aDeposit]
		].
	].
	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aDeposit].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:39:19'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:39:29'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:39:43'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:41:05' prior: 50877878!
hasRegistered: aDeposit 
	^(portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aDeposit]) and: [
	accounts anySatisfy: [:anAccount | anAccount hasRegistered: aDeposit]. ].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:41:07'!
FAILURE!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:41:07'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:41:07'!
FAILURE!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:41:07'!
FAILURE!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:41:07'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:41:23' prior: 50878016!
hasRegistered: aDeposit 
	^(portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aDeposit]) or: [
	accounts anySatisfy: [:anAccount | anAccount hasRegistered: aDeposit]. ].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 18:41:26'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:40:37'!
accountsBalance
	^(accounts sum: [:anAccount| anAccount balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:40:57'!
portfoliosBalance
	^(portfolios sum: [:aPortfolio| aPortfolio balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:41:33' prior: 50875800!
balance
	^ self accountsBalance + self portfoliosBalance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:42:59'!
yyy: aXXX
	^(aXXX sum: [:aXXXElement| aXXXElement balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:44:03' prior: 50878123!
portfoliosBalance
	
	^self yyy: portfolios.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:44:26' prior: 50878117!
accountsBalance
	
	^self yyy: accounts.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 19:44:32'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:45:46'!
makeBalanceOf: aXXX
	^(aXXX sum: [:aXXXElement| aXXXElement balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:45:46' prior: 50878140!
portfoliosBalance
	
	^self makeBalanceOf: portfolios.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:45:46' prior: 50878145!
accountsBalance
	
	^self makeBalanceOf: accounts.! !

!methodRemoval: Portfolio #yyy: stamp: 'LB 10/13/2021 19:45:46'!
yyy: aXXX
	^(aXXX sum: [:aXXXElement| aXXXElement balance ] ifEmpty: [0]).!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:46:11' prior: 50878190!
makeBalanceOf: aColectionOfTransactions
	^(aColectionOfTransactions sum: [:aXXXElement| aXXXElement balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:47:21' prior: 50878211!
makeBalanceOf: aBankCollection
	^(aBankCollection sum: [:aXXXElement| aXXXElement balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 19:48:05' prior: 50878218!
makeBalanceOf: aBankCollection
	^(aBankCollection sum: [:aBankElement| aBankElement balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:58:44' prior: 50878225!
makeBalanceOf: aPortfolioColaborator
	^(aPortfolioColaborator sum: [:aBankElement| aBankElement balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:59:03' prior: 50878232!
makeBalanceOf: aPortfolioColaborator
	^(aPortfolioColaborator sum: [:anElementOfColaborator| anElementOfColaborator balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:59:22' prior: 50878239!
makeBalanceOf: aPortfolioColaborator
	^(aPortfolioColaborator 
		sum: [:anElementOfColaborator| anElementOfColaborator balance ] 
		ifEmpty: [0]).! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:09:02' prior: 50876740!
transactions
	|accountsTransactions portfoliosTransactions|
	"
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	accounts do:[:anAccount| 
		accountsTransactions := (accountsTransactions, anAccount transactions)
		].
	portfolios do:[:aPortfolio| 
		portfoliosTransactions := (portfoliosTransactions, aPortfolio transactions)
		]."
	accountsTransactions := accounts collect: [:anAccount| anAccount].
	portfoliosTransactions := portfolios collect: [:anAccount| anAccount].
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 20:09:04'!
FAILURE!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 20:09:04'!
FAILURE!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 20:09:04'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 20:09:04'!
FAILURE!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 20:09:04'!
FAILURE!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 20:09:04'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:09:47' prior: 50878255!
transactions
	|accountsTransactions portfoliosTransactions|
	"
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	accounts do:[:anAccount| 
		accountsTransactions := (accountsTransactions, anAccount transactions)
		].
	portfolios do:[:aPortfolio| 
		portfoliosTransactions := (portfoliosTransactions, aPortfolio transactions)
		]."
	accountsTransactions := accounts collect: [:anAccount| anAccount transactions].
	portfoliosTransactions := portfolios collect: [:aPortfolio| aPortfolio transactions].
	
	^(portfoliosTransactions ,accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 20:09:53'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:11:12' prior: 50878318!
transactions
	|accountsTransactions portfoliosTransactions|
	
	accountsTransactions := OrderedCollection new.
	portfoliosTransactions := OrderedCollection new.

	accounts do:[:anAccount| 
		accountsTransactions := (accountsTransactions, anAccount transactions)
		].
	portfolios do:[:aPortfolio| 
		portfoliosTransactions := (portfoliosTransactions, aPortfolio transactions)
		].
	
	^(portfoliosTransactions ,accountsTransactions)! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:13:47'!
gettransactionsOf: aCollaborator
	|accountsTransactions |
	
	accountsTransactions := OrderedCollection new.

	aCollaborator do:[:aCollaboratorElement| 
		accountsTransactions := (accountsTransactions, aCollaboratorElement transactions)
		].
	
	^accountsTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:13:58' prior: 50878400!
gettransactionsOf: aCollaborator
	|colaboratorTransactions |
	
	colaboratorTransactions := OrderedCollection new.

	aCollaborator do:[:aCollaboratorElement| 
		colaboratorTransactions := (colaboratorTransactions, aCollaboratorElement transactions)
		].
	
	^colaboratorTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:14:14' prior: 50878412!
gettransactionsOf: aCollaborator
	| colaboratorTransactions |
	
	colaboratorTransactions := OrderedCollection new.

	aCollaborator do:[:aCollaboratorElement| 
		colaboratorTransactions := (colaboratorTransactions, aCollaboratorElement transactions)
		].
	
	^colaboratorTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:16:10'!
portfoliosTransactions
	
	^self gettransactionsOf: portfolios.! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:16:19'!
accountsTransactions
	
	^self gettransactionsOf: accounts.! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:16:38' prior: 50878384!
transactions

	^(self portfoliosTransactions ,self accountsTransactions)! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 20:16:40'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:17:06' prior: 50878067!
hasRegistered: aTransaction 
	^(portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aTransaction]) or: [
	accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction]. ].! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:21:36'!
checkTransaction: aTransaction in: aColaborator
	
	^aColaborator 
		anySatisfy: [:aColaboratorElement | aColaboratorElement hasRegistered: aTransaction].! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:23:22' prior: 50878493!
hasRegistered: aTransaction 
	^(self checkTransaction: aTransaction in: portfolios) 
	or: [self checkTransaction: aTransaction in: accounts].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/13/2021 20:23:24'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:23:39' prior: 50878510!
hasRegistered: aTransaction 
	
	^(self checkTransaction: aTransaction in: portfolios) 
	or: [self checkTransaction: aTransaction in: accounts].! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:24:41'!
portfoliosHasRegistered: aTransaction

	^ self checkTransaction: aTransaction in: portfolios! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:24:41' prior: 50878559!
hasRegistered: aTransaction 
	
	^(self portfoliosHasRegistered: aTransaction) 
	or: [self checkTransaction: aTransaction in: accounts].! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:25:20'!
accountsHasRegistered: aTransaction

	^ self checkTransaction: aTransaction in: accounts! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:25:20' prior: 50878572!
hasRegistered: aTransaction 
	
	^(self portfoliosHasRegistered: aTransaction) 
	or: [self accountsHasRegistered: aTransaction].! !

----QUIT----(13 October 2021 20:29:29) CuisUniversity-4532.image priorSource: 17465457!

----STARTUP---- (17 October 2021 21:28:45) as D:\documentos\inge1\ejer\windows64\windows64\CuisUniversity-4532.image!


!classDefinition: #PortfolioTests category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:51'!
TestCase subclass: #PortfolioTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTests category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:51'!
TestCase subclass: #PortfolioTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:37:55'!
test01ANewPortfolioBalanceIsZero
	| portfolio balance |
	
	portfolio := Portfolio new.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:16'!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:38:38'!
test03
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:45:02'!
test04
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:43:46'!
test05
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar addAccount: account1.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:47:26'!
test06
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:49:13'!
test07
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: account transactions equals: portfolio transactions.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 10:57:54'!
test08
	| portfolio portfolioAAgregar account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:08:47'!
test09
	| portfolio portfolioAAgregar account1 account2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioAAgregar addAccount: account1.	
	portfolio addAccount: account2.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:19:54'!
test10
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:30:29'!
test11
	| portfolio portfolioToAdd1 portfolioToAdd2 account1 account2 |
	
	portfolio := Portfolio new.
	portfolioToAdd1 := Portfolio new.
	portfolioToAdd2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolioToAdd1 addAccount: account1.	
	portfolioToAdd2 addAccount: account2.	
	
	portfolio addPortfolio: portfolioToAdd1.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/12/2021 11:36:59'!
test12
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:52'!
test13
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:12'!
test14
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:25:07'!
test15
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar addAccount: account.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:37:19'!
test16
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/13/2021 18:37:38'!
test17
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 addAccount: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 addAccount: account2.
	
	portfolio addPortfolio: portfolioAAgregar1.
	portfolio addPortfolio: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 5/17/2021 17:29:53'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:17:43'!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'value' stamp: 'LB 10/12/2021 09:08:16'!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:21:13' overrides: 50860346!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	^aReceptiveAccount hasRegisteredADeposit: self.! !
!Deposit methodsFor: 'value' stamp: 'LB 10/12/2021 09:09:07' overrides: 50860351!
registerToReceptiveAccount: aReceptiveAccount

	aReceptiveAccount registerADeposit: self.! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50860357!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:21:06' overrides: 50860346!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	^aReceptiveAccount hasRegisteredAWithdraw: self.! !
!Withdraw methodsFor: 'value' stamp: 'LB 10/12/2021 09:09:19' overrides: 50860351!
registerToReceptiveAccount: aReceptiveAccount

	aReceptiveAccount registerAWithdraw: self.! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50860357!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:53'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:53'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:53'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:53'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'LB 10/12/2021 10:33:27' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/12/2021 10:33:37'!
addAccount: aReceptiveAccount 
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/12/2021 10:33:41'!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:45:46'!
accountsBalance
	
	^self makeBalanceOf: accounts.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:41:33'!
balance
	^ self accountsBalance + self portfoliosBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:59:22'!
makeBalanceOf: aPortfolioColaborator
	^(aPortfolioColaborator 
		sum: [:anElementOfColaborator| anElementOfColaborator balance ] 
		ifEmpty: [0]).! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/13/2021 19:45:46'!
portfoliosBalance
	
	^self makeBalanceOf: portfolios.! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:25:20'!
accountsHasRegistered: aTransaction

	^ self checkTransaction: aTransaction in: accounts! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:21:36'!
checkTransaction: aTransaction in: aColaborator
	
	^aColaborator 
		anySatisfy: [:aColaboratorElement | aColaboratorElement hasRegistered: aTransaction].! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:25:20'!
hasRegistered: aTransaction 
	
	^(self portfoliosHasRegistered: aTransaction) 
	or: [self accountsHasRegistered: aTransaction].! !
!Portfolio methodsFor: 'testing' stamp: 'LB 10/13/2021 20:24:41'!
portfoliosHasRegistered: aTransaction

	^ self checkTransaction: aTransaction in: portfolios! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:16:19'!
accountsTransactions
	
	^self gettransactionsOf: accounts.! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:14:14'!
gettransactionsOf: aCollaborator
	| colaboratorTransactions |
	
	colaboratorTransactions := OrderedCollection new.

	aCollaborator do:[:aCollaboratorElement| 
		colaboratorTransactions := (colaboratorTransactions, aCollaboratorElement transactions)
		].
	
	^colaboratorTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:16:10'!
portfoliosTransactions
	
	^self gettransactionsOf: portfolios.! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/13/2021 20:16:38'!
transactions

	^(self portfoliosTransactions ,self accountsTransactions)! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:53'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:28:53'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'LB 10/12/2021 08:54:39' overrides: 16896425!
initialize

	deposits := OrderedCollection new.
	withdraws := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:10:33'!
register: aTransaction

	aTransaction registerToReceptiveAccount: self.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:09:48'!
registerADeposit: aDeposit

	deposits add: aDeposit.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 09:10:07'!
registerAWithdraw: aWithdraw

	withdraws add: aWithdraw.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/12/2021 08:58:33'!
transactions 

	^ (deposits, withdraws) copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:43:02'!
balance
	
	^(self depositsBalance - self withdrawsBalance).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:31:52'!
depositsBalance
	
	^self sumOfTransactions: deposits.
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:33:11'!
sumOfTransactions: aListOfTransactions
	
	^aListOfTransactions sum: [ :aTransaction | aTransaction value		] 
	ifEmpty: [ 0 ].
	
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LB 10/12/2021 09:31:42'!
withdrawsBalance

	^self sumOfTransactions: withdraws.
	
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:20:58'!
hasRegistered: aTransaction

	^aTransaction isRegisteredOnReceptiveAccount: self.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:19:25'!
hasRegisteredADeposit: aDeposit

	^deposits includes: aDeposit.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'LB 10/12/2021 09:20:08'!
hasRegisteredAWithdraw: aWithdraw

	^withdraws includes: aWithdraw.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 21:39:12' prior: 50860630!
sumOfTransactions: aListOfTransactions
	|currentSum|
	currentSum:=0.
	^aListOfTransactions do: [ :aTransaction | currentSum := aTransaction sumToBalance: currentSum		].
	
! !
!AccountTransaction methodsFor: 'value' stamp: 'sm 10/17/2021 21:39:43'!
sumToBalance: currentSum 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sm 10/17/2021 21:39:57' overrides: 50860665!
sumToBalance: currentSum 

	self subclassResponsibility ! !
!Withdraw methodsFor: 'value' stamp: 'sm 10/17/2021 21:39:57' overrides: 50860665!
sumToBalance: currentSum 

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #sumToBalance: stamp: 'sm 10/17/2021 21:39:57'!
sumToBalance: currentSum 

	self subclassResponsibility !
!AccountTransaction methodsFor: 'value' stamp: 'sm 10/17/2021 21:40:24'!
sumToBalance: currentSum 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sm 10/17/2021 21:41:58' prior: 50860670 overrides: 50860684!
sumToBalance: aCurrentBalance 

	^aCurrentBalance + (self value). ! !
!Withdraw methodsFor: 'value' stamp: 'sm 10/17/2021 21:42:11' prior: 50860675 overrides: 50860684!
sumToBalance: aCurrentBalance 

	^aCurrentBalance - (self value).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:43:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:43:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:43:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:43:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:43:47'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 21:44:06' prior: 50860620!
balance
	
	^(self depositsBalance + self withdrawsBalance).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:44:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:44:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:44:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:44:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:45:39'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:45:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:45:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:45:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:45:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:45:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:45:39'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 21:46:17' prior: 50860657!
sumOfTransactions: aListOfTransactions
	|currentSum|
	currentSum:=0.
	aListOfTransactions do: [ :aTransaction | currentSum := aTransaction sumToBalance: currentSum		].
	^currentSum.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:46:21'!
PASSED!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 21:46:59'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 21:48:08' prior: 50860727!
balance
	
	^self sumOfTransactions: transactions.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:48:12'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:48:12'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:48:13'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:48:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:48:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:48:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:48:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:48:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:48:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:48:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:48:49'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'sm 10/17/2021 21:49:15' prior: 50860595 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:49:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:49:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:49:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:49:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:49:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:49:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:49:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:49:24'!
ERROR!

!methodRemoval: ReceptiveAccount #depositsBalance stamp: 'sm 10/17/2021 21:49:50'!
depositsBalance
	
	^self sumOfTransactions: deposits.
	
!

!methodRemoval: ReceptiveAccount #withdrawsBalance stamp: 'sm 10/17/2021 21:50:01'!
withdrawsBalance

	^self sumOfTransactions: withdraws.
	
!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sm 10/17/2021 21:50:20' prior: 50860616!
transactions 

	^ transactions copy.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'sm 10/17/2021 21:51:38' prior: 50860642!
hasRegistered: aTransaction

	^transactions includes: aTransaction.! !

!methodRemoval: ReceptiveAccount #hasRegisteredADeposit: stamp: 'sm 10/17/2021 21:52:00'!
hasRegisteredADeposit: aDeposit

	^deposits includes: aDeposit.!

!methodRemoval: ReceptiveAccount #hasRegisteredAWithdraw: stamp: 'sm 10/17/2021 21:52:17'!
hasRegisteredAWithdraw: aWithdraw

	^withdraws includes: aWithdraw.!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sm 10/17/2021 21:53:01' prior: 50860601!
register: aTransaction

	transactions add: aTransaction.
! !

!methodRemoval: ReceptiveAccount #registerADeposit: stamp: 'sm 10/17/2021 21:53:09'!
registerADeposit: aDeposit

	deposits add: aDeposit.!

!methodRemoval: ReceptiveAccount #registerAWithdraw: stamp: 'sm 10/17/2021 21:53:13'!
registerAWithdraw: aWithdraw

	withdraws add: aWithdraw.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:53:29'!
PASSED!

!methodRemoval: Deposit #registerToReceptiveAccount: stamp: 'sm 10/17/2021 21:53:52'!
registerToReceptiveAccount: aReceptiveAccount

	aReceptiveAccount registerADeposit: self.!

!methodRemoval: Deposit #isRegisteredOnReceptiveAccount: stamp: 'sm 10/17/2021 21:53:54'!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	^aReceptiveAccount hasRegisteredADeposit: self.!

!methodRemoval: Withdraw #isRegisteredOnReceptiveAccount: stamp: 'sm 10/17/2021 21:54:00'!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	^aReceptiveAccount hasRegisteredAWithdraw: self.!

!methodRemoval: Withdraw #registerToReceptiveAccount: stamp: 'sm 10/17/2021 21:54:01'!
registerToReceptiveAccount: aReceptiveAccount

	aReceptiveAccount registerAWithdraw: self.!

!methodRemoval: AccountTransaction #registerToReceptiveAccount: stamp: 'sm 10/17/2021 21:54:07'!
registerToReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!

!methodRemoval: AccountTransaction #isRegisteredOnReceptiveAccount: stamp: 'sm 10/17/2021 21:54:13'!
isRegisteredOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 21:55:52'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 21:55:53'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 21:55:53'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 21:55:53'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 21:55:53'!
PASSED!

----End fileIn of D:\documentos\inge1\ejer\windows64\windows64\Packages\TerseGuide.pck.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 22:03:47' prior: 50860789!
sumOfTransactions: aListOfTransactions
	
	^aListOfTransactions inject: 0 into: [:aTransaction :total | aTransaction + total].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 22:03:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:03:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:03:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 22:03:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 22:03:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 22:03:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 22:03:48'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 22:04:39' prior: 50864032!
sumOfTransactions: aListOfTransactions
	
	^aListOfTransactions inject: 0 into: [:aTransaction :total | aTransaction sumToBalance: total].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 22:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:04:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:04:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 22:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 22:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 22:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 22:04:42'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/17/2021 22:05:02' prior: 50864066!
sumOfTransactions: aListOfTransactions
	
	^aListOfTransactions inject: 0 into: [:total :aTransaction | aTransaction sumToBalance: total].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 22:05:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/17/2021 22:06:11'!
PASSED!

Object subclass: #BankAssets
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #BankAssets category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 22:16:38'!
Object subclass: #BankAssets
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankAssets subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 22:16:50'!
BankAssets subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankAssets subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 22:16:56'!
BankAssets subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #BankAssets as: #BankAsset stamp: 'sm 10/17/2021 22:17:20'!
Smalltalk renameClassNamed: #BankAssets as: #BankAsset!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 22:22:04'!
BankAsset subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios bankAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'sm 10/17/2021 22:21:59' prior: 50860511!
balance
	^self makeBalanceOf: bankAssets.! !

BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'sm 10/17/2021 22:22:33'!
BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #portfoliosBalance stamp: 'sm 10/17/2021 22:22:59'!
portfoliosBalance
	
	^self makeBalanceOf: portfolios.!

!methodRemoval: Portfolio #accountsBalance stamp: 'sm 10/17/2021 22:23:01'!
accountsBalance
	
	^self makeBalanceOf: accounts.!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 22:24:00' prior: 50860498!
addAccount: aReceptiveAccount 
	
	bankAssets add: aReceptiveAccount.! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 22:24:07' prior: 50860503!
addPortfolio: aPortfolio 
	
	bankAssets add: aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'sm 10/17/2021 22:25:26' prior: 50860493 overrides: 16896425!
initialize

	bankAssets := OrderedCollection new.
! !
!Portfolio methodsFor: 'testing' stamp: 'sm 10/17/2021 22:28:02' prior: 50860538!
hasRegistered: aTransaction 
	
	^ self checkTransaction: aTransaction in: bankAssets.! !

!methodRemoval: Portfolio #accountsHasRegistered: stamp: 'sm 10/17/2021 22:28:07'!
accountsHasRegistered: aTransaction

	^ self checkTransaction: aTransaction in: accounts!

!methodRemoval: Portfolio #portfoliosHasRegistered: stamp: 'sm 10/17/2021 22:28:08'!
portfoliosHasRegistered: aTransaction

	^ self checkTransaction: aTransaction in: portfolios!
!Portfolio methodsFor: 'testing' stamp: 'sm 10/17/2021 22:30:05' prior: 50864251!
hasRegistered: aTransaction 
	
	^ bankAssets anySatisfy: [:aBankAssets | aBankAssets hasRegistered: aTransaction].! !

!methodRemoval: Portfolio #checkTransaction:in: stamp: 'sm 10/17/2021 22:30:27'!
checkTransaction: aTransaction in: aColaborator
	
	^aColaborator 
		anySatisfy: [:aColaboratorElement | aColaboratorElement hasRegistered: aTransaction].!

!methodRemoval: Portfolio #hasRegistered: stamp: 'sm 10/17/2021 22:30:27'!
hasRegistered: aTransaction 
	
	^ bankAssets anySatisfy: [:aBankAssets | aBankAssets hasRegistered: aTransaction].!
!Portfolio methodsFor: 'balance' stamp: 'sm 10/17/2021 22:34:16' prior: 50864210!
balance

	^ bankAssets sum: [:aBankAsset| aBankAsset balance ] ifEmpty: [0].! !

!methodRemoval: Portfolio #makeBalanceOf: stamp: 'sm 10/17/2021 22:34:25'!
makeBalanceOf: aPortfolioColaborator
	^(aPortfolioColaborator 
		sum: [:anElementOfColaborator| anElementOfColaborator balance ] 
		ifEmpty: [0]).!
!Portfolio methodsFor: 'transactions' stamp: 'sm 10/17/2021 22:35:49' prior: 50860573!
transactions
	| colaboratorTransactions |
	
	colaboratorTransactions := OrderedCollection new.

	bankAssets do:[:aCollaboratorElement| 
		colaboratorTransactions := (colaboratorTransactions, aCollaboratorElement transactions)
		].
	
	^colaboratorTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'sm 10/17/2021 22:36:19' prior: 50864301!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	bankAssets do:[:aCollaboratorElement| 
		currentTransactions := (currentTransactions, aCollaboratorElement transactions)
		].
	
	^currentTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'sm 10/17/2021 22:36:48' prior: 50864312!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	bankAssets do:[:aBankAsset| 
		currentTransactions := (currentTransactions, aBankAsset transactions)
		].
	
	^currentTransactions! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:37:01'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 22:37:01'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:37:01'!
ERROR!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 22:37:01'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 22:37:01'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 22:37:01'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 22:37:01'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 22:37:01'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:37:08'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'sm 10/17/2021 22:40:43'!
hasRegister: aTransaction

	^bankAssets anySatisfy: [:aColaboratorElement | aColaboratorElement hasRegistered: aTransaction].! !
!Portfolio methodsFor: 'transactions' stamp: 'sm 10/17/2021 22:41:07' prior: 50864376!
hasRegister: aTransaction

	^bankAssets anySatisfy: [:aBankAsset | aBankAsset hasRegistered: aTransaction].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 22:41:17'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 22:41:18'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:41:18'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 22:41:18'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 22:41:18'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:41:18'!
ERROR!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 22:41:18'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 22:41:18'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 22:41:18'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 22:41:18'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 22:41:18'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:41:25'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'sm 10/17/2021 22:41:39'!
hasRegistered: aTransaction

	^bankAssets anySatisfy: [:aBankAsset | aBankAsset hasRegistered: aTransaction].! !

!methodRemoval: Portfolio #hasRegister: stamp: 'sm 10/17/2021 22:41:46'!
hasRegister: aTransaction

	^bankAssets anySatisfy: [:aBankAsset | aBankAsset hasRegistered: aTransaction].!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:41:51'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 22:41:51'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:41:51'!
FAILURE!

account1 transactions!

portfolio transactions!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:46:50' prior: 50860091!
test09
	| portfolio portfolioAAgregar account1 account2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioAAgregar addAccount: account1.	
	portfolio addAccount: account2.
	
	portfolio addPortfolio: portfolioAAgregar.
	
	self assert: (account2 transactions, account1 transactions) equals: portfolio transactions.! !

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:46:55'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 22:46:59'!
PASSED!

!methodRemoval: Portfolio #accountsTransactions stamp: 'sm 10/17/2021 22:47:27'!
accountsTransactions
	
	^self gettransactionsOf: accounts.!

!methodRemoval: Portfolio #portfoliosTransactions stamp: 'sm 10/17/2021 22:47:29'!
portfoliosTransactions
	
	^self gettransactionsOf: portfolios.!

!methodRemoval: Portfolio #gettransactionsOf: stamp: 'sm 10/17/2021 22:47:31'!
gettransactionsOf: aCollaborator
	| colaboratorTransactions |
	
	colaboratorTransactions := OrderedCollection new.

	aCollaborator do:[:aCollaboratorElement| 
		colaboratorTransactions := (colaboratorTransactions, aCollaboratorElement transactions)
		].
	
	^colaboratorTransactions!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 22:51:35'!
add: aBankAsset 
	
	bankAssets add: aBankAsset .! !

!methodRemoval: Portfolio #addAccount: stamp: 'sm 10/17/2021 22:52:03'!
addAccount: aReceptiveAccount 
	
	bankAssets add: aReceptiveAccount.!

!methodRemoval: Portfolio #addPortfolio: stamp: 'sm 10/17/2021 22:52:08'!
addPortfolio: aPortfolio 
	
	bankAssets add: aPortfolio.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:52:36' prior: 50860010!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:52:49' prior: 50860021!
test03
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:53:05' prior: 50860031!
test04
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:53:13' prior: 50860046!
test05
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar add: account1.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:53:20' prior: 50860066!
test07
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: account transactions equals: portfolio transactions.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:53:36' prior: 50860077!
test08
	| portfolio portfolioAAgregar account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:53:48' prior: 50864491!
test09
	| portfolio portfolioAAgregar account1 account2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioAAgregar add: account1.	
	portfolio add: account2.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (account2 transactions, account1 transactions) equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:53:57' prior: 50860110!
test10
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:54:09' prior: 50860125!
test11
	| portfolio portfolioToAdd1 portfolioToAdd2 account1 account2 |
	
	portfolio := Portfolio new.
	portfolioToAdd1 := Portfolio new.
	portfolioToAdd2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolioToAdd1 add: account1.	
	portfolioToAdd2 add: account2.	
	
	portfolio add: portfolioToAdd1.
	portfolio add: portfolioToAdd2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:54:20' prior: 50860157!
test13
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:54:25' prior: 50860169!
test14
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio add: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:54:51' prior: 50860186!
test15
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:55:01' prior: 50860201!
test16
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:55:19' prior: 50860219!
test17
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 add: account2.
	
	portfolio add: portfolioAAgregar1.
	portfolio add: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 22:55:30'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 22:58:17'!
test18
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 add: account2.
	
	portfolio add: portfolioAAgregar1.
	portfolio add: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:19:02' prior: 50864844!
test18
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: 'no se puede agregar cuentas repetidas'.! !

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:19:03'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:23:48' prior: 50864573!
add: aBankAsset 
	
	self assertPorfolioDoesNotInclude: aBankAsset.
	
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:24:15'!
assertPorfolioDoesNotInclude: aBankAsset 
	
	
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:24:50' prior: 50864887!
assertPorfolioDoesNotInclude: aBankAsset 
	
	
	bankAssets .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:25:22'!
assertIsValidToStore: aBankAsset 
	
	
	bankAssets .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:25:22' prior: 50864881!
add: aBankAsset 
	
	self assertIsValidToStore: aBankAsset.
	
	bankAssets add: aBankAsset .! !

!methodRemoval: Portfolio #assertPorfolioDoesNotInclude: stamp: 'sm 10/17/2021 23:25:22'!
assertPorfolioDoesNotInclude: aBankAsset 
	
	
	bankAssets .!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:34:14' prior: 50864901!
add: aBankAsset 
	
	(bankAssets first = aBankAsset) ifTrue:[].
	
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:36:08' prior: 50864912!
add: aBankAsset 
	
	(bankAssets first = aBankAsset) ifTrue:[self error: 'no se puede agregar cuentas repetidas'].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:36:13'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:36:13'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:36:13'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:36:13'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:36:14'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:36:14'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:36:14'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:36:51' prior: 50864918!
add: aBankAsset 
	
	((bankAssets first) = aBankAsset) ifTrue:[self error: 'no se puede agregar cuentas repetidas'].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:37:01'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:37:01'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:37:01'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:37:01'!
ERROR!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:37:07'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:39:31' prior: 50864969!
add: aBankAsset 
	
	(bankAssets isEmpty) ifFalse: [(bankAssets first = aBankAsset) ifTrue:[self error: 'no se puede agregar cuentas repetidas']].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:39:33'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:40:33'!
test19
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: 'no se puede agregar cuentas repetidas'.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:41:59' prior: 50865074!
test19
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: 'no se puede agregar cuentas repetidas'.! !

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:42:02'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:44:21' prior: 50865022!
add: aBankAsset 
	
	(bankAssets isEmpty) ifFalse: [(bankAssets includes: aBankAsset) ifTrue:[self error: 'no se puede agregar cuentas repetidas']].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:44:23'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:44:23'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:44:23'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:44:23'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:44:23'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:44:23'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:44:24'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:44:47' prior: 50865100!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: 'no se puede agregar cuentas repetidas'].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:44:49'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:46:19'!
test20
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: 'no se puede agregar cuentas repetidas'.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:48:08' prior: 50865209!
test20
	| portfolio |
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: 'no se puede agregar nodos repetidos'.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:49:05' prior: 50865085!
test19
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: 'cant add duplicated bank asset'.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:49:15' prior: 50864868!
test18
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: 'cant add duplicated bank asset'.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:49:22' prior: 50865222!
test20
	| portfolio |
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: 'cant add duplicated bank asset'.! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:49:33' prior: 50865155!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: 'cant add duplicated bank asset'].
	
	bankAssets add: aBankAsset .! !
!Portfolio class methodsFor: 'nil' stamp: 'sm 10/17/2021 23:50:37'!
cantAddDuplicatedBankAssets

	^self error: 'cant add duplicated bank asset'.! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:51:47' prior: 50865263!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	bankAssets add: aBankAsset .! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:51:55' prior: 50865270!
cantAddDuplicatedBankAssets

	^'cant add duplicated bank asset'.! !

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:52:24'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:52:24'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:52:24'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:52:24'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:52:25'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/17/2021 23:52:25'!
FAILURE!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/17/2021 23:52:25'!
FAILURE!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:52:51' prior: 50865231!
test19
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:52:53'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/17/2021 23:52:54'!
FAILURE!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/17/2021 23:52:54'!
FAILURE!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:53:11' prior: 50865244!
test18
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/17/2021 23:53:17' prior: 50865255!
test20
	| portfolio |
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test20 stamp: 'sm 10/17/2021 23:53:19'!
FAILURE!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:54:00'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/17/2021 23:54:49' prior: 50865276!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/17/2021 23:54:55'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/17/2021 23:54:56'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:07:08'!
test21
	| rootPortfolio childPortfolio |
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:07:10'!
FAILURE!

BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'sm 10/18/2021 00:13:49'!
BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:14:27' prior: 50865433!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 00:14:30'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 00:14:31'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:14:31'!
FAILURE!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:14:31'!
FAILURE!

childPortfolio add: rootPortfolio!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:18:46'!
FAILURE!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:18:46'!
FAILURE!

childPortfolio add: rootPortfolio!

aString!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:22:38' prior: 50865519!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:23:15'!
setFather: aBankAsset 
	
	
	father:=aBankAsset.! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:24:04' prior: 50865592!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 00:24:06'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 00:24:06'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 00:24:06'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 00:24:06'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 00:24:06'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 00:24:06'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:24:06'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:26:50'!
PASSED!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'sm 10/18/2021 00:30:56'!
BankAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/18/2021 00:30:54'!
setFather: aBankAsset 
	
	
	father:=aBankAsset.! !

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 00:32:37'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 00:32:40'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 00:32:41'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 00:32:41'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 00:32:41'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 00:32:41'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 00:32:41'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:32:41'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:34:54'!
test22
	| rootPortfolio childPortfolio middlePort |
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:37:40' prior: 50865744!
test22
	| rootPortfolio childPortfolio middlePortfolio |
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test22 stamp: 'sm 10/18/2021 00:37:42'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:42:02' prior: 50865610!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assetIsIncludeInTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:42:22' prior: 50865773!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:43:09'!
xxx: aBankAsset
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:47:51' prior: 50865806!
xxx: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset xxx: aBankAssetToSearch].]
	
	
"	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .
	"! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:48:38'!
assertIsMyChild: aBankAssetToSearch

	^bankAssets anySatisfy: [:aBankAsset | aBankAsset = aBankAssetToSearch].
! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:49:27'!
assertIsInMyTree: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset xxx: aBankAssetToSearch].]
	
	
"	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .
	"! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:49:27' prior: 50865790!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:49:27' prior: 50865822!
xxx: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset assertIsInMyTree: aBankAssetToSearch].]
	
	
"	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .
	"! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:49:27' prior: 50865848!
assertIsInMyTree: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset assertIsInMyTree: aBankAssetToSearch].]
	
	
"	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .
	"! !

!methodRemoval: Portfolio #xxx: stamp: 'sm 10/18/2021 00:49:27'!
xxx: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset assertIsInMyTree: aBankAssetToSearch].]
	
	
"	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self xxx: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .
	"!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:51:07' prior: 50865909!
assertIsInMyTree: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset assertIsInMyTree: aBankAssetToSearch].].
	^false
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/18/2021 00:52:21'!
assertIsInMyTree: ddd
	
	^true.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/18/2021 00:52:31' prior: 50865960!
assertIsInMyTree: ddd
	
	^false.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sm 10/18/2021 00:52:53'!
assertIsMyChild: aBankAssetToSearch

	^false.
! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:53:41' prior: 50865951!
assertIsInMyTree: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset assertIsInMyTree: aBankAssetToSearch].].
	^true.
! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'sm 10/18/2021 00:54:10'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:56:05'!
test23
	| rootPortfolio childPortfolio middlePortfolio |
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'sm 10/18/2021 00:56:20' prior: 50866035!
test23
	| rootPortfolio childPortfolio middlePortfolio |
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test23 stamp: 'sm 10/18/2021 00:56:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:58:31' prior: 50865870!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 00:58:45' prior: 50866067!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 01:00:35'!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsNotMyFather: aBankAssetToSearch) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch].
	^true.
! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 01:01:16'!
assertIsNotMyFather: aBankAssetToSearch
	^(father=aBankAssetToSearch).
! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 01:01:25'!
assertIsMyFather: aBankAssetToSearch
	^(father=aBankAssetToSearch).
! !

!methodRemoval: Portfolio #assertIsNotMyFather: stamp: 'sm 10/18/2021 01:01:33'!
assertIsNotMyFather: aBankAssetToSearch
	^(father=aBankAssetToSearch).
!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 01:02:05' prior: 50866107!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch].
	^true.
! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 01:05:04'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 01:05:04'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 01:05:04'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 01:05:04'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 01:05:05'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'sm 10/18/2021 01:05:05'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'sm 10/18/2021 01:05:58'!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch].
	^true.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'sm 10/18/2021 01:06:30'!
assertIsMyFather: aBankAssetToSearch
	^(father=aBankAssetToSearch).
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sm 10/18/2021 01:06:37'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 01:06:45'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 01:06:45'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 01:06:45'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 01:06:45'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 01:06:46'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'sm 10/18/2021 01:06:46'!
ERROR!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 01:07:53'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 01:07:53'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 01:07:53'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 01:07:53'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 01:07:53'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 01:07:54'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 01:07:54'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 01:07:54'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'sm 10/18/2021 01:07:54'!
ERROR!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 01:07:57'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 01:11:30' prior: 50866130!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[(father isNil) ifTrue:[^father assertIsInMyHierarchy: aBankAssetToSearch]].
	^true.
! !
!Portfolio methodsFor: 'adding' stamp: 'sm 10/18/2021 01:12:14' prior: 50866345!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[(father isNil) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch]. ^false].
	^true.
! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'sm 10/18/2021 01:12:17'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'sm 10/18/2021 01:12:18'!
PASSED!

----SNAPSHOT----(18 October 2021 01:28:24) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (18 October 2021 09:41:48) as /home/luisb/Programs/smalltalk_base (portfolio)/CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'LB 10/18/2021 09:42:18'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'LB 10/18/2021 09:42:18'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'LB 10/18/2021 09:42:18'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'LB 10/18/2021 09:42:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'LB 10/18/2021 09:42:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'LB 10/18/2021 09:42:19'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTests stamp: 'LB 10/18/2021 09:42:20'!
TestCase subclass: #PortfolioTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/luisb/Programs/smalltalk_base (portfolio)/Portfolio-Ejercicio.st----!

other addAll: test!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other addAll: test!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
test add: 3.
other addAll: test!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
test add: 3.
other addAll: test!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
test add: 3.
test addAll: other!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
test addAll: other!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
test addAll: other!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
other addAll: test!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
other addAll: test.!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.!

other addAll: test.!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
other addAll: test.!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
other add: 4.
other addAll: test.!

|test other|
test:= OrderedCollection new.
test add: 1.
test add: 2.
other := OrderedCollection new.
other add: 3.
other add: 4.
other addAll: test.!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:24:15'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:24:17'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:25:44' prior: 50878925!
test21
	| rootPortfolio childPortfolio |
	
	"	|r|
		/ \
		|c|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:26:16' prior: 50879469!
test21
	| rootPortfolio childPortfolio |
	
	"	|rP|
		/ \
		|cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:26:41' prior: 50878894!
test18
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:27:35' prior: 50878904!
test19
	| portfolio account1 account2 |
	
	"	 |p|
		/ \ \
	 |a1| |a2|   "
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:28:00' prior: 50878917!
test20
	| portfolio |
	
	"	|p|
		 |
		|p|    "
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:28:27' prior: 50879521!
test20
	| portfolio |
	
	"	|p|
		 |
		|p|    "
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:28:40' prior: 50879482!
test21
	| rootPortfolio childPortfolio |
	
	"	|rP|
		 / \
		|cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:30:39' prior: 50878937!
test22
	| rootPortfolio childPortfolio middlePortfolio |
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:30:44' prior: 50879554!
test22
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:32:02' prior: 50878951!
test23
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<_
		 |    \
		|mP|  |   
		 |    / 
		|cP|	-/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:32:15' prior: 50879570!
test22
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:32:27' prior: 50879587!
test23
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:34:12'!
test24
	| aRootPortfolio aMiddlePortfolio anotherMiddlePortfolio |

	aRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	anotherMiddlePortfolio := Portfolio new.
	
	aRootPortfolio add: aMiddlePortfolio.
	aRootPortfolio add: anotherMiddlePortfolio.
	
	self
		should: [	aMiddlePortfolio  add: anotherMiddlePortfolio.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:34:14'!
FAILURE!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:35:10' prior: 50879637!
test24
	| rootPortfolio aMiddlePortfolio anotherMiddlePortfolio |
	
	"	|rP|
		/  
	  |mP|  
		 	"
	
	rootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	anotherMiddlePortfolio := Portfolio new.
	
	rootPortfolio add: aMiddlePortfolio.
	rootPortfolio add: anotherMiddlePortfolio.
	
	self
		should: [	aMiddlePortfolio  add: anotherMiddlePortfolio.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:35:17' prior: 50879656!
test24
	| rootPortfolio childPortfolio anotherMiddlePortfolio |
	
	"	|rP|
		/  
	  |mP|  
		 	"
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherMiddlePortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherMiddlePortfolio.
	
	self
		should: [	childPortfolio  add: anotherMiddlePortfolio.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:35:30' prior: 50879673!
test24
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  
	  |mP|  
		 	"
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio  add: anotherChildPortfolio.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:36:07' prior: 50879690!
test24
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  \
	 |mP|--|aP|     "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio  add: anotherChildPortfolio.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:36:33' prior: 50879707!
test24
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  \
	 |mP|--|aP| "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio  add: anotherChildPortfolio.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:36:49' prior: 50879724!
test24
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  \
	 |mP|--|aP| "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio add: anotherChildPortfolio]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:40:15'!
test25
	| aLeftRootPortfolio aRightRootPortfolio aMiddlePortfolio anAccount|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	aLeftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	anAccount  := ReceptiveAccount  new.
	
	aRightRootPortfolio add: aMiddlePortfolio.
	aLeftRootPortfolio add: aMiddlePortfolio.

	aRightRootPortfolio add: anAccount.
	
	self
		should: [	aMiddlePortfolio  add: anAccount.]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:40:24' prior: 50879757!
test25
	| aLeftRootPortfolio aRightRootPortfolio aMiddlePortfolio anAccount|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	aLeftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	anAccount  := ReceptiveAccount  new.
	
	aRightRootPortfolio add: aMiddlePortfolio.
	aLeftRootPortfolio add: aMiddlePortfolio.

	aRightRootPortfolio add: anAccount.
	
	self
		should: [	aMiddlePortfolio add: anAccount]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:40:39' prior: 50879778!
test25
	| leftRootPortfolio aRightRootPortfolio aMiddlePortfolio anAccount|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	anAccount  := ReceptiveAccount  new.
	
	aRightRootPortfolio add: aMiddlePortfolio.
	leftRootPortfolio add: aMiddlePortfolio.

	aRightRootPortfolio add: anAccount.
	
	self
		should: [	aMiddlePortfolio add: anAccount]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:40:43' prior: 50879799!
test25
	| leftRootPortfolio rightRootPortfolio aMiddlePortfolio anAccount|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	anAccount  := ReceptiveAccount  new.
	
	rightRootPortfolio add: aMiddlePortfolio.
	leftRootPortfolio add: aMiddlePortfolio.

	rightRootPortfolio add: anAccount.
	
	self
		should: [	aMiddlePortfolio add: anAccount]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:40:48' prior: 50879820!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio anAccount|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	anAccount  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: anAccount.
	
	self
		should: [	middlePortfolio add: anAccount]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:40:52' prior: 50879840!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:41:04' prior: 50879860!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:41:06' prior: 50879880!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"	|lP| |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:41:20'!
FAILURE!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:41:26'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:41:26'!
FAILURE!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:41:26'!
FAILURE!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:44:49' prior: 50879741!
test24
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  \
	 |cP|--|aP| "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio add: anotherChildPortfolio]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:45:27' prior: 50879900!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

----SNAPSHOT----(18 October 2021 10:47:00) CuisUniversity-4532.image priorSource: 17502114!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:48:35' prior: 50880000!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	"self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets."! !

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:48:37'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:49:09' prior: 50879194!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:49:23'!
father 
	
	^father! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/18/2021 10:49:28'!
father 
	
	^father! !

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:49:46'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:50:31' prior: 50880045!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	"(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets]."
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:50:35' prior: 50880078!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	"(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets]."
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:50:35'!
FAILURE!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:50:35'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:50:35'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:50:43' prior: 50880102!
add: aBankAsset 
	
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset .! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:50:45'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:50:45'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:50:45'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:50:45'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:50:45'!
ERROR!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:50:59'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:50:59'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:50:59'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:51:00'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:51:00'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:51:00'!
ERROR!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:51:01'!
ERROR!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:51:24'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:53:18' prior: 50879214!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[(father isNil) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch]. ^false].
	(father isNil) ifTrue:[^false]. ^true.
! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:53:20'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:53:25'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:53:28'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 10:53:37' prior: 50880023!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 10:53:38'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:56:33' prior: 50880188!
add: aBankAsset 
	"
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset ."
	
	self assertIsValidToStore: aBankAsset.
	self safeAdd: aBankAsset.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LB 10/18/2021 10:57:35'!
BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets father roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:57:32' prior: 50879243!
assertIsValidToStore: aBankAssetToStore
	roots do:[:root|self assert: root doesNotInclude:aBankAssetToStore].! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:57:44' prior: 50880587!
assertIsValidToStore: aBankAssetToStore

	roots do:[:root|self assert: root doesNotInclude:aBankAssetToStore].! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:58:48'!
assert: aRootPortfolio doesNotInclude:anAssetToStore
	
	(aRootPortfolio includesAsset: anAssetToStore) ifTrue: 		[self error: self class cantAddDuplicatedBankAssets].! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 10:59:52' prior: 50880594!
assertIsValidToStore: aBankAssetToStore

	roots do: [:root| self assert: root doesNotInclude:aBankAssetToStore].! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:00:07' prior: 50880600!
assert: aRootPortfolio doesNotInclude:anAssetToStore
	
	(aRootPortfolio includesAsset: anAssetToStore) ifTrue: 		[self error: self class cantAddDuplicatedBankAssets].! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:00:58'!
includesAsset: 	aBaknAsset
	(self = aBaknAsset)! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:01:03' prior: 50880623!
includesAsset: 	aBankAsset
	(self = aBankAsset)! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:01:43' prior: 50880628!
includesAsset: 	aBankAsset
	(self = aBankAsset) ifTrue: [^true].
	^self any: bankAssets includes: aBankAsset.! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:02:00' prior: 50880633!
includesAsset: 	aBankAsset

	(self = aBankAsset) ifTrue: [^true].
	^self any: bankAssets includes: aBankAsset.! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:02:01' prior: 50880640!
includesAsset: 	aBankAsset
	
	(self = aBankAsset) ifTrue: [^true].
	^self any: bankAssets includes: aBankAsset.! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:03:22'!
any: bankAssetsToSearch includes: aBankAsset

	^bankAssetsToSearch anySatisfy: [:asset| asset includesAsset: aBankAsset].! !
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:03:37' prior: 50880553!
add: aBankAsset 
	"
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset ."
	
	self assertIsValidToStore: aBankAsset.
	"self safeAdd: aBankAsset."
	bankAssets add: aBankAsset.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:03:38'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:03:38'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:03:38'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:03:38'!
FAILURE!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:03:38'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:03:58' prior: 50880660!
add: aBankAsset 
	"
	(bankAssets includes: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(father = aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyTree: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	(self assertIsInMyHierarchy: aBankAsset father) ifTrue:[self error: self class cantAddDuplicatedBankAssets].
	
	aBankAsset setFather: self.
	bankAssets add: aBankAsset ."
	
	self assertIsValidToStore: aBankAsset.
	self safeAdd: aBankAsset.! !

BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LB 10/18/2021 11:04:14'!
BankAsset subclass: #Portfolio
	instanceVariableNames: 'bankAssets roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:05:01'!
safeAdd: anAssetToStore

	bankAssets add: anAssetToStore.
	anAssetToStore updateRoots: roots.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:05:08' prior: 50880784!
safeAdd: aBankAssetToStore

	bankAssets add: aBankAssetToStore.
	aBankAssetToStore updateRoots: roots.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:05:35'!
updateRoots:		newRoots

	self deleteRootsThatAreChildrenOf: newRoots.
	roots addAll: newRoots.
	self updateChildrenRoots: newRoots.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:06:06'!
updateChildrenRoots: aRootSet

	^ bankAssets do: [:aChildAsset| aChildAsset updateRoots: aRootSet]! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:06:22' prior: 50880803!
updateChildrenRoots: aRootSet

	^ bankAssets do: [:aBankAsset| aBankAsset updateRoots: aRootSet]! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:06:41' prior: 50880796!
updateRoots:		aSetOfnewRoots

	self deleteRootsThatAreChildrenOf: aSetOfnewRoots.
	roots addAll: aSetOfnewRoots.
	self updateChildrenRoots: aSetOfnewRoots.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:06:45' prior: 50880815!
updateRoots:		aSetOfNewRoots

	self deleteRootsThatAreChildrenOf: aSetOfNewRoots.
	roots addAll: aSetOfNewRoots.
	self updateChildrenRoots: aSetOfNewRoots.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:06:52' prior: 50880823!
updateRoots:		aSetOfNewRoots

	"self deleteRootsThatAreChildrenOf: aSetOfNewRoots."
	roots addAll: aSetOfNewRoots.
	self updateChildrenRoots: aSetOfNewRoots.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:06:56'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:06:56'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:06:56'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:06:56'!
FAILURE!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:06:56'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:07:25' prior: 50880831!
updateRoots:		aSetOfNewRoots

	self deleteRootsThatAreChildrenOf: aSetOfNewRoots.
	roots addAll: aSetOfNewRoots.
	self updateChildrenRoots: aSetOfNewRoots.! !
!Portfolio methodsFor: 'balance' stamp: 'LB 10/18/2021 11:07:42'!
deleteRootsThatAreChildrenOf: aSetOfNewRoots

	^ roots do: 
		[:anOldRoot| (self any: aSetOfNewRoots includes: anOldRoot) 
			ifTrue: [roots remove: anOldRoot] ]! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:07:45'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:07:45'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:07:45'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:07:45'!
FAILURE!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:07:45'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'LB 10/18/2021 11:08:19' prior: 50879190 overrides: 16896425!
initialize

	bankAssets := OrderedCollection new.
	roots := Set with: self.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:08:24'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:08:24'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:10:12' prior: 50880653!
any: bankAssetsToSearch includes: aBankAsset

	^bankAssetsToSearch detect: [:asset| asset includesAsset: aBankAsset]
		ifFound:[:unused|true] 
		ifNone:[false]! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:10:13'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:10:13'!
ERROR!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:11:02'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:11:02'!
ERROR!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:11:04'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:11:29'!
updateRoots:		aSetOfNewRoots
	! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:11:34'!
FAILURE!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:11:34'!
ERROR!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:11:34'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:11:34'!
FAILURE!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:11:40'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:13:04'!
includesAsset: aReceptiveAccount
	^self = aReceptiveAccount! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LB 10/18/2021 11:13:05'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:13:14'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:14:00'!
test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio
	| aRootPortfolio aLowerPortfolio aMiddlePortfolio |
	aRootPortfolio := Portfolio  new.
	aMiddlePortfolio := Portfolio  new.
	aLowerPortfolio := Portfolio  new.
	
	aMiddlePortfolio add: aLowerPortfolio.
	aRootPortfolio add: aMiddlePortfolio.
	
	self assert: 1 equals: aLowerPortfolio  roots size.
	self assert: aLowerPortfolio roots includes: aRootPortfolio.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:14:21' prior: 50881329!
test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio
	| rootPortfolio aLowerPortfolio aMiddlePortfolio |
	rootPortfolio := Portfolio  new.
	aMiddlePortfolio := Portfolio  new.
	aLowerPortfolio := Portfolio  new.
	
	aMiddlePortfolio add: aLowerPortfolio.
	rootPortfolio add: aMiddlePortfolio.
	
	self assert: 1 equals: aLowerPortfolio  roots size.
	self assert: aLowerPortfolio roots includes: rootPortfolio.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:14:33' prior: 50881346!
test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio
	| rootPortfolio lowerPortfolio aMiddlePortfolio |
	rootPortfolio := Portfolio  new.
	aMiddlePortfolio := Portfolio  new.
	lowerPortfolio := Portfolio  new.
	
	aMiddlePortfolio add: lowerPortfolio.
	rootPortfolio add: aMiddlePortfolio.
	
	self assert: 1 equals: lowerPortfolio  roots size.
	self assert: lowerPortfolio roots includes: rootPortfolio.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:14:40' prior: 50881363!
test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio
	| rootPortfolio lowerPortfolio middlePortfolio |
	rootPortfolio := Portfolio  new.
	middlePortfolio := Portfolio  new.
	lowerPortfolio := Portfolio  new.
	
	middlePortfolio add: lowerPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self assert: 1 equals: lowerPortfolio  roots size.
	self assert: lowerPortfolio roots includes: rootPortfolio.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:14:46' prior: 50881380!
test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio
	| rootPortfolio lowerPortfolio middlePortfolio |
	rootPortfolio := Portfolio  new.
	middlePortfolio := Portfolio  new.
	lowerPortfolio := Portfolio  new.
	
	middlePortfolio add: lowerPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self assert: 1 equals: lowerPortfolio roots size.
	self assert: lowerPortfolio roots includes: rootPortfolio.! !

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:14:47'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:15:00'!
roots 
	
	^roots.! !

!methodRemoval: Portfolio #father stamp: 'LB 10/18/2021 11:15:03'!
father 
	
	^father!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:15:11'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:15:11'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:15:32'!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| aLeftRootPortfolio aRightRootPortfolio aMiddlePortfolio |

	aLeftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aRightRootPortfolio add: aMiddlePortfolio.
	aLeftRootPortfolio add: aMiddlePortfolio.
	
	self assert: 2 equals: aMiddlePortfolio roots size.
	self assert: aMiddlePortfolio roots includes: aLeftRootPortfolio.
	self assert: aMiddlePortfolio roots includes: aRightRootPortfolio.
	
	
	! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:15:37' prior: 50881490!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| leftRootPortfolio aRightRootPortfolio aMiddlePortfolio |

	leftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aRightRootPortfolio add: aMiddlePortfolio.
	leftRootPortfolio add: aMiddlePortfolio.
	
	self assert: 2 equals: aMiddlePortfolio roots size.
	self assert: aMiddlePortfolio roots includes: leftRootPortfolio.
	self assert: aMiddlePortfolio roots includes: aRightRootPortfolio.
	
	
	! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:15:43' prior: 50881510!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| leftRootPortfolio rightRootPortfolio aMiddlePortfolio |

	leftRootPortfolio := Portfolio new.
	aMiddlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	
	rightRootPortfolio add: aMiddlePortfolio.
	leftRootPortfolio add: aMiddlePortfolio.
	
	self assert: 2 equals: aMiddlePortfolio roots size.
	self assert: aMiddlePortfolio roots includes: leftRootPortfolio.
	self assert: aMiddlePortfolio roots includes: rightRootPortfolio.
	
	
	! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:15:47' prior: 50881530!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| leftRootPortfolio rightRootPortfolio middlePortfolio |

	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.
	
	self assert: 2 equals: middlePortfolio roots size.
	self assert: middlePortfolio roots includes: leftRootPortfolio.
	self assert: middlePortfolio roots includes: rightRootPortfolio.
	
	
	! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:16:08' prior: 50881550!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| leftRootPortfolio rightRootPortfolio middlePortfolio |

	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.
	
	self assert: 2 equals: middlePortfolio roots size.
	self assert: middlePortfolio roots includes: leftRootPortfolio.
	self assert: middlePortfolio roots includes: rightRootPortfolio.
	
	
	! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:16:12' prior: 50881569!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| leftRootPortfolio rightRootPortfolio middlePortfolio |

	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.
	
	self assert: 3 equals: middlePortfolio roots size.
	self assert: middlePortfolio roots includes: leftRootPortfolio.
	self assert: middlePortfolio roots includes: rightRootPortfolio.
	
	
	! !

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:16:13'!
FAILURE!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:16:18' prior: 50881588!
test27AddSecondRootToChildPortfolioUpdatesRootsToMany

	| leftRootPortfolio rightRootPortfolio middlePortfolio |

	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.
	
	self assert: 2 equals: middlePortfolio roots size.
	self assert: middlePortfolio roots includes: leftRootPortfolio.
	self assert: middlePortfolio roots includes: rightRootPortfolio.
	
	
	! !

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:16:19'!
PASSED!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:16:53'!
PASSED!

!methodRemoval: Portfolio #assertIsInMyHierarchy: stamp: 'LB 10/18/2021 11:16:58'!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[(father isNil) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch]. ^false].
	(father isNil) ifTrue:[^false]. ^true.
!

!methodRemoval: Portfolio #assertIsInMyTree: stamp: 'LB 10/18/2021 11:16:59'!
assertIsInMyTree: aBankAssetToSearch
	(self assertIsMyChild: aBankAssetToSearch) ifFalse:[^bankAssets anySatisfy: [:aBankAsset | aBankAsset assertIsInMyTree: aBankAssetToSearch].].
	^true.
!

!methodRemoval: Portfolio #assertIsMyChild: stamp: 'LB 10/18/2021 11:17:01'!
assertIsMyChild: aBankAssetToSearch

	^bankAssets anySatisfy: [:aBankAsset | aBankAsset = aBankAssetToSearch].
!

!methodRemoval: Portfolio #assertIsMyFather: stamp: 'LB 10/18/2021 11:17:04'!
assertIsMyFather: aBankAssetToSearch
	^(father=aBankAssetToSearch).
!

!methodRemoval: Portfolio #setFather: stamp: 'LB 10/18/2021 11:19:58'!
setFather: aBankAsset 
	
	
	father:=aBankAsset.!

!methodRemoval: ReceptiveAccount #assertIsMyChild: stamp: 'LB 10/18/2021 11:22:06'!
assertIsMyChild: aBankAssetToSearch

	^false.
!

!methodRemoval: ReceptiveAccount #father stamp: 'LB 10/18/2021 11:22:10'!
father 
	
	^father!

BankAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'LB 10/18/2021 11:22:17'!
BankAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: ReceptiveAccount #setFather: stamp: 'LB 10/18/2021 11:22:25'!
setFather: aBankAsset 
	
	
	father:=aBankAsset.!

!methodRemoval: ReceptiveAccount #assertIsMyFather: stamp: 'LB 10/18/2021 11:22:50'!
assertIsMyFather: aBankAssetToSearch
	^(father=aBankAssetToSearch).
!

!methodRemoval: ReceptiveAccount #assertIsInMyTree: stamp: 'LB 10/18/2021 11:22:54'!
assertIsInMyTree: ddd
	
	^false.!

!methodRemoval: ReceptiveAccount #assertIsInMyHierarchy: stamp: 'LB 10/18/2021 11:22:56'!
assertIsInMyHierarchy: aBankAssetToSearch
	(self assertIsMyFather: aBankAssetToSearch) ifFalse:[^father assertIsInMyHierarchy: aBankAssetToSearch].
	^true.!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:26:23'!
PASSED!
!Portfolio methodsFor: 'comparing' stamp: 'LB 10/18/2021 11:27:08' prior: 50881041!
any: bankAssetsToSearch includes: aBankAsset

	^bankAssetsToSearch anySatisfy: [:asset| asset includesAsset: aBankAsset].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:27:09'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:27:09'!
PASSED!
!Portfolio methodsFor: 'roots - private' stamp: 'LB 10/18/2021 11:27:29' prior: 50880809!
updateChildrenRoots: aRootSet

	^bankAssets do: [:aBankAsset| aBankAsset updateRoots: aRootSet]! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:27:54' prior: 50880615!
assert: aRootPortfolio doesNotInclude:aBankAssetToStore
	
	(aRootPortfolio includesAsset: aBankAssetToStore) ifTrue: 		[self error: self class cantAddDuplicatedBankAssets].! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:29:36' prior: 50881992!
assert: aRootPortfolio doesNotInclude:aBankAssetToStore
	
	(aRootPortfolio includesAsset: aBankAssetToStore)
		ifTrue: 		[self error: self class cantAddDuplicatedBankAssets].! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:30:08' prior: 50880608!
assertIsValidToStore: aBankAssetToStore

	roots do: [:aRoot| self assert: aRoot doesNotInclude:aBankAssetToStore].! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:30:12' prior: 50882010!
assertIsValidToStore: aBankAssetToStore

	roots do: [:aRoot| self assert: aRoot doesNotInclude: aBankAssetToStore].! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:31:34' prior: 50882017!
assertIsValidToStore: aBankAssetToStore

	roots allSatisfy: [:aRoot| self assert: aRoot doesNotInclude: aBankAssetToStore].! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:32:18' prior: 50882001!
assert: aRootPortfolio doesNotInclude:aBankAssetToStore
	
	(aRootPortfolio includesAsset: aBankAssetToStore)
		ifTrue: 		[self error: self class cantAddDuplicatedBankAssets].
	^true.! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:32:26'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:32:26'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:34:10' prior: 50882024!
assertIsValidToStore: aBankAssetToStore

	roots do: [:aRoot| self assert: aRoot doesNotInclude: aBankAssetToStore]! !
!Portfolio methodsFor: 'assertions' stamp: 'LB 10/18/2021 11:34:15' prior: 50882031!
assert: aRootPortfolio doesNotInclude:aBankAssetToStore
	
	(aRootPortfolio includesAsset: aBankAssetToStore)
		ifTrue: 		[self error: self class cantAddDuplicatedBankAssets].! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:34:18'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:34:18'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:38:25' prior: 50879256!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	bankAssets do:[:aBankAsset| 
		currentTransactions addAll: aBankAsset transactions
		].
	
	^currentTransactions! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:38:26'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:38:26'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:40:13' prior: 50882192!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	"bankAssets do:[:aBankAsset| currentTransactions addAll: aBankAsset transactions]."
	^bankAssets inject: currentTransactions into:[:current :aBankAsset| current addAll: aBankAsset transactions].
	
	"^currentTransactions"! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:40:14'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:40:14'!
FAILURE!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:40:14'!
FAILURE!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:40:14'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:40:14'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:40:44' prior: 50882270!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	"bankAssets do:[:aBankAsset| currentTransactions addAll: aBankAsset transactions]."
	bankAssets inject: currentTransactions into:[:current :aBankAsset| current addAll: aBankAsset transactions].
	
	^currentTransactions! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:40:45'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:40:45'!
FAILURE!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:40:45'!
FAILURE!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:40:45'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:40:45'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:42:40' prior: 50882351!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	"bankAssets do:[:aBankAsset| currentTransactions addAll: aBankAsset transactions]."
	^bankAssets inject: OrderedCollection new into:[:current :aBankAsset| current addAll: aBankAsset transactions].
	
	"^currentTransactions"! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:42:44'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:42:44'!
FAILURE!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:42:44'!
FAILURE!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:42:44'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:42:49'!
FAILURE!

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:43:05'!
FAILURE!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:43:05'!
FAILURE!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:43:05'!
FAILURE!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:43:05'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:43:07'!
FAILURE!

portfolio transactions!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:43:36'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:46:41' prior: 50882432!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	"bankAssets do:[:aBankAsset| currentTransactions addAll: aBankAsset transactions]."
	bankAssets inject: OrderedCollection new into:[:current :aBankAsset| currentTransactions addAll: aBankAsset transactions].
	
	^currentTransactions! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:46:41'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:46:41'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:46:46' prior: 50882589!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	"bankAssets do:[:aBankAsset| currentTransactions addAll: aBankAsset transactions]."
	bankAssets inject: OrderedCollection new into:[:current :aBankAsset| current addAll: aBankAsset transactions].
	
	^currentTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:48:49' prior: 50882670!
transactions
	| currentTransactions |
	
	currentTransactions := OrderedCollection new.

	"bankAssets do:[:aBankAsset| currentTransactions addAll: aBankAsset transactions]."
	^bankAssets inject: OrderedCollection new into:[:current :aBankAsset| current,aBankAsset transactions].
	
	"^currentTransactions"! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:48:52'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:48:52'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'LB 10/18/2021 11:49:14' prior: 50882683!
transactions
	
	^bankAssets inject: OrderedCollection new into:[:current :aBankAsset| current, aBankAsset transactions].
! !

!testRun: #PortfolioTests #test01ANewPortfolioBalanceIsZero stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test19 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test20 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test21 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test22 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test23 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test24 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test25 stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test26AddPortfolioToRootPortfolioUpdatesRootsToRootPortfolio stamp: 'LB 10/18/2021 11:49:36'!
PASSED!

!testRun: #PortfolioTests #test27AddSecondRootToChildPortfolioUpdatesRootsToMany stamp: 'LB 10/18/2021 11:49:36'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'LB 10/18/2021 11:51:11' prior: 50880746!
add: aBankAsset 

	self assertIsValidToStore: aBankAsset.
	self safeAdd: aBankAsset.! !
!BankAsset methodsFor: 'no messages' stamp: 'LB 10/18/2021 11:51:52'!
balance
	
	self subclassResponsibility.! !
!BankAsset methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:52:09'!
hasRegistered: aTransaction
	
	self subclassResponsibility.! !
!BankAsset methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:52:33'!
includesAsset: aBankAsset
	
	self subclassResponsibility.! !
!BankAsset methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:52:48'!
transactions
	
	self subclassResponsibility.! !
!BankAsset methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 11:53:02'!
updateRoots: aSetOfNewRoots
	
	self subclassResponsibility.! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 12:55:02'!
test02APorfolioWithAnAccountBalanceIsEqualToAccountBalance
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !

!methodRemoval: PortfolioTests #test02 stamp: 'LB 10/18/2021 12:55:03'!
test02
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 12:55:50'!
test03APorfolioWithIsEqualToAccountBalance
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !

!methodRemoval: PortfolioTests #test03 stamp: 'LB 10/18/2021 12:55:50'!
test03
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 12:56:51'!
test02APortfolioWithAnAccountBalanceIsEqualToAccountBalance
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !

!methodRemoval: PortfolioTests #test02APorfolioWithAnAccountBalanceIsEqualToAccountBalance stamp: 'LB 10/18/2021 12:56:51'!
test02APorfolioWithAnAccountBalanceIsEqualToAccountBalance
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 12:57:06'!
test02APortfolioWithAccountBalanceIsEqualToAccountBalance
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
! !

!methodRemoval: PortfolioTests #test02APortfolioWithAnAccountBalanceIsEqualToAccountBalance stamp: 'LB 10/18/2021 12:57:06'!
test02APortfolioWithAnAccountBalanceIsEqualToAccountBalance
	| portfolio balance account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 12:57:44'!
test03ANewPorfolioWithOtherNewPortfolioBalanceIsZero
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
! !

!methodRemoval: PortfolioTests #test03APorfolioWithIsEqualToAccountBalance stamp: 'LB 10/18/2021 12:57:44'!
test03APorfolioWithIsEqualToAccountBalance
	| portfolio portfolioAAgregar balance |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 0 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 12:59:56'!
test04APortfolioWithMoreThanOneAccountsBalanceIsEqualToSumOfAccountBalance
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
! !

!methodRemoval: PortfolioTests #test04 stamp: 'LB 10/18/2021 12:59:56'!
test04
	| portfolio balance account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	balance := portfolio balance.
	
	self assert: 150 equals: balance.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:00:59'!
test05APortfolioWithAPortfolioWithAnAccountBalanceIsAccountBalance
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar add: account1.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.! !

!methodRemoval: PortfolioTests #test05 stamp: 'LB 10/18/2021 13:00:59'!
test05
	| portfolio portfolioAAgregar balance account1 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	portfolioAAgregar add: account1.
	
	portfolio add: portfolioAAgregar.
	
	balance := portfolio balance.
	
	self assert: 100 equals: balance.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:01:48'!
ANewPortfolioTransactionsIsEmpty
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !

!methodRemoval: PortfolioTests #test06 stamp: 'LB 10/18/2021 13:01:48'!
test06
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:01:55'!
test06ANewPortfolioTransactionsIsEmpty
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !

!methodRemoval: PortfolioTests #ANewPortfolioTransactionsIsEmpty stamp: 'LB 10/18/2021 13:01:55'!
ANewPortfolioTransactionsIsEmpty
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:02:43'!
test07APortfolioWithAnAccountTransactionsIsEqualToAccountTransactions
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: account transactions equals: portfolio transactions.
! !

!methodRemoval: PortfolioTests #test07 stamp: 'LB 10/18/2021 13:02:43'!
test07
	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: account transactions equals: portfolio transactions.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:03:43'!
test08APortfolioWithAPortfolioWithAnAccountTransactionsIsEqualToAccountTransactions
	| portfolio portfolioAAgregar account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.! !

!methodRemoval: PortfolioTests #test08 stamp: 'LB 10/18/2021 13:03:43'!
test08
	| portfolio portfolioAAgregar account |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: account transactions equals: portfolio transactions.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:04:52'!
test09APortfolioWithAPortfolioWithMoreThanOneAccountsTransactionsIsEqualToTransactionsOfAllAccounts
	| portfolio portfolioAAgregar account1 account2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioAAgregar add: account1.	
	portfolio add: account2.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (account2 transactions, account1 transactions) equals: portfolio transactions.! !

!methodRemoval: PortfolioTests #test09 stamp: 'LB 10/18/2021 13:04:52'!
test09
	| portfolio portfolioAAgregar account1 account2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioAAgregar add: account1.	
	portfolio add: account2.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (account2 transactions, account1 transactions) equals: portfolio transactions.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:05:36'!
test10APortfolioWithMoreThanOneAccountTransactionsIsEqualToTransactionsOfAllAccounts
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.
! !

!methodRemoval: PortfolioTests #test10 stamp: 'LB 10/18/2021 13:05:36'!
test10
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:07:40'!
test11APortfolioWithMoreThanOnePortfoliosWhereEachOneHasAnAccountTransactionsIsEqualToTransactionsOfAllAccounts
	| portfolio portfolioToAdd1 portfolioToAdd2 account1 account2 |
	
	portfolio := Portfolio new.
	portfolioToAdd1 := Portfolio new.
	portfolioToAdd2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolioToAdd1 add: account1.	
	portfolioToAdd2 add: account2.	
	
	portfolio add: portfolioToAdd1.
	portfolio add: portfolioToAdd2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.! !

!methodRemoval: PortfolioTests #test11 stamp: 'LB 10/18/2021 13:07:40'!
test11
	| portfolio portfolioToAdd1 portfolioToAdd2 account1 account2 |
	
	portfolio := Portfolio new.
	portfolioToAdd1 := Portfolio new.
	portfolioToAdd2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolioToAdd1 add: account1.	
	portfolioToAdd2 add: account2.	
	
	portfolio add: portfolioToAdd1.
	portfolio add: portfolioToAdd2.
	
	self assert: (account1 transactions, account2 transactions) equals: portfolio transactions.!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'LB 10/18/2021 13:08:25'!
test12APortfolioWithAnAccountWithATransactionHasRegisteredTheTransaction
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test12 stamp: 'LB 10/18/2021 13:08:25'!
test12
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:10:00'!
test13APortfolioWithAnAccountWithATransactionHasRegisteredTheTransaction
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test13 stamp: 'LB 10/18/2021 13:10:00'!
test13
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:10:20'!
test12APortfolioWithoutAnAccountWithATransactionHasNotRegisteredTheTransaction
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test12APortfolioWithAnAccountWithATransactionHasRegisteredTheTransaction stamp: 'LB 10/18/2021 13:10:20'!
test12APortfolioWithAnAccountWithATransactionHasRegisteredTheTransaction
	| portfolio aTransaction account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aTransaction := (account transactions) first.
	
	self deny: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:11:34'!
test14APortfolioWithoutMoreThanOneAccountWhereEachOneHasAtransactionHasNotRegisteredAnyTransaction
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio add: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTests #test14 stamp: 'LB 10/18/2021 13:11:34'!
test14
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio add: account1.
	
	self deny: (portfolio hasRegistered: aTransaction2).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:12:14'!
test15APortfolioWithAnAccountWithATransactionHasRegisteredTheTransation
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test15 stamp: 'LB 10/18/2021 13:12:14'!
test15
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:12:18'!
test15APortfolioWithAnAccountWithATransactionHasRegisteredTheTransaction
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTests #test15APortfolioWithAnAccountWithATransactionHasRegisteredTheTransation stamp: 'LB 10/18/2021 13:12:18'!
test15APortfolioWithAnAccountWithATransactionHasRegisteredTheTransation
	| portfolio portfolioAAgregar account aTransaction |
	
	portfolio := Portfolio new.
	portfolioAAgregar := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aTransaction := (account transactions) first.
	
	portfolioAAgregar add: account.
	
	portfolio add: portfolioAAgregar.
	
	self assert: (portfolio hasRegistered: aTransaction).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:12:54'!
test16APortfolioWithMoreThanOneAccountWhereEachOneHasATransactionHasRegisteredTheLastAddedAccountTransaction
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTests #test16 stamp: 'LB 10/18/2021 13:12:54'!
test16
	| portfolio aTransaction1 account1 aTransaction2 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	aTransaction1 := (account1 transactions) first.
	aTransaction2 := (account2 transactions) first.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio hasRegistered: aTransaction2).!
!PortfolioTests methodsFor: 'tests - has registered' stamp: 'LB 10/18/2021 13:14:01'!
test17APortfolioWithMoreThanOnPortfolioWhereEachOneHasAnAccountWhereEachOneHasATransactionHasRegisteredTheLastTransaction
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 add: account2.
	
	portfolio add: portfolioAAgregar1.
	portfolio add: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTests #test17 stamp: 'LB 10/18/2021 13:14:01'!
test17
	| portfolio portfolioAAgregar1 portfolioAAgregar2 account1 account2 aTransaction1 aTransaction2 |
	
	portfolio := Portfolio new.
	portfolioAAgregar1 := Portfolio new.
	portfolioAAgregar2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	aTransaction1 := (account1 transactions) first.
	portfolioAAgregar1 add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	aTransaction2 := (account2 transactions) first.
	portfolioAAgregar2 add: account2.
	
	portfolio add: portfolioAAgregar1.
	portfolio add: portfolioAAgregar2.
	
	self assert: (portfolio hasRegistered: aTransaction2).!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:15:13'!
test18APortfolioCanNotHasAnDuplicatedAccount
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test18 stamp: 'LB 10/18/2021 13:15:13'!
test18
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:15:20'!
test18APortfolioCanNotHasAnDuplicatedAsset
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test18APortfolioCanNotHasAnDuplicatedAccount stamp: 'LB 10/18/2021 13:15:20'!
test18APortfolioCanNotHasAnDuplicatedAccount
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:15:56'!
test18APortfolioCanNotHasHisUniqueAssetDuplicated
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test18APortfolioCanNotHasAnDuplicatedAsset stamp: 'LB 10/18/2021 13:15:56'!
test18APortfolioCanNotHasAnDuplicatedAsset
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:16:17'!
test18APortfolioCanNotHaveHisUniqueAssetDuplicated
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test18APortfolioCanNotHasHisUniqueAssetDuplicated stamp: 'LB 10/18/2021 13:16:17'!
test18APortfolioCanNotHasHisUniqueAssetDuplicated
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:16:48'!
test19APortfolioCanNotHaveAnyOfHisChildAssetsDuplicated
	| portfolio account1 account2 |
	
	"	 |p|
		/ \ \
	 |a1| |a2|   "
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test19 stamp: 'LB 10/18/2021 13:16:48'!
test19
	| portfolio account1 account2 |
	
	"	 |p|
		/ \ \
	 |a1| |a2|   "
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self should: [portfolio add: account2.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:16:55'!
test18APortfolioCanNotHaveHisUniqueChildAssetDuplicated
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test18APortfolioCanNotHaveHisUniqueAssetDuplicated stamp: 'LB 10/18/2021 13:16:55'!
test18APortfolioCanNotHaveHisUniqueAssetDuplicated
	| portfolio account |
	
	"	|p|
		/ \
		|a|    "
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self should: [portfolio add: account.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:17:25'!
test20APortfolioCanNotHaveItselfAsChildAsset
	| portfolio |
	
	"	|p|
		 |
		|p|    "
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test20 stamp: 'LB 10/18/2021 13:17:25'!
test20
	| portfolio |
	
	"	|p|
		 |
		|p|    "
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio add: portfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:18:38' prior: 50879541!
test21
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:19:15'!
test21APortfolioCanThaveALoopWithHisChild
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test21 stamp: 'LB 10/18/2021 13:19:15'!
test21
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:19:40'!
test22APortfolioCanThaveALoopWithAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test22 stamp: 'LB 10/18/2021 13:19:40'!
test22
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:19:47'!
test22APortfolioCanNotThaveALoopWithAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test22APortfolioCanThaveALoopWithAnyOfHisDescendents stamp: 'LB 10/18/2021 13:19:47'!
test22APortfolioCanThaveALoopWithAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:19:51'!
test21APortfolioCanNotThaveALoopWithHisChild
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test21APortfolioCanThaveALoopWithHisChild stamp: 'LB 10/18/2021 13:19:51'!
test21APortfolioCanThaveALoopWithHisChild
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:19:56'!
test21APortfolioCanNothaveALoopWithHisChild
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test21APortfolioCanNotThaveALoopWithHisChild stamp: 'LB 10/18/2021 13:19:56'!
test21APortfolioCanNotThaveALoopWithHisChild
	| rootPortfolio childPortfolio |
	
	"	|rP|
	     | ^
		 v |
		 |cP|    "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:20:07'!
test22APortfolioCanNothaveALoopWithAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test22APortfolioCanNotThaveALoopWithAnyOfHisDescendents stamp: 'LB 10/18/2021 13:20:07'!
test22APortfolioCanNotThaveALoopWithAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!

----SNAPSHOT----(18 October 2021 13:20:28) CuisUniversity-4532.image priorSource: 17547791!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:20:52'!
test23APortfolioCantNotBeChildOfHisDescendent
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test23 stamp: 'LB 10/18/2021 13:20:52'!
test23
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:21:16'!
test23APortfolioCantNotBeChildOfAnyOfHisDescendent
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test23APortfolioCantNotBeChildOfHisDescendent stamp: 'LB 10/18/2021 13:21:16'!
test23APortfolioCantNotBeChildOfHisDescendent
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:21:20'!
test23APortfolioCantNotBeChildOfAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test23APortfolioCantNotBeChildOfAnyOfHisDescendent stamp: 'LB 10/18/2021 13:21:20'!
test23APortfolioCantNotBeChildOfAnyOfHisDescendent
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|<
		 |   \
		|mP| |   
		 |   / 
		|cP|	/	"
		
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [childPortfolio add: rootPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:21:52'!
test22APortfolioCanNotBeFatherOfAnyOfHisDescendentsAppartFromHisChilds
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test22APortfolioCanNothaveALoopWithAnyOfHisDescendents stamp: 'LB 10/18/2021 13:21:52'!
test22APortfolioCanNothaveALoopWithAnyOfHisDescendents
	| rootPortfolio childPortfolio middlePortfolio |
	
	"	|rP|_
		 |   \
		|mP| |   
		 |   / 
		|cP|<   	"
	
	rootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	middlePortfolio add: childPortfolio.
	rootPortfolio add: middlePortfolio.
	
	self should: [rootPortfolio add: childPortfolio.] raise: Error withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:22:39'!
test24APortfolioCanNotHaveAChildAsHisGrandchild
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  \
	 |cP|--|aP| "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio add: anotherChildPortfolio]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test24 stamp: 'LB 10/18/2021 13:22:39'!
test24
	| rootPortfolio childPortfolio anotherChildPortfolio |
	
	"	|rP|
		/  \
	 |cP|--|aP| "
	
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	rootPortfolio add: anotherChildPortfolio.
	
	self
		should: [	childPortfolio add: anotherChildPortfolio]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:23:30'!
test25ManyRootsPortfoliosCanNotHaveADuplicatedAccountInHisHierarchy
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test25 stamp: 'LB 10/18/2021 13:23:30'!
test25
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.!
!PortfolioTests methodsFor: 'tests - roots' stamp: 'LB 10/18/2021 13:23:39'!
test25ManyRootsPortfoliosCanNotHaveADuplicatedAccountInTheirHierarchy
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.! !

!methodRemoval: PortfolioTests #test25ManyRootsPortfoliosCanNotHaveADuplicatedAccountInHisHierarchy stamp: 'LB 10/18/2021 13:23:39'!
test25ManyRootsPortfoliosCanNotHaveADuplicatedAccountInHisHierarchy
	| leftRootPortfolio rightRootPortfolio middlePortfolio account|
	"  |lP|  |rP|
	  	 \   /  \
	  	 |mP|   |a|
		  |
	  	 |a| 
	"
	leftRootPortfolio := Portfolio new.
	middlePortfolio := Portfolio new.
	rightRootPortfolio := Portfolio new.
	account  := ReceptiveAccount  new.
	
	rightRootPortfolio add: middlePortfolio.
	leftRootPortfolio add: middlePortfolio.

	rightRootPortfolio add: account.
	
	self
		should: [	middlePortfolio add: account]
		raise: Error
		withMessageText: Portfolio cantAddDuplicatedBankAssets.!

----SNAPSHOT----(18 October 2021 13:23:44) CuisUniversity-4532.image priorSource: 17670968!

----QUIT----(18 October 2021 13:24:55) CuisUniversity-4532.image priorSource: 17679231!