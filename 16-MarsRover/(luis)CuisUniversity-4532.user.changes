

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (19 August 2021 20:18:32) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


ObjectBuilder create: #Antonio
	collaboratorNames: ''
	in: 'ejercicio1'
	!

!classDefinition: #Antonio category: 'ejercicio1' stamp: 'Luis 8/19/2021 20:27:19'!
DenotativeObject subclass: #Antonio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio1'!

!classDefinition: 'Antonio class' category: 'ejercicio1' stamp: 'Luis 8/19/2021 20:27:19'!
Antonio class
	instanceVariableNames: ''!

hola!

hola!

Antonio hola!
!Antonio class methodsFor: 'nil' stamp: 'Luis 8/19/2021 20:32:33'!
messageSelectorAndArgumentNames
	"Antonio debe responder chau"

	
	^'chau'.! !
!Antonio class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 20:32:44'!
hola
	"Antonio debe responder chau"

	
	^'chau'.! !

!methodRemoval: Antonio class #messageSelectorAndArgumentNames stamp: 'Luis 8/19/2021 20:32:54'!
messageSelectorAndArgumentNames
	"Antonio debe responder chau"

	
	^'chau'.!

Antonio hola.!

Antonio hola.!

 'chau' !

Antonio hola.!

Antonio hola.!

ObjectBuilder create: #Bill
	collaboratorNames: ''
	in: 'ejercicio2'
	!

!classDefinition: #Bill category: 'ejercicio2' stamp: 'Luis 8/19/2021 20:52:49'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio2'!

!classDefinition: 'Bill class' category: 'ejercicio2' stamp: 'Luis 8/19/2021 20:52:49'!
Bill class
	instanceVariableNames: ''!
!Bill class methodsFor: 'nil' stamp: 'Luis 8/19/2021 20:57:29'!
comer: unaCantidadDeKilosDeCerebro
	"comment stating purpose of message"

	| temporary variable names |
	^unaCantidadDeKilosDeCerebro ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 20:57:42' prior: 50859381!
comer: unaCantidadDeKilosDeCerebro
	"comment stating purpose of message"

	
	^unaCantidadDeKilosDeCerebro ! !

Bill comer:30!

Bill comer:30!

Bill
	collaboratorNames: 'diasDeVida'
	in: 'ejercicio2'!

!classDefinition: #Bill category: 'ejercicio2' stamp: 'Luis 8/19/2021 21:01:40'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio2'!

!classDefinition: 'Bill class' category: 'ejercicio2' stamp: 'Luis 8/19/2021 21:01:40'!
Bill class
	instanceVariableNames: 'diasDeVida'!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:04:35'!
energia
	"comment stating purpose of message"

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:04:53' prior: 50859389!
comer: unaCantidadDeKilosDeCerebro
	"adquiere 4 días de vida por cada kilo de cerebro que come. No olvidar considerar que Bill nace con una cierta cantidad de energía (28 días de vida)"

	
	^unaCantidadDeKilosDeCerebro ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:06:03' prior: 50859409!
energia
	"este último es respondido con la cantidad de días de vida que tiene Bill"
	
	^28

	
	 ! !

Bill energia !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:07:10' prior: 50859414!
comer: unaCantidadDeKilosDeCerebro
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^28

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:07:33' prior: 50859431!
comer: unaCantidadDeKilosDeCerebro
	"adquiere 4 días de vida por cada kilo de cerebro que come. No olvidar considerar que Bill nace con una cierta cantidad de energía (28 días de vida)"
	
	^28

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:08:01'!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^28

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:08:57' prior: 50859449!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^self energia -3 -unaCantidadDeKilometros 

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:09:20' prior: 50859458!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^self energia - 3 - unaCantidadDeKilometros 

	
	 ! !

Bill caminar:4!

Bill caminar:4!

Bill caminar:5!

!classDefinition: 'Bill class' category: 'ejercicio2' stamp: 'Luis 8/19/2021 21:11:22'!
Bill class
	instanceVariableNames: 'diasDeVida energia'!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:11:15' prior: 50859468!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^ energia := self energia - 3 - unaCantidadDeKilometros 

	
	 ! !

Bill
	collaboratorNames: 'energia'
	in: 'ejercicio2'!

!classDefinition: #Bill category: 'ejercicio2' stamp: 'Luis 8/19/2021 21:11:34'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio2'!

!classDefinition: 'Bill class' category: 'ejercicio2' stamp: 'Luis 8/19/2021 21:11:34'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:12:39' prior: 50859484!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^ energia := energia - 3 - unaCantidadDeKilometros 

	
	 ! !

Bill caminar:5!

Bill energia!

Bill caminar:5!

 20 !

Bill caminar:5.!

self caminar: 1.!

energia:= 28!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:15:27' prior: 50859507!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	energia := energia - 3 - unaCantidadDeKilometros 

	
	 ! !

Bill caminar:5.!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:17:42' prior: 50859520!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^energia := energia - 3 - unaCantidadDeKilometros 

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:18:24' prior: 50859424!
energia
	"este último es respondido con la cantidad de días de vida que tiene Bill"
	
	^energia

	
	 ! !

Bill energia!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:21:30' prior: 50859440!
comer: unaCantidadDeKilosDeCerebro
	"adquiere 4 días de vida por cada kilo de cerebro que come. No olvidar considerar que Bill nace con una cierta cantidad de energía (28 días de vida)"
	
	^energia:=4*unaCantidadDeKilosDeCerebro 

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:22:05' prior: 50859548!
comer: unaCantidadDeKilosDeCerebro
	"adquiere 4 días de vida por cada kilo de cerebro que come. No olvidar considerar que Bill nace con una cierta cantidad de energía (28 días de vida)"
	
	^energia := energia + 4*unaCantidadDeKilosDeCerebro 

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:23:03' prior: 50859531!
caminar: unaCantidadDeKilometros
	"por cada kilómetro que realiza consume un día de vida más 3 días de costo fijo solo por emprender la caminata"
	
	^energia := energia - 3 - unaCantidadDeKilometros 

	
	 ! !

Bill comer:3!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:38:40' prior: 50859559!
comer: unaCantidadDeKilosDeCerebro
	"adquiere 4 días de vida por cada kilo de cerebro que come. No olvidar considerar que Bill nace con una cierta cantidad de energía (28 días de vida)"
	
	^energia := energia + (4*unaCantidadDeKilosDeCerebro)

	
	 ! !

Bill comer:3!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:39:14' prior: 50859580!
comer: unaCantidadDeKilosDeCerebro
	"adquiere 4 días de vida por cada kilo de cerebro que come. No olvidar considerar que Bill nace con una cierta cantidad de energía (28 días de vida)"
	
	^energia := energia + (4*unaCantidadDeKilosDeCerebro).

	
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/19/2021 21:50:35' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := 40.! !

!methodRemoval: Bill class #initializeCollaboratorsFromFile stamp: 'Luis 8/19/2021 21:50:35'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := 40.!

!classRemoval: #Bill stamp: 'Luis 8/19/2021 21:51:20'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio2'!

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/ejercicio2.st----!

----SNAPSHOT----(19 August 2021 21:51:50) CuisUniversity-4532.image priorSource: 16885703!

----QUIT----(19 August 2021 21:52:00) CuisUniversity-4532.image priorSource: 16897109!

----STARTUP---- (19 August 2021 21:52:07) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----QUIT----(19 August 2021 21:52:21) CuisUniversity-4532.image priorSource: 16897201!

----STARTUP---- (23 August 2021 20:07:31) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!

!Bill class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:08:25' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := 40.! !

!methodRemoval: Bill class #initializeCollaboratorsFromFile stamp: 'Luis 8/23/2021 20:08:25'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := 40.!

!classRemoval: #Antonio stamp: 'Luis 8/23/2021 20:10:48'!
DenotativeObject subclass: #Antonio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio1'!

!classRemoval: #Bill stamp: 'Luis 8/23/2021 20:10:56'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ejercicio2'!

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/ejercicio1.st----!

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/ejercicio2.st----!

ObjectBuilder create: #VerdaderoYFalso
	collaboratorNames: ''
	in: 'C02-Ejercicio-VyF'
	!

!classDefinition: #VerdaderoYFalso category: 'C02-Ejercicio-VyF' stamp: 'Luis 8/23/2021 20:16:07'!
DenotativeObject subclass: #VerdaderoYFalso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'C02-Ejercicio-VyF'!

!classDefinition: 'VerdaderoYFalso class' category: 'C02-Ejercicio-VyF' stamp: 'Luis 8/23/2021 20:16:07'!
VerdaderoYFalso class
	instanceVariableNames: ''!

!classRemoval: #VerdaderoYFalso stamp: 'Luis 8/23/2021 20:16:50'!
DenotativeObject subclass: #VerdaderoYFalso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'C02-Ejercicio-VyF'!

ObjectBuilder create: #VerdaderoYFalso
	collaboratorNames: ''
	in: 'EjerciciosVyFTests'
	!

!classDefinition: #VerdaderoYFalso category: 'EjerciciosVyFTests' stamp: 'Luis 8/23/2021 20:18:01'!
DenotativeObject subclass: #VerdaderoYFalso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjerciciosVyFTests'!

!classDefinition: 'VerdaderoYFalso class' category: 'EjerciciosVyFTests' stamp: 'Luis 8/23/2021 20:18:01'!
VerdaderoYFalso class
	instanceVariableNames: ''!

!classDefinition: #Falso category: 'EjerciciosVyFTests' stamp: 'Luis 8/23/2021 20:20:22'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjerciciosVyFTests'!

!classDefinition: #Verdadero category: 'EjerciciosVyFTests' stamp: 'Luis 8/23/2021 20:20:25'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjerciciosVyFTests'!
!VerdaderoYFalso class methodsFor: 'nil' stamp: 'Luis 8/23/2021 20:20:14'!
test01VerdaderoNoDevuelveFalso
	
	Assert that: Falso isEqualTo: Verdadero no.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:20:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:21:14'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:21:41'!
no
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:22:05' prior: 50859879!
no
	^Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:22:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:22:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:23:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:23:02'!
PASSED!
!VerdaderoYFalso class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:25:12'!
test02FalsoNoDevuelveVerdadero
	
	Assert that: Verdadero isEqualTo: Falso no.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:25:27'!
ERROR!
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:25:52'!
no
	self shouldBeImplemented.! !
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:26:12' prior: 50859907!
no
	^Verdadero.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:26:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:26:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:26:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:26:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:26:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:26:40'!
PASSED!
!VerdaderoYFalso class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:28:27' prior: 50859868!
test01VerdaderoNoDevuelveFalso
	
	Assert that: Falso isEqualTo: Verdadero no.! !

Falso no.!

Falso!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:29:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:29:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:29:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:45'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:45'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:45'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:51'!
PASSED!
!VerdaderoYFalso class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:31:57' prior: 50859899!
test02FalsoNoDevuelveVerdadero
	
	Assert that: Verdadero isEqualTo: Falso no.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:31:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:32:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:32:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:32:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:32:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:32:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:32:42'!
PASSED!

VerdaderoYFalso test02FalsoNoDevuelveVerdadero!

!classRenamed: #VerdaderoYFalso as: #VerdaderoYFalsoTests stamp: 'Luis 8/23/2021 20:33:17'!
Smalltalk renameClassNamed: #VerdaderoYFalso as: #VerdaderoYFalsoTests!

VerdaderoYFalsoTests test02FalsoNoDevuelveVerdadero !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:37:33'!
test03VerdaderoYVerdaderoEsVerdadero
	
	Assert that: Verdadero isEqualTo: Falso no.! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:37:48' prior: 50860020!
test03VerdaderoYVerdaderoEsVerdadero
	
	Assert that: Verdadero y Verdadero isEqualTo: Verdadero no.! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:38:38' prior: 50860027!
test03VerdaderoYVerdaderoEsVerdadero
	
	Assert that: (Verdadero y: Verdadero) isEqualTo: Verdadero no.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:38:51'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:39:04'!
y: aVerdadero 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:40:19' prior: 50860043!
y: unBooleano 
	^self isEqualTo: unBooleano ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:43:10'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:43:53' prior: 50860048!
y: unBooleano 
	^self isEqualTo: unBooleano.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:44:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:44:33'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:45:00' prior: 50860034!
test03VerdaderoYVerdaderoEsVerdadero
	
	Assert that: (Verdadero y: Verdadero) isEqualTo: Verdadero.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:45:01'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:47:07' prior: 50860059!
y: unBooleano 
	^unBooleano.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:15'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:47:57'!
test04VerdaderoYFalsoEsFalso
	
	Assert that: (Verdadero y: Falso) isEqualTo: Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:47:59'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:48:17'!
test05FalsoYFalsoEsFalso
	
	Assert that: (Falso y: Falso) isEqualTo: Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:48:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:48:38'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:22'!
ERROR!
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:49:25'!
y: aFalso 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:49:38' prior: 50860134!
y: aBoolean
	^Falso! !
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:49:40' prior: 50860138!
y: aBoolean
	^Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:49:53'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:50:09'!
test05FalsoYVerdaderoEsFalso
	
	Assert that: (Falso y: Verdadero) isEqualTo: Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:12'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:50:40'!
test06VerdaderoOVerdaderoEsVerdadero
	
	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero..! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:50:51' prior: 50860191!
test06VerdaderoOVerdaderoEsVerdadero
	
	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:50:51'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:50:54'!
o: aVerdadero 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:51:12' prior: 50860207!
o: unBooleano 
	^self.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:51:19'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:51:34'!
test06VerdaderoOFalsoEsVerdadero
	
	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero.! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:51:47'!
test07VerdaderoOVerdaderoEsVerdadero
	
	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero.! !

!methodRemoval: VerdaderoYFalsoTests class #test06VerdaderoOVerdaderoEsVerdadero stamp: 'Luis 8/23/2021 20:51:47'!
test06VerdaderoOVerdaderoEsVerdadero
	
	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero.!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:52:25'!
test08FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:27'!
ERROR!
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:52:30'!
o: aFalso 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:52:53' prior: 50860291!
o: unBooleano
	^unBooleano.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:52:55'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:53:29'!
test06FalsoYVerdaderoEsFalso
	
	Assert that: (Falso y: Verdadero) isEqualTo: Falso.! !

!methodRemoval: VerdaderoYFalsoTests class #test05FalsoYVerdaderoEsFalso stamp: 'Luis 8/23/2021 20:53:29'!
test05FalsoYVerdaderoEsFalso
	
	Assert that: (Falso y: Verdadero) isEqualTo: Falso.!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:53:42'!
test08VerdaderoOFalsoEsVerdadero
	
	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero.! !

!methodRemoval: VerdaderoYFalsoTests class #test06VerdaderoOFalsoEsVerdadero stamp: 'Luis 8/23/2021 20:53:42'!
test06VerdaderoOFalsoEsVerdadero
	
	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero.!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:53:48'!
test09FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Falso.! !

!methodRemoval: VerdaderoYFalsoTests class #test08FalsoOFalsoEsFalso stamp: 'Luis 8/23/2021 20:53:48'!
test08FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Falso.!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:12'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 20:54:34'!
test10FalsoOVerdaderoEsFalso
	
	Assert that: (Falso o: Verdadero) isEqualTo: Verdadero.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:54:35'!
PASSED!
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 20:56:05' prior: 50860142!
y: unBoolean
	^Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 20:56:18'!
PASSED!

(Falso o: Verdadero) isEqualTo: Verdadero.!

(Falso o: Verdadero) == Verdadero. true !

(Falso o: Verdadero) == Verdadero.!

(Falso o: Verdadero)  y: Falso!

----QUIT----(23 August 2021 21:01:33) CuisUniversity-4532.image priorSource: 16897407!

----STARTUP---- (23 August 2021 21:01:37) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----QUIT----(23 August 2021 21:02:04) CuisUniversity-4532.image priorSource: 16922518!

----STARTUP---- (23 August 2021 21:02:09) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----QUIT----(23 August 2021 21:02:43) CuisUniversity-4532.image priorSource: 16922724!

----STARTUP---- (23 August 2021 21:02:48) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:21'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:03:39' prior: 50860354!
test09FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Verdadero.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:03:40'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:04:11' prior: 50860533!
test09FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Falso.! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:07:01' prior: 50860543!
test09FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Verdadero.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:07:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:07:41'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:00'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:09:07' prior: 50860549!
test09FalsoOFalsoEsFalso
	
	Assert that: (Falso o: Falso) isEqualTo: Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:09:08'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:19:28'!
test11VerdaderoSiVerdaderoHaceAlgo
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: Verdadero.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:34'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:19:38'!
siVerdadero: aBlockClosure 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:19:56' prior: 50860616!
siVerdadero: aBlockClosure 
	aBlockClosure .! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:19:58' prior: 50860621!
siVerdadero: aBlockClosure 
	aBlockClosure.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:19:59'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:21:09'!
test11VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:21:10'!
ERROR!

[^'hola'] value.!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:23:23' prior: 50860626!
siVerdadero: aBlockClosure 
	aBlockClosure value.! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:23:52'!
test11VerdaderoSiVerdaderoEjecutaAlgo
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: Verdadero.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:23:53'!
PASSED!

!methodRemoval: VerdaderoYFalsoTests class #test11VerdaderoSiVerdaderoEjecutaAlgo stamp: 'Luis 8/23/2021 21:24:38'!
test11VerdaderoSiVerdaderoEjecutaAlgo
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: Verdadero.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!

!methodRemoval: VerdaderoYFalsoTests class #test11VerdaderoSiVerdaderoHaceAlgo stamp: 'Luis 8/23/2021 21:24:45'!
test11VerdaderoSiVerdaderoHaceAlgo
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: Verdadero.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:24:47'!
PASSED!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:25:06' prior: 50860681!
siVerdadero: aClosure 
	aClosure value.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:25:58'!
siFalso: aClosure 
	! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:26:24'!
test11VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: ''.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:26:25'!
PASSED!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:26:50' prior: 50860800!
siFalso: aClosure 
	''! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:27'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:27:40' prior: 50860804!
test11VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isEqualTo: ''.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:27:41'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:29:45' prior: 50860897!
test11VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:29:53' prior: 50860853!
siFalso: aClosure 
	nil! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:29:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:30:06'!
PASSED!

VerdaderoYFalsoTests Verdadero siFalso:[^'hola']!
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:32:05'!
siFalso: aClosure 
	aClosure value.! !
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:32:13'!
siVerdadero: aClosure 
	nil! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:32:30'!
test12VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!methodRemoval: VerdaderoYFalsoTests class #test11VerdaderoSiVerdaderoEjecutaElClosure stamp: 'Luis 8/23/2021 21:32:30'!
test11VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:32:40'!
test11VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!methodRemoval: VerdaderoYFalsoTests class #test12VerdaderoSiVerdaderoEjecutaElClosure stamp: 'Luis 8/23/2021 21:32:40'!
test12VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:32:45'!
test12VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!methodRemoval: VerdaderoYFalsoTests class #test11VerdaderoSiFalsoNoEjecutaNada stamp: 'Luis 8/23/2021 21:32:45'!
test11VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:33:00'!
test12FalsoSiFalsoNoEjecutaNada
	
	Assert that: (Falso siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:01'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:33:23'!
test12FalsoSiVerdaderoNoEjecutaNada
	
	Assert that: (Falso siVerdadero:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:33:33' prior: 50861059!
test12VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:34'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:33:50' prior: 50861143!
test12VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:33:52'!
PASSED!

!methodRemoval: VerdaderoYFalsoTests class #test12VerdaderoSiFalsoNoEjecutaNada stamp: 'Luis 8/23/2021 21:34:25'!
test12VerdaderoSiFalsoNoEjecutaNada
	
	Assert that: (Verdadero siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:34:42'!
test13FalsoSiVerdaderoNoEjecutaNada
	
	Assert that: (Falso siVerdadero:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!methodRemoval: VerdaderoYFalsoTests class #test12FalsoSiVerdaderoNoEjecutaNada stamp: 'Luis 8/23/2021 21:34:42'!
test12FalsoSiVerdaderoNoEjecutaNada
	
	Assert that: (Falso siVerdadero:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:35:37'!
test14FalsoSiFalsoEjecutaAlgo
	
	Assert that: (Falso siFalso:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:35:38'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:36:19' prior: 50861223!
test13FalsoSiVerdaderoNoEjecutaNada
	
	Assert that: (Falso siVerdadero:[^'Hola']) isEqualTo: nil.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:36:20'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:36:37' prior: 50861300!
test13FalsoSiVerdaderoNoEjecutaNada
	
	Assert that: (Falso siVerdadero:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:52:11' prior: 50860796!
siVerdadero: aClosure 
	^aClosure value.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:52:16'!
PASSED!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:52:59' prior: 50861324!
siVerdadero: aClosure 
	aClosure value.! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:53:57' prior: 50861037!
test11VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Holsa'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:53:57'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:54:00' prior: 50861382!
test11VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:54:43'!
test15
	
	|evalue|
	
	evalue:=#no.
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:56:15' prior: 50861449!
test15
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #si.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:56:22'!
PASSED!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:57:01' prior: 50861377!
siVerdadero: aClosure 
	aClosure value.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:57:16'!
PASSED!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:57:36'!
test15VerdaderoSiVerdaderoEjecutaElClosure
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #si.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!methodRemoval: VerdaderoYFalsoTests class #test15VerdaderoSiVerdaderoEjecutaElClosure stamp: 'Luis 8/23/2021 21:57:40'!
test15VerdaderoSiVerdaderoEjecutaElClosure
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #si.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:57:57'!
test15VerdaderoSiVerdaderoEjecutaClosure
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #si.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!methodRemoval: VerdaderoYFalsoTests class #test15 stamp: 'Luis 8/23/2021 21:57:57'!
test15
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #si.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 21:58:21'!
test16FalsoSiVerdaderoNoEjecutaClosure
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #si.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:22'!
PASSED!
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:58:44' prior: 50861519!
siVerdadero: aClosure 
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 21:58:59'!
ERROR!
!Falso class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 21:59:41' prior: 50861011!
siVerdadero: aClosure 
	! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 22:00:08' prior: 50861684!
siVerdadero: aClosure 
	aClosure value.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'Luis 8/23/2021 22:00:13' prior: 50860921!
siFalso: aClosure 
	! !

!methodRemoval: VerdaderoYFalsoTests class #test11VerdaderoSiVerdaderoEjecutaElClosure stamp: 'Luis 8/23/2021 22:00:54'!
test11VerdaderoSiVerdaderoEjecutaElClosure
	
	Assert that: (Verdadero siVerdadero:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!

!methodRemoval: VerdaderoYFalsoTests class #test12FalsoSiFalsoNoEjecutaNada stamp: 'Luis 8/23/2021 22:00:59'!
test12FalsoSiFalsoNoEjecutaNada
	
	Assert that: (Falso siFalso:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!

!methodRemoval: VerdaderoYFalsoTests class #test13FalsoSiVerdaderoNoEjecutaNada stamp: 'Luis 8/23/2021 22:01:03'!
test13FalsoSiVerdaderoNoEjecutaNada
	
	Assert that: (Falso siVerdadero:[^'Hola']) isNotEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!

!methodRemoval: VerdaderoYFalsoTests class #test14FalsoSiFalsoEjecutaAlgo stamp: 'Luis 8/23/2021 22:01:08'!
test14FalsoSiFalsoEjecutaAlgo
	
	Assert that: (Falso siFalso:[^'Hola']) isEqualTo: 'Hola'.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 22:01:18' prior: 50861621!
test16FalsoSiVerdaderoNoEjecutaClosure
	
	|evalue|
	
	evalue:=#no.
	Verdadero siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #no.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:19'!
ERROR!
!VerdaderoYFalsoTests class methodsFor: 'as yet unclassified' stamp: 'Luis 8/23/2021 22:01:35' prior: 50861750!
test16FalsoSiVerdaderoNoEjecutaClosure
	
	|evalue|
	
	evalue:=#no.
	Falso siVerdadero: [evalue:=#si].
	Assert that: evalue isEqualTo: #no.
	
	"
	Verdadero siVerdadero: [^'rojo'] -> ejecute el bloque
	Falso siVerdadero: [^'rojo'] -> no ejecute el bloque
	"
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:01:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/23/2021 22:07:16'!
PASSED!

----QUIT----(23 August 2021 22:07:30) CuisUniversity-4532.image priorSource: 16922930!

----STARTUP---- (26 August 2021 17:32:45) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


10 gcd: 5!

 5 !

Falso edad.!

ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Números naturales'
	!

!classDefinition: #I category: 'Números naturales' stamp: 'Luis 8/26/2021 20:39:53'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'I class' category: 'Números naturales' stamp: 'Luis 8/26/2021 20:39:53'!
I class
	instanceVariableNames: ''!

!classDefinition: #II category: 'Números naturales' stamp: 'Luis 8/26/2021 20:43:04'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!
!I class methodsFor: 'nil' stamp: 'Luis 8/26/2021 20:42:57'!
next
	
	^II! !

I next !
!I class methodsFor: 'nil' stamp: 'Luis 8/26/2021 20:49:26' prior: 50861890!
next
	
	^self cloneNamed: self name, 'I'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 20:49:41' prior: 50861894!
next
	
	^self cloneNamed: self name, 'I'.! !
!II class methodsFor: 'nil' stamp: 'Luis 8/26/2021 20:50:16'!
next
	
	^self cloneNamed: self name, 'I'.! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: #III category: 'Números naturales' stamp: 'Luis 8/26/2021 20:50:49'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Números naturales' stamp: 'Luis 8/26/2021 20:50:49'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 20:50:49'!
next
	
	^self cloneNamed: self name, 'I'.! !

II!

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 20:54:26' prior: 50861903!
next
	|nameObject|
	name := self name, 'I'.
	nameObject := self cloneNamed: name.
	^ nameObject ! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 20:55:05' prior: 50861929!
next
	|nameObject nameI|
	nameI := self name, 'I'.
	nameObject := self cloneNamed: nameI.
	^ nameObject ! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 20:55:41' prior: 50861936!
next
	|nameObject nameI|
	nameI := self name, 'I'.
	nameObject := self cloneNamed: nameI.
	
	^ nameObject ! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 20:57:39' prior: 50861943!
next
	|nameObject newName|
	nameObject := self name, 'I'.
	newName := self cloneNamed: nameObject.
	
	^ newName ! !

!classDefinition: 'II class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:00:35'!
II class
	instanceVariableNames: 'next'!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:00:32' prior: 50861950!
next
	next := self cloneNamed: self name, 'I'
	 ! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:00:41' prior: 50861961!
next
	next := self cloneNamed: self name, 'I'.
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:01:44' prior: 50861966!
next
	
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:02:14' prior: 50861971!
next
	
	next ifNotNil: [^next].
	^next := self cloneNamed: self name, 'I'.
	! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:02:41' prior: 50861977!
next
	
	next ifNotNil: [^next].
	next := self cloneNamed: self name, 'I'.
	^next.! !

II next!

!classRemoval: #II stamp: 'Luis 8/26/2021 21:03:01'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'III class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:04:05'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:04:04' prior: 50861924!
next
	next ifNotNil: [^next].
	 
	next := self cloneNamed: self name, 'I'.
	^next.! !

!classRenamed: #III as: #II stamp: 'Luis 8/26/2021 21:04:10'!
Smalltalk renameClassNamed: #III as: #II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: #III category: 'Números naturales' stamp: 'Luis 8/26/2021 21:04:22'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:04:22'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:04:22'!
next
	next ifNotNil: [^next].
	 
	next := self cloneNamed: self name, 'I'.
	^next.! !

II next!

!classRemoval: #III stamp: 'Luis 8/26/2021 21:06:56'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:07:36' prior: 50862000!
next
	next ifNotNil: [^next].
	 
	next := self createChildNamed: self name, 'I'.
	^next.! !

II next.!

!classDefinition: #III category: 'Números naturales' stamp: 'Luis 8/26/2021 21:07:40'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'III class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:07:40'!
III class
	instanceVariableNames: ''!

II next.!

III next.!

!classDefinition: #IIII category: 'Números naturales' stamp: 'Luis 8/26/2021 21:08:02'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'IIII class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:08:02'!
IIII class
	instanceVariableNames: ''!

!classRemoval: #IIII stamp: 'Luis 8/26/2021 21:09:27'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classRemoval: #III stamp: 'Luis 8/26/2021 21:09:35'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:09:47' prior: 50862038!
next
	next ifNotNil: [^next].
	 
	next := II createChildNamed: self name, 'I'.
	^next.! !

II next.!

II next.!

!classDefinition: #III category: 'Números naturales' stamp: 'Luis 8/26/2021 21:10:12'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'III class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:10:12'!
III class
	instanceVariableNames: ''!

III next!

!classDefinition: #IIII category: 'Números naturales' stamp: 'Luis 8/26/2021 21:10:19'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'IIII class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:10:19'!
IIII class
	instanceVariableNames: ''!

II next next!

II next next next!

!classDefinition: #IIIII category: 'Números naturales' stamp: 'Luis 8/26/2021 21:10:29'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'IIIII class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:10:29'!
IIIII class
	instanceVariableNames: ''!
!I class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:13:59'!
+ aNaturalNumber

	^aNaturalNumber next.! !

I +I!

I + I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:18:46'!
+ aNaturalNumber

	^ self prev + aNaturalNumber next.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:21:44' prior: 50862123!
+ aNaturalNumber

	^ self prev + aNaturalNumber next.! !

I + I!

II + I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:23:51'!
prev
	self shouldBeImplemented.! !

!classDefinition: 'II class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:24:14'!
II class
	instanceVariableNames: 'next prev'!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:24:11' prior: 50862133!
prev
	^prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:29:37' prior: 50862078!
next
	next ifNotNil: [^next].
	 
	next := II createChildNamed: self name, 'I'.
	next prev: self.
	^next.! !

II + II!

II + II!

II + II!

II + II!

II + II!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:32:55'!
prev: anNaturalNumber
	^prev := anNaturalNumber.! !

II + II!

II + II.!

II + II.!

II + II.!

II + II.!

II + II.!

II + II.!

II + II.!

II + II.!

II + III.!

II + II.!

II + III!

I+II!

II+I.!

II+II.!

II+I!

I-III!

II-I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:40:15'!
- anI 
	self shouldBeImplemented.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:43:14' prior: 50862164!
- aNaturalNumber 
	
	^self prev - aNaturalNumber prev.! !

II-I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:44:27' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:44:27' overrides: 50862175!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := nil.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:44:27' overrides: 50862175!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := nil.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:44:27' overrides: 50862175!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := nil.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 21:44:27'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 21:44:27'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := nil.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 21:44:27'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := nil.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 21:44:27'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := nil.!

II prev!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:52:19' prior: 50862169!
- aNaturalNumber 
	
	aNaturalNumber = I ifTrue: [^self prev].
	^self prev - aNaturalNumber prev.! !

II-I.!

III-I!

III-II!

IIII-II!

III-I!

II!

III-I!

IIII-I!

!classRemoval: #III stamp: 'Luis 8/26/2021 21:54:55'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classRemoval: #IIII stamp: 'Luis 8/26/2021 21:55:00'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classRemoval: #IIIII stamp: 'Luis 8/26/2021 21:55:04'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

II+I!

I+II!

I+II!

!classDefinition: #III category: 'Números naturales' stamp: 'Luis 8/26/2021 21:55:34'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'III class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:55:34'!
III class
	instanceVariableNames: ''!

I+III!

!classDefinition: #IIII category: 'Números naturales' stamp: 'Luis 8/26/2021 21:55:43'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'IIII class' category: 'Números naturales' stamp: 'Luis 8/26/2021 21:55:43'!
IIII class
	instanceVariableNames: ''!

III-I!

IIII-I!

III-II!

IIII-II!

IIII-III!

II-I!

II+I!

III+I!

I next!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 22:02:25' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 22:02:25' overrides: 50862285!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 22:02:25' overrides: 50862285!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := III.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 22:02:25'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 22:02:25'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'Luis 8/26/2021 22:02:25'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := III.!

----QUIT----(26 August 2021 22:02:30) CuisUniversity-4532.image priorSource: 16966788!

----STARTUP---- (29 August 2021 21:22:36) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


II+II!

II+I!
!I class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:28:25' prior: 50861899!
next
	^II! !

I next!

I+II!

I+I!

III-I!

III-II!

IIII-II!

III!

II-III!

II+I!

III+I!

IIII+I!

!classDefinition: #IIIII category: 'Números naturales' stamp: 'Luis 8/29/2021 21:33:58'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Números naturales'!

!classDefinition: 'IIIII class' category: 'Números naturales' stamp: 'Luis 8/29/2021 21:33:58'!
IIIII class
	instanceVariableNames: ''!

IIII-I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:35:29' prior: 50862234!
- aNaturalNumber 
	
	(aNaturalNumber = I) ifTrue: [^self prev].
	^self prev - aNaturalNumber prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:47:04' prior: 50862354!
- aNaturalNumber 
	
	"(aNaturalNumber = I) ifTrue: [^self prev]."
	^self prev - aNaturalNumber prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:48:27' prior: 50862142!
prev
	self = II ifTrue: [^I].
	^prev.! !

III-I!

III-II!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:49:17' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:49:17' overrides: 50862373!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:49:17' overrides: 50862373!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:49:17' overrides: 50862373!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'Luis 8/29/2021 21:49:17'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'Luis 8/29/2021 21:49:17'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'Luis 8/29/2021 21:49:17'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'Luis 8/29/2021 21:49:17'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIII.!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:51:02' prior: 50862368!
prev
	self = I ifTrue: [^I].
	^prev.! !

II prev!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:52:16' prior: 50862432!
prev
	self = I ifFalse: [^prev].
	"^prev."! !

II-I!

II-I!

I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:54:43' prior: 50862437!
prev
	self = II ifFalse: [^prev].
	"^prev."! !

II-I!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:54:48' prior: 50862442!
prev
	self = I ifFalse: [^prev].
	"^prev."! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/26/2021 21:24:11' prior: 50862447!
prev
	^prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 21:56:47' prior: 50862361!
- aNaturalNumber 
	
	(aNaturalNumber = I) ifTrue: [^self prev].
	^self prev - aNaturalNumber prev.! !

III-I!

I-I II !

IIII-II!

IIII-II!

IIII-II!

II prev!

I prev!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:07:09' prior: 50862456!
- aNaturalNumber 
	
	(aNaturalNumber = I) ifTrue: [^self prev].
	^self prev - aNaturalNumber prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:07:56' prior: 50862465!
- aNaturalNumber 
	
	"(aNaturalNumber = I) ifTrue: [^self prev]."
	^self prev - aNaturalNumber prev.! !
!I class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:08:38'!
prev
	^''! !
!I class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:08:49' prior: 50862478!
prev
	! !

IIII-II!

IIII-II!

IIII-I!
!I class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:10:53' prior: 50862482!
prev
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:27:14' prior: 50862472!
- aNaturalNumber 
	
	"(aNaturalNumber = I) ifTrue: [^self prev]."
	^self prev - aNaturalNumber prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:28:22' prior: 50862491!
- aNaturalNumber 
	
	(aNaturalNumber = I) ifTrue: [^self prev].
	^self prev - aNaturalNumber prev.! !

IIII-III!

IIII-III!

IIII-III!

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/Numeros Naturales Tests.st----!

!methodRemoval: I class #prev stamp: 'Luis 8/29/2021 22:33:59'!
prev
	!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:34:17'!
previous
	^prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:34:17' prior: 50862128!
+ aNaturalNumber

	^ self previous + aNaturalNumber next.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:34:17' prior: 50862498!
- aNaturalNumber 
	
	(aNaturalNumber = I) ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !

!methodRemoval: II class #prev stamp: 'Luis 8/29/2021 22:34:17'!
prev
	^prev.!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:34:43'!
previous: anNaturalNumber
	^prev := anNaturalNumber.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:34:43' prior: 50862146!
next
	next ifNotNil: [^next].
	 
	next := II createChildNamed: self name, 'I'.
	next previous: self.
	^next.! !

!methodRemoval: II class #prev: stamp: 'Luis 8/29/2021 22:34:43'!
prev: anNaturalNumber
	^prev := anNaturalNumber.!

IIII-III.!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'Luis 8/29/2021 22:35:31'!
ERROR!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:54:05'!
M: anNaturalNumber m: anNaturalNumberMinor
	^prev := anNaturalNumber.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:55:27'!
m: anNaturalNumber
	^prev := anNaturalNumber.! !

!methodRemoval: II class #M:m: stamp: 'Luis 8/29/2021 22:55:32'!
M: anNaturalNumber m: anNaturalNumberMinor
	^prev := anNaturalNumber.!
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:56:00' prior: 50862726!
m: aNaturalNumber
	(aNaturalNumber = I) ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:56:23' prior: 50862622!
- aNaturalNumber 
	^self m: aNaturalNumber.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:56:54' prior: 50862742!
- aNaturalNumber 
	self m: aNaturalNumber.
	^self previous - aNaturalNumber previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:57:04' prior: 50862735!
m: aNaturalNumber
	(aNaturalNumber = I) ifTrue: [^self previous].! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:58:14' prior: 50862747!
- aNaturalNumber 
	self m: aNaturalNumber.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Luis 8/29/2021 22:58:39' prior: 50862753!
m: aNaturalNumber
	(aNaturalNumber = I) ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !

----QUIT----(29 August 2021 23:31:06) CuisUniversity-4532.image priorSource: 16981685!

----STARTUP---- (30 August 2021 13:52:55) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/NumerosNaturalesDavid.st----!

!classRemoval: #IIIIIIIII stamp: 'Luis 8/30/2021 13:56:15'!
IIIIIIII subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #IIIIIIII stamp: 'Luis 8/30/2021 13:56:15'!
IIIIIII subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #IIIIIII stamp: 'Luis 8/30/2021 13:56:15'!
IIIIII subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #IIIIII stamp: 'Luis 8/30/2021 13:56:16'!
IIIII subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #IIIII stamp: 'Luis 8/30/2021 13:56:16'!
IIII subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #IIII stamp: 'Luis 8/30/2021 13:56:16'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #III stamp: 'Luis 8/30/2021 13:56:16'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #II stamp: 'Luis 8/30/2021 13:56:17'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

!classRemoval: #I stamp: 'Luis 8/30/2021 13:56:17'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'NumerosNaturales'!

----STARTUP---- (30 August 2021 13:56:42) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----QUIT----(30 August 2021 13:57:05) CuisUniversity-4532.image priorSource: 16995823!

----STARTUP---- (30 August 2021 18:12:06) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/Packages/Features/VectorGraphics.pck.st----!

----QUIT----(30 August 2021 18:15:11) CuisUniversity-4532.image priorSource: 16996029!

----STARTUP---- (30 August 2021 20:45:20) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


ObjectBuilder create: #EjercicioSemaforo
	collaboratorNames: ''
	in: 'DenotativeObject-Morph'
	!

!classDefinition: #EjercicioSemaforo category: 'DenotativeObject-Morph' stamp: 'LB 8/30/2021 20:46:55'!
DenotativeObject subclass: #EjercicioSemaforo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-Morph'!

!classDefinition: 'EjercicioSemaforo class' category: 'DenotativeObject-Morph' stamp: 'LB 8/30/2021 20:46:55'!
EjercicioSemaforo class
	instanceVariableNames: ''!

!classRemoval: #EjercicioSemaforo stamp: 'LB 8/30/2021 20:47:04'!
DenotativeObject subclass: #EjercicioSemaforo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-Morph'!

----QUIT----(30 August 2021 20:47:09) CuisUniversity-4532.image priorSource: 17367153!

----STARTUP---- (30 August 2021 20:47:14) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


ObjectBuilder create: #anObject
	collaboratorNames: ''
	in: 'Ejercicio Semaforo'
	!

!classDefinition: #anObject category: 'Ejercicio Semaforo' stamp: 'LB 8/30/2021 20:48:01'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Semaforo'!

!classDefinition: 'anObject class' category: 'Ejercicio Semaforo' stamp: 'LB 8/30/2021 20:48:01'!
anObject class
	instanceVariableNames: ''!

!classRenamed: #anObject as: #unSemaforo stamp: 'LB 8/30/2021 20:48:28'!
Smalltalk renameClassNamed: #anObject as: #unSemaforo!

!classDefinition: #unaLuzAmarilla category: 'EjercicioSemaforo' stamp: 'LB 8/30/2021 20:49:49'!
DenotativeObject subclass: #unaLuzAmarilla
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioSemaforo'!
!unSemaforo class methodsFor: 'no messages' stamp: 'LB 8/30/2021 20:49:43'!
prender

	unaLuzAmarilla prender.
	(Delay for:0.5 * second) wait.
	unaLuzAmarilla apagar.
	(Delay for:0.5 * second) wait.! !

unaLuzAmarilla
	asChildOf: Light
	collaboratorNames: ''
	in: 'EjercicioSemaforo'!

!classDefinition: #unaLuzAmarilla category: 'EjercicioSemaforo' stamp: 'LB 8/30/2021 20:50:19'!
Light subclass: #unaLuzAmarilla
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioSemaforo'!

!classDefinition: 'unaLuzAmarilla class' category: 'EjercicioSemaforo' stamp: 'LB 8/30/2021 20:50:19'!
unaLuzAmarilla class
	instanceVariableNames: ''!
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 20:55:25'!
titilar

	unaLuzAmarilla prender.
	(Delay for:0.5 * second) wait.
	unaLuzAmarilla apagar.
	(Delay for:0.5 * second) wait.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 20:55:34' prior: 50874437!
prender

	self titilar.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 20:55:41' prior: 50874459!
titilar

	unaLuzAmarilla prender.
	(Delay for:0.5 * second) wait.
	unaLuzAmarilla apagar.
	(Delay for:0.5 * second) wait.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:00:09'!
titilarLuzAmarilla

	unaLuzAmarilla prender.
	(Delay for:0.5 * second) wait.
	unaLuzAmarilla apagar.
	(Delay for:0.5 * second) wait.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:00:09' prior: 50874467!
prender

	self titilarLuzAmarilla.! !

!methodRemoval: unSemaforo class #titilar stamp: 'LB 8/30/2021 21:00:09'!
titilar

	unaLuzAmarilla prender.
	(Delay for:0.5 * second) wait.
	unaLuzAmarilla apagar.
	(Delay for:0.5 * second) wait.!
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:00:23' prior: 50874486!
prender

	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.! !
!unaLuzAmarilla class methodsFor: 'nil' stamp: 'LB 8/30/2021 21:00:50'!
prender! !
!unaLuzAmarilla class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:00:54'!
apagar! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:02:37' prior: 50874497!
prender

	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.! !
!unaLuzAmarilla class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:03:48' prior: 50874508!
apagar
	self color: Color black.! !
!unaLuzAmarilla class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:04:09' prior: 50874504!
prender
	self color: Color yellow.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:04:36'!
avisarPrecauciónPorEncendido

	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.
	self titilarLuzAmarilla.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:04:54' prior: 50874529!
avisarPrecauciónPorEncendido

	5 timesRepeat: [self titilarLuzAmarilla]! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:05:04' prior: 50874512!
prender

	self avisarPrecauciónPorEncendido .! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:05:32' prior: 50874544!
prender

	self avisarPrecauciónPorEncendido.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:18:58'!
esperarTiempoDeTitilado

	^ (Delay for:0.5 * second) wait! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:18:58' prior: 50874478!
titilarLuzAmarilla

	unaLuzAmarilla prender.
	self esperarTiempoDeTitilado.
	unaLuzAmarilla apagar.
	(Delay for:0.5 * second) wait.! !
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:19:09' prior: 50874560!
titilarLuzAmarilla

	unaLuzAmarilla prender.
	self esperarTiempoDeTitilado.
	unaLuzAmarilla apagar.
	self esperarTiempoDeTitilado.! !

!classRenamed: #unaLuzAmarilla as: #unaSeñalDePrecaucion stamp: 'LB 8/30/2021 21:35:10'!
Smalltalk renameClassNamed: #unaLuzAmarilla as: #unaSeñalDePrecaucion!
!unSemaforo class methodsFor: 'as yet unclassified' stamp: 'LB 8/30/2021 21:35:10' prior: 50874568!
titilarLuzAmarilla

	unaSeñalDePrecaucion prender.
	self esperarTiempoDeTitilado.
	unaSeñalDePrecaucion apagar.
	self esperarTiempoDeTitilado.! !

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/Packages/Morphic/Morphic-Widgets-Extras.pck.st----!

----QUIT----(30 August 2021 21:44:18) CuisUniversity-4532.image priorSource: 17368105!

----STARTUP---- (1 September 2021 11:21:24) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/NumerosNaturalesDavid.st----!

----STARTUP---- (1 September 2021 11:28:57) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/NumerosNaturalesDavid.st----!

----STARTUP---- (1 September 2021 11:28:32) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!classDefinition: 'I class' category: 'Numeros naturales' stamp: 'LB 9/1/2021 11:32:57'!
I class
	instanceVariableNames: 'next'!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:32:53' prior: 50862336!
next
	next ifNil: [
		next := self createChildNamed: self name, 'I'.
		next previous: self ].
	^next! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:33:27' prior: 50877130!
next
	next ifNil: [
		next := self createChildNamed: 'II'.
		next previous: self ].
	^next! !

I next!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:35:37' prior: 50877137!
next
	next ifNil: [
		next := self createChildNamed: 'II'.
		next previous: self ].
	^next! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:37:27' prior: 50877144!
next
	next ifNil: [
		next := self cloneNamed: 'II'.
		next previous: self
		].
	^next! !

I-I!

II-I!

I-II!

I-II!

	self error: self descripcionDeErrorDeNumerosNegativosNoSoportados!

	self error: self descripcionDeErrorDeNumerosNegativosNoSoportados!

II-I!

II-II!

I-II!

III-IIII!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:42:45' prior: 50876722!
- unSutraendo 
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados! !

I-IIII!

----STARTUP---- (1 September 2021 11:45:57) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Downloads/00-NumerosNaturales_Numeros Naturales.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 11:47:00'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:47:41' prior: 50877150!
next
	next ifNil: [
		next := 'II'.
		next previous: self
		].
	^next! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:49:14' prior: 50877106!
next
	next ifNil: [
		next := II.
		next previous: self ].
	^next! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:50:25'!
- aNaturalNumber

	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:50:58'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'ERROR!! Numeros Negativos no soportados!!'! !

I+I!

!classRemoval: #IIIIIIII stamp: 'LB 9/1/2021 11:52:47'!
II subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIIII stamp: 'LB 9/1/2021 11:52:48'!
II subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'LB 9/1/2021 11:52:48'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIII stamp: 'LB 9/1/2021 11:52:48'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIII stamp: 'LB 9/1/2021 11:52:49'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #III stamp: 'LB 9/1/2021 11:52:49'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #II stamp: 'LB 9/1/2021 11:52:49'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #I stamp: 'LB 9/1/2021 11:52:50'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

----End fileIn of /home/luisb/Downloads/00-NumerosNaturales_Numeros Naturales.st----!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:54:42' prior: 50862759!
- aNaturalNumber 
	^aNaturalNumber restarA: self.! !

II-I!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:55:03'!
restarA: anII 
	self shouldBeImplemented.! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:55:36' prior: 50877550!
restarA: aNaturalNumber
	^self previous restarA: aNaturalNumber previous.! !

II-I!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:56:42' prior: 50877555!
restarA: aNaturalNumber
	^aNaturalNumber previous! !

III-II!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:57:10'!
restarA: anIII 
	self shouldBeImplemented.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:57:27' prior: 50877566!
restarA: aNaturalNumber 
	^self previous restarA: aNaturalNumber previous.! !

IIII-II I !

IIII-II !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 11:59:46'!
m_REMOVE: aNaturalNumber
	(aNaturalNumber = I) ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.! !

!methodRemoval: II class #m: stamp: 'LB 9/1/2021 11:59:46'!
m: aNaturalNumber
	(aNaturalNumber = I) ifTrue: [^self previous].
	^self previous - aNaturalNumber previous.!

II-I!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:01:00' prior: 50862617!
+ unSumando

	^ self previous + unSumando next.! !

I restarA: II!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:04:19' prior: 50877571!
restarA: aNaturalNumber 
	^self previous restarA: aNaturalNumber previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:04:38' prior: 50877545!
- aNaturalNumber 
	^aNaturalNumber restarA: self.
	
	"Cambio de orden, en vez de X - Y, hacemos Y restarA X"! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:04:58' prior: 50877601!
- unSustraendo 
	^unSustraendo restarA: self.
	
	"Cambio de orden, en vez de X - Y, hacemos Y restarA X"! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:05:19' prior: 50877608!
- unSustraendo 
	^unSustraendo restarA: self.
	
	"Cambio de orden, en vez de 'X - Y', hacemos 'Y restarA X' "! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 12:08:43'!
PASSED!

III-II!

III-IIII!

III-IIII!

I-I!

I-II!

II-III!

II-III!

II-III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:15:43' prior: 50877595!
restarA: aNaturalNumber 
	aNaturalNumber = I ifTrue: [self - aNaturalNumber].
	
	^self previous restarA: aNaturalNumber previous.! !

II-III!

II-III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:16:33' prior: 50877662!
restarA: aNaturalNumber 
	aNaturalNumber = I ifTrue: [I descripcionDeErrorDeNumerosNegativosNoSoportados].
	
	^self previous restarA: aNaturalNumber previous.! !

II-III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:16:51' prior: 50877670!
restarA: aNaturalNumber 
	aNaturalNumber = I ifTrue: [^I descripcionDeErrorDeNumerosNegativosNoSoportados].
	
	^self previous restarA: aNaturalNumber previous.! !

II-III!

----STARTUP---- (1 September 2021 12:17:16) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Downloads/inge1-1c-2021-master/00-NumerosNaturales/NumerosNaturales_David.st----!

III-IIII!

I-III!

I-III!

I-III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:20:11' prior: 50877679!
restarA: aNaturalNumber 
	aNaturalNumber = I ifTrue: [I descripcionDeErrorDeNumerosNegativosNoSoportados].
	
	^self previous restarA: aNaturalNumber previous.! !

I-III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:21:21' prior: 50877688!
restarA: aNaturalNumber 
	aNaturalNumber = I ifTrue: [I descripcionDeErrorDeNumerosNegativosNoSoportados].
	
	^self previous restarA: aNaturalNumber previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:22:02' prior: 50877697!
restarA: aNaturalNumber 
	"aNaturalNumber = I ifTrue: [I descripcionDeErrorDeNumerosNegativosNoSoportados]."
	"esto es para que no haga 'I previous' "
	
	^self previous restarA: aNaturalNumber previous.! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:22:48'!
previous
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !

I-III!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:24:41'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'ERROR!! No se puede Dividir por un Numero Mayor!!'! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:25:00'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'ERROR!! No se puede Dividir por un Numero Mayor!!'! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 12:25:48' prior: 50877705!
restarA: aNaturalNumber 
	"aNaturalNumber = I ifTrue: [I descripcionDeErrorDeNumerosNegativosNoSoportados]."
	"esto es para que no haga 'I previous' "
	"De cualquier forma lo solucione con implementar error en I previous"
	
	^self previous restarA: aNaturalNumber previous.! !

----SNAPSHOT----(1 September 2021 12:25:53) CuisUniversity-4532.image priorSource: 17441174!

----QUIT----(1 September 2021 12:26:01) CuisUniversity-4532.image priorSource: 17441652!

----STARTUP---- (1 September 2021 19:10:43) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


III-I!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:21:07' prior: 50877615!
- arg1
	^ arg1 restarA: self.
	
	" en vez de hacer X - Y , hacemos Y restarA X"! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:21:19' prior: 50876713!
- aNaturalNumber
	^ aNaturalNumber restarA: self.
	
	" en vez de hacer X - Y , hacemos Y restarA X"! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:22:00' prior: 50877577!
m_REMOVE: aNaturalNumber
	aNaturalNumber = I ifTrue: [ ^ self previous ].
	^ self previous - aNaturalNumber previous.! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:24:23' prior: 50877561!
restarA: aNaturalNumber
	^ aNaturalNumber previous.! !

IIII restarA: I!

I restarA: IIII!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:25:12' prior: 50876733!
restarA: aNaturalNumber
	^aNaturalNumber previous.! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:25:43' prior: 50877117!
- aNaturalNumber
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:26:11' prior: 50876719!
- aNaturalNumber
	^aNaturalNumber restarA: self.
	
	" en vez de hacer X - Y , hacemos Y restarA X"! !

IIIII- II!

IIIII - II!

----SNAPSHOT----(1 September 2021 19:35:45) CuisUniversity-4532.image priorSource: 17441746!

!methodRemoval: II class #m_REMOVE: stamp: 'LB 9/1/2021 19:37:26'!
m_REMOVE: aNaturalNumber
	aNaturalNumber = I ifTrue: [ ^ self previous ].
	^ self previous - aNaturalNumber previous.!

I-III!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:39:12' prior: 50876744!
- aNaturalNumber
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !

Antonio error: [^'hola'] value!

Antonio error: [^'hola']!

Antonio error: 'hola'!

I-II!

I-I!

I previous!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:43:06' prior: 50876691!
restarA: aNaturalNumber 
	
	^self previous restarA: aNaturalNumber previous.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:33'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 19:43:48'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:05' prior: 50862118!
+ aNaturalNumber

	^aNaturalNumber next.! !

----SNAPSHOT----(1 September 2021 19:45:08) CuisUniversity-4532.image priorSource: 17443390!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:14' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:14' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:14' overrides: 50876846!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:14' overrides: 50876846!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:14' overrides: 50876846!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIII.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIII.!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:53' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:53' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:53' overrides: 50876917!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:53' overrides: 50876917!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:45:53' overrides: 50876917!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIII.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 19:45:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIII.!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:50:57'!
* aNaturalNumber

	^aNaturalNumber! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:54:55'!
* aNaturalNumber
	^ self + (aNaturalNumber previous * self)! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:55:05' prior: 50876984!
* aNaturalNumber
	^ self + (self * aNaturalNumber previous)! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:55:06' prior: 50876989!
* aNaturalNumber
	^ self + (self * aNaturalNumber previous).! !

II*II!

I*II!

II*I!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:57:51' prior: 50876994!
* aNaturalNumber
	^ self + (self previous * aNaturalNumber).! !

II*I!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:58:29' prior: 50877000!
* aNaturalNumber
	^ self + (self previous * aNaturalNumber).! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 19:59:31' prior: 50877006!
* aNaturalNumber
	^ aNaturalNumber + (self previous * aNaturalNumber).! !

II*I!

III*I II !

III*II!

!classDefinition: #IIIIII category: 'Numeros naturales' stamp: 'LB 9/1/2021 20:00:18'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros naturales'!

!classDefinition: 'IIIIII class' category: 'Numeros naturales' stamp: 'LB 9/1/2021 20:00:18'!
IIIIII class
	instanceVariableNames: ''!

II*II!

I*II!

I*II II !

I*II!

I*II!

I*III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:04:08' prior: 50877011!
* aNaturalNumber
	^ aNaturalNumber + (aNaturalNumber * self previous).! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'LB 9/1/2021 20:04:19'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:05:00'!
/ aNaturalNumber
	^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor.! !

I/I!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:06:58' prior: 50877073!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [^I].
	^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor.! !

I / I!

I / I!

I / II!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:09:19'!
esMayor: aNaturalNumber
	^I! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:09:39' prior: 50877590!
+ aNaturalNumber
	^ self previous + aNaturalNumber next.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:15:54' prior: 50877087!
esMayor: aNaturalNumber
	aNaturalNumber = I ifTrue: [^True].
	self previous esMayor: aNaturalNumber previous.! !

III esMayor: I!

IIIII esMayor: III!

IIIII esMayor: III!

IIIII esMayor: III!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:16:57' prior: 50877096!
esMayor: aNaturalNumber
	aNaturalNumber = I ifTrue: [^True].
	^self previous esMayor: aNaturalNumber previous.! !

IIIII esMayor: III!

III esMayor: II!
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:18:35'!
esMayor: aNaturalNumber
	^false
	! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:19:00' prior: 50877113!
esMayor: aNaturalNumber
	^False
	! !

III esMayor: II!

III esMayor: III !

III esMayor: IIII!
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:21:15'!
/ aNaturalNumber
	(aNaturalNumber esMayor: self) ifTrue: [^self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:22:32' prior: 50877105!
esMayor: aNaturalNumber
	aNaturalNumber = I ifTrue: [^True].
	^self previous esMayor: aNaturalNumber previous.! !
!I class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:24:39' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:24:39' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:24:39' overrides: 50877144!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:24:39' overrides: 50877144!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:24:39' overrides: 50877144!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	prev := IIII.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'LB 9/1/2021 20:24:39' overrides: 50877144!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIIII.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 20:24:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 20:24:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 20:24:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 20:24:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 20:24:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	prev := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'LB 9/1/2021 20:24:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIIII.!

----QUIT----(1 September 2021 20:28:50) CuisUniversity-4532.image priorSource: 17445899!

----STARTUP---- (2 September 2021 17:10:16) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


TestCase subclass: #WIGTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioWIG'!

!classDefinition: #WIGTest category: 'EjercicioWIG' stamp: 'LB 9/2/2021 17:16:40'!
TestCase subclass: #WIGTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioWIG'!

!classDefinition: #WhenIsGood category: 'EjercicioWIG' stamp: 'LB 9/2/2021 17:29:48'!
Object subclass: #WhenIsGood
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioWIG'!
!WIGTest methodsFor: 'nil' stamp: 'LB 9/2/2021 17:29:18'!
test01WIGSinParticipantesalInicio

|unWig|

unWig:= WhenIsGood new.

self assert: 0 equals: unWig cantidadDeParticipantes! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:30:12'!
ERROR!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:30:12'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:30:37'!
cantidadDeParticipantes
	self shouldBeImplemented.! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:30:58' prior: 50877259!
cantidadDeParticipantes
	^0.! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:31:00'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:31:07'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:39:29'!
test02WIGAgregaParticipantes

|unWig diasDisponibles |

unWig:= WhenIsGood new.

diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

unWig agregarDisponibilidad: diasDisponibles.

self assert: 0 equals: unWig cantidadDeParticipantes! !

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:39:45'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:39:53'!
agregarDisponibilidad: anOrderedCollection 
	self shouldBeImplemented.! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:42:09' prior: 50877274!
test02WIGAgregaParticipantes

|unWig diasDisponibles |

unWig:= WhenIsGood new.

diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

unWig agregarDisponibilidad: diasDisponibles.

self assert: 0 equals: unWig cantidadDeParticipantes! !

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:42:11'!
ERROR!

!classDefinition: #WhenIsGood category: 'EjercicioWIG' stamp: 'LB 9/2/2021 17:44:39'!
Object subclass: #WhenIsGood
	instanceVariableNames: 'disponibilidades'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioWIG'!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:43:57' prior: 50877288!
agregarDisponibilidad: unaListaDeDiasDisponibles 
	disponibilidades add: unaListaDeDiasDisponibles.! !

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:44:52'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:47:49'!
initilize
	disponibilidades:= OrderedCollection new.! !

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:48:00'!
ERROR!

self basicNew!

self basicNew!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:50:03'!
ERROR!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:50:10' prior: 50877294!
test02WIGAgregaParticipantes

|unWig diasDisponibles |

unWig:= WhenIsGood new.

diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

unWig agregarDisponibilidad: diasDisponibles.

self assert: 1 equals: unWig cantidadDeParticipantes! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:50:43' prior: 50877264!
cantidadDeParticipantes
	^disponibilidades.! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:51:00' prior: 50877349!
cantidadDeParticipantes
	^disponibilidades size.! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:51:08'!
ERROR!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:51:08'!
ERROR!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:51:21'!
ERROR!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:53:00'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 17:55:38' overrides: 16896425!
initialize
	disponibilidades:= OrderedCollection new.! !

1+1!

unWig:= WhenIsGood new.!

unWig  cantidadDeParticipantes .!

!methodRemoval: WhenIsGood #initilize stamp: 'LB 9/2/2021 17:56:39'!
initilize
	disponibilidades:= OrderedCollection new.!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 17:56:46'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 17:56:46'!
PASSED!

----SNAPSHOT----(2 September 2021 18:00:55) CuisUniversity-4532.image priorSource: 17458296!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:10:08'!
test03WIGAgregarUnafechaLaHaceDisponible

|unWig diasDisponibles |

unWig:= WhenIsGood new.

self assert: false equals: (unWig estaDisponible: September/2/2021).

"diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

unWig agregarDisponibilidad: diasDisponibles.


self assert: 1 equals: unWig cantidadDeParticipantes"! !

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:10:15'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:10:21'!
estaDisponible: aFixedGregorianDate 
	self shouldBeImplemented.! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:10:37' prior: 50877407!
estaDisponible: aFixedGregorianDate 
	^false.! !

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:10:38'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 18:10:38'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 18:10:38'!
PASSED!

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:10:38'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:12:17' prior: 50877390!
test03WIGAgregarUnafechaLaHaceDisponible

|unWig diasDisponibles |

unWig:= WhenIsGood new.

self assert: false equals: (unWig estaDisponible: September/2/2021).

diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

unWig agregarDisponibilidad: diasDisponibles.


self assert: true equals: (unWig estaDisponible: September/2/2021).! !

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:12:19'!
FAILURE!

unWig := WhenIsGood  new.!

unWig estaDisponible: September/2/2021.!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:14:09' prior: 50877412!
estaDisponible: unaFecha 
	^disponibilidades includes: unaFecha.! !

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:14:14'!
FAILURE!

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:15:41'!
FAILURE!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:18:42' prior: 50877429!
test03WIGAgregarUnafechaLaHaceDisponible

|unWig |

unWig:= WhenIsGood new.

self assert: false equals: (unWig estaDisponible: September/2/2021).


unWig agregarDisponibilidad: September/2/2021.


self assert: true equals: (unWig estaDisponible: September/2/2021).! !

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:18:44'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 18:18:49'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 18:18:49'!
PASSED!

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:18:49'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:12:17' prior: 50877461!
test03WIGAgregarUnafechaLaHaceDisponible

|unWig diasDisponibles |

unWig:= WhenIsGood new.

self assert: false equals: (unWig estaDisponible: September/2/2021).

diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

unWig agregarDisponibilidad: diasDisponibles.


self assert: true equals: (unWig estaDisponible: September/2/2021).! !

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:22:13'!
FAILURE!

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:22:25'!
FAILURE!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:23:01' prior: 50877449!
estaDisponible: unaFecha 
	^disponibilidades includesAll: unaFecha.! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 18:23:07'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 18:23:07'!
PASSED!

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:23:07'!
ERROR!

!testRun: #WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:23:07'!
ERROR!

----End fileIn of /home/luisb/Programs/cuisUniversity-linux64/Packages/TerseGuide.pck.st----!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:28:18' prior: 50877506!
estaDisponible: unaFecha 
	^disponibilidades includes: unaFecha.! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:29:36' prior: 50877485!
test03WIGAgregarUnafechaLaHaceDisponible

	|unWig diasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2/2021).

	diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

	unWig agregarDisponibilidad: diasDisponibles.


	self assert: true equals: (unWig estaDisponible: September/2/2021).! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:29:43' prior: 50877246!
test01WIGSinParticipantesalInicio

	|unWig|

	unWig:= WhenIsGood new.

	self assert: 0 equals: unWig cantidadDeParticipantes! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:29:53' prior: 50877337!
test02WIGAgregaParticipantes

	|unWig diasDisponibles |

	unWig:= WhenIsGood new.

	diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

	unWig agregarDisponibilidad: diasDisponibles.

	self assert: 1 equals: unWig cantidadDeParticipantes! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:31:09'!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig diasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2/2021).

	diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

	unWig agregarDisponibilidad: diasDisponibles.


	self assert: true equals: (unWig estaDisponible: September/2/2021).! !

!methodRemoval: WIGTest #test03WIGAgregarUnafechaLaHaceDisponible stamp: 'LB 9/2/2021 18:31:15'!
test03WIGAgregarUnafechaLaHaceDisponible

	|unWig diasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2/2021).

	diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

	unWig agregarDisponibilidad: diasDisponibles.


	self assert: true equals: (unWig estaDisponible: September/2/2021).!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:32:31' prior: 50880487!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig una Fecha diasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2/2021).

	diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

	unWig agregarDisponibilidad: diasDisponibles.


	self assert: true equals: (unWig estaDisponible: September/2/2021).! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:32:40' prior: 50880517!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig unaFecha diasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2/2021).

	diasDisponibles:= OrderedCollection with: September/2/2021 with: September/3/2021.

	unWig agregarDisponibilidad: diasDisponibles.


	self assert: true equals: (unWig estaDisponible: September/2/2021).! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:34:22' prior: 50880533!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig unaFecha unaListaDeFechasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2).

	unaFecha:= September/2.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.

	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.


	self assert: true equals: (unWig estaDisponible: September/2/2021).! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:34:34' prior: 50880549!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig unaFecha unaListaDeFechasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2).

	unaFecha:= September/2.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.

	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.


	self assert: (unWig estaDisponible: September/2/2021).! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:34:46' prior: 50880565!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig unaFecha unaListaDeFechasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/2).

	unaFecha:= September/2.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.

	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.


	self assert: (unWig estaDisponible: unaFecha).! !

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:34:47'!
FAILURE!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:39:02' prior: 50880449!
estaDisponible: unaFecha 
	|matches|
	
	matches:= (disponibilidades at: 0) select:
	[		:unaFechaDisponible| unaFechaDisponible = unaFecha].
	^matches size = 1.! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:44:00' prior: 50880600!
estaDisponible: unaFecha 
	"|matches|"
	
	"matches:= (disponibilidades at: 0) select:
	[		:unaFechaDisponible| unaFechaDisponible = unaFecha]."
	
	disponibilidades detect:
	[:fechasPersona| fechasPersona includes: unaFecha].
	^1.! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:44:31' prior: 50880608!
estaDisponible: unaFecha 
	"|matches|"
	
	"matches:= (disponibilidades at: 0) select:
	[		:unaFechaDisponible| unaFechaDisponible = unaFecha]."
	
	^(disponibilidades detect:
	[:fechasPersona| fechasPersona includes: unaFecha]) isEmpty not.! !

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:45:07'!
ERROR!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:45:38'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:47:06' prior: 50880619!
estaDisponible: unaFecha 
	"|matches|"
	
	"matches:= (disponibilidades at: 0) select:
	[		:unaFechaDisponible| unaFechaDisponible = unaFecha]."
	
	"^(disponibilidades detect:
	[:fechasPersona| fechasPersona includes: unaFecha]) isEmpty not."
	
	^disponibilidades allSatisfy: [:participante| participante includes: unaFecha]! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 18:47:07'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 18:47:07'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:47:07'!
FAILURE!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:47:07'!
FAILURE!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:49:41' prior: 50880637!
estaDisponible: unaFecha 
	"|matches|"
	
	"matches:= (disponibilidades at: 0) select:
	[		:unaFechaDisponible| unaFechaDisponible = unaFecha]."
	
	"^(disponibilidades detect:
	[:fechasPersona| fechasPersona includes: unaFecha]) isEmpty not."
	
	^disponibilidades allSatisfy:
	[:participante| participante includes: unaFecha]! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:50:10' prior: 50880664!
estaDisponible: unaFecha 
	"|matches|"
	
	"matches:= (disponibilidades at: 0) select:
	[		:unaFechaDisponible| unaFechaDisponible = unaFecha]."
	
	"^(disponibilidades detect:
	[:fechasPersona| fechasPersona includes: unaFecha]) isEmpty not."
	
	^disponibilidades allSatisfy:
	[:unaDisponibilidad| unaDisponibilidad includes: unaFecha]! !

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:50:17'!
FAILURE!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:51:04'!
FAILURE!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:51:27' prior: 50880581!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig unaFecha unaListaDeFechasDisponibles |

	unWig:= WhenIsGood new.

	self assert: false equals: (unWig estaDisponible: September/02).

	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.

	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.


	self assert: (unWig estaDisponible: unaFecha).! !

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:51:27'!
FAILURE!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:51:36' prior: 50880699!
test03WIGConUnaFechaDisponibleLaReconoceComoDisponible

	|unWig unaFecha unaListaDeFechasDisponibles |

	unWig:= WhenIsGood new.

	"self assert: false equals: (unWig estaDisponible: September/02)."

	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.

	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.


	self assert: (unWig estaDisponible: unaFecha).! !

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:51:37'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 18:51:37'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 18:51:37'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 18:51:37'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:58:39'!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig diasDisponibles|
	unWig := WhenIsGood new.
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:59:40' prior: 50880746!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig diasDisponibles|
	unWig := WhenIsGood new.
	
	self assert: true equals: (unWig diasPosibles).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 18:59:48'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 18:59:53'!
diasPosibles
	self shouldBeImplemented.! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:01:23'!
diasPosiblesEn: unIntervalo
	^1.! !

!methodRemoval: WhenIsGood #diasPosibles stamp: 'LB 9/2/2021 19:01:31'!
diasPosibles
	self shouldBeImplemented.!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:05:35' prior: 50880752!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaInicial |
	unWig := WhenIsGood new.
	
	fechaInicial:= September/02.
	fechaFinal:= September/10.
	
	intervalo:= OrderedCollection with: fechaInicial with: fechaFinal.
	
	self assert: true equals: (unWig diasPosibles).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:05:58' prior: 50880775!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaInicial |
	unWig := WhenIsGood new.
	
	fechaInicial:= September/02.
	fechaFinal:= September/10.
	
	intervalo:= OrderedCollection with: fechaInicial with: fechaFinal.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:06:36' prior: 50880767!
diasPosiblesEn: unIntervalo
	^OrderedCollection new.! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:06:46'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:06:46'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:06:46'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:06:46'!
FAILURE!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:06:46'!
FAILURE!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:07:39' prior: 50880788!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaInicial unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaInicial:= September/02.
	fechaFinal:= September/10.
	
	intervalo:= OrderedCollection with: fechaInicial with: fechaFinal.
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:14:55' prior: 50880801!
diasPosiblesEn: unIntervalo
	"|diasDisponibles|"
	
	^unIntervalo allSatisfy: [:unaFecha| self estaDisponible: unaFecha].! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:15:10' prior: 50880822!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaInicial unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaInicial:= September/02.
	fechaFinal:= September/03.
	
	intervalo:= OrderedCollection with: fechaInicial with: fechaFinal.
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:16:29' prior: 50880846!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaInicial unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaInicial:= September/02.
	"fechaFinal:= September/03."
	
	intervalo:= OrderedCollection with: fechaInicial "with: fechaFinal".
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:16:34'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:16:34'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:16:34'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:16:34'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:16:34'!
PASSED!

x _ OrderedCollection with: 4 with: 3 with: 2 with: 1.!

x _ OrderedCollection with: 4 with: 3 with: 2 with: 1.!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:23:23' prior: 50880863!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaInicial unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaInicial:= September/02.
	
	intervalo:= OrderedCollection with: fechaInicial "with: fechaFinal".
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:23:33' prior: 50880899!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaFinal fechaIntervalo unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	
	intervalo:= OrderedCollection with: fechaIntervalo "with: fechaFinal".
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:23:46' prior: 50880915!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:24:07' prior: 50880931!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	
	
	self assert: true equals: (unWig diasPosiblesEn: intervalo).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:24:21' prior: 50880946!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.
	
	self assert: (unWig diasPosiblesEn: intervalo).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:24:22'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:24:22'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:24:22'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:24:22'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:24:22'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:24:40' prior: 50880961!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaFecha unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaFecha:= September/02.
	unaListaDeFechasDisponibles:= OrderedCollection with: unaFecha.
	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.
	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.
	
	self assert: (unWig diasPosiblesEn: intervalo).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:24:42'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:24:42'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:24:42'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:24:42'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:24:42'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:26:08' prior: 50880993!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaListaDeFechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaListaDeFechasDisponibles:= OrderedCollection with: September/02 with: September/03.
	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.
	unWig agregarDisponibilidad: unaListaDeFechasDisponibles.
	
	self assert: (unWig diasPosiblesEn: intervalo).
	! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:26:53' prior: 50881027!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaListaDe3FechasDisponibles unaListaDe2FechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo:= September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaListaDe3FechasDisponibles:= OrderedCollection with: September/02 with: September/03 with: September/04.
	unaListaDe2FechasDisponibles:= OrderedCollection with: September/02 with: September/03.
	unWig agregarDisponibilidad: unaListaDe3FechasDisponibles.
	unWig agregarDisponibilidad: unaListaDe2FechasDisponibles.
	
	self assert: (unWig diasPosiblesEn: intervalo).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:26:54'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:26:54'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:26:54'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:26:54'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:26:54'!
PASSED!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:30:57' prior: 50881045!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaListaDe3FechasDisponibles unaListaDe2FechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo := September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaListaDe3FechasDisponibles:= OrderedCollection with: September/02 with: September/03 with: September/04.
	unaListaDe2FechasDisponibles:= OrderedCollection with: September/02 with: September/03.
	unWig agregarDisponibilidad: unaListaDe3FechasDisponibles.
	unWig agregarDisponibilidad: unaListaDe2FechasDisponibles.
	
	self assert: (unWig diasPosiblesEn: intervalo).
	! !
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:32:22' prior: 50880839!
diasPosiblesEn: unIntervalo
	"|diasDisponibles|"
	
	^unIntervalo detect: [:unaFecha| self estaDisponible: unaFecha].! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:32:23'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:32:23'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:32:23'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:32:23'!
ERROR!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:32:23'!
ERROR!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:32:32'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:32:32'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:32:32'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:32:32'!
ERROR!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:32:32'!
ERROR!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:33:32' prior: 50881106!
diasPosiblesEn: unIntervalo
	"|diasDisponibles|"
	
	^unIntervalo select: [:unaFecha| self estaDisponible: unaFecha].! !

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:33:34'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:33:34'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:33:34'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:33:34'!
ERROR!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:33:34'!
ERROR!
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:34:20' prior: 50881083!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaListaDe3FechasDisponibles unaListaDe2FechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo := September/02.
	intervalo:= OrderedCollection with: fechaIntervalo.
	
	
	unaListaDe3FechasDisponibles:= OrderedCollection with: September/02 with: September/03 with: September/04.
	unaListaDe2FechasDisponibles:= OrderedCollection with: September/02 with: September/03.
	unWig agregarDisponibilidad: unaListaDe3FechasDisponibles.
	unWig agregarDisponibilidad: unaListaDe2FechasDisponibles.
	
	self assert: fechaIntervalo equals: (unWig diasPosiblesEn: intervalo).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:34:21'!
FAILURE!
!WhenIsGood methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:34:55'!
primerDiaPosibleEn: unIntervalo
	"|diasDisponibles|"
	
	^unIntervalo detect: [:unaFecha| self estaDisponible: unaFecha].! !
!WIGTest methodsFor: 'as yet unclassified' stamp: 'LB 9/2/2021 19:36:03' prior: 50881166!
test04WIGDiasPosiblesAlComienzoEsVacio
	|unWig intervalo fechaIntervalo unaListaDe3FechasDisponibles unaListaDe2FechasDisponibles |
	unWig := WhenIsGood new.
	
	fechaIntervalo := September/02.
	intervalo := OrderedCollection with: fechaIntervalo.
	
	
	unaListaDe3FechasDisponibles:= OrderedCollection with: September/02 with: September/03 with: September/04.
	unaListaDe2FechasDisponibles:= OrderedCollection with: September/02 with: September/03.
	unWig agregarDisponibilidad: unaListaDe3FechasDisponibles.
	unWig agregarDisponibilidad: unaListaDe2FechasDisponibles.
	
	self assert: intervalo equals: (unWig diasPosiblesEn: intervalo).
	! !

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:36:06'!
PASSED!

!testRun: #WIGTest #test01WIGSinParticipantesalInicio stamp: 'LB 9/2/2021 19:36:06'!
PASSED!

!testRun: #WIGTest #test02WIGAgregaParticipantes stamp: 'LB 9/2/2021 19:36:06'!
PASSED!

!testRun: #WIGTest #test03WIGConUnaFechaDisponibleLaReconoceComoDisponible stamp: 'LB 9/2/2021 19:36:06'!
PASSED!

!testRun: #WIGTest #test04WIGDiasPosiblesAlComienzoEsVacio stamp: 'LB 9/2/2021 19:36:06'!
PASSED!

----SNAPSHOT----(2 September 2021 20:20:11) CuisUniversity-4532.image priorSource: 17463566!

----QUIT----(2 September 2021 20:32:35) CuisUniversity-4532.image priorSource: 17586769!

----STARTUP---- (6 September 2021 19:46:19) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Downloads/CodigoRepetido-Ejercicio.st----!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'LB 9/6/2021 21:30:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'LB 9/6/2021 21:30:24'!
PASSED!
!CustomerBookTest methodsFor: 'log' stamp: 'LB 9/6/2021 21:38:56'!
XXXX

	| millisecondsBeforeRunning millisecondsAfterRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	"customerBook addCustomerNamed: 'John Lennon'."
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.! !
!CustomerBookTest methodsFor: 'log' stamp: 'LB 9/6/2021 21:41:10'!
XXXX: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	"customerBook addCustomerNamed: 'John Lennon'."
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.! !

!methodRemoval: CustomerBookTest #XXXX stamp: 'LB 9/6/2021 21:43:56'!
XXXX

	| millisecondsBeforeRunning millisecondsAfterRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	"customerBook addCustomerNamed: 'John Lennon'."
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.!
!CustomerBookTest methodsFor: 'log' stamp: 'LB 9/6/2021 21:44:33' prior: 50881571!
XXXX: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LB 9/6/2021 21:48:15' prior: 50881283!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	self XXXX: [customerBook addCustomerNamed: 'John Lennon']	.
	"
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	"
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'log' stamp: 'LB 9/6/2021 21:48:45' prior: 50881593!
XXXX: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning! !

----SNAPSHOT----(6 September 2021 21:53:27) CuisUniversity-4532.image priorSource: 17586863!

----QUIT----(6 September 2021 23:32:12) CuisUniversity-4532.image priorSource: 17599453!

----STARTUP---- (9 September 2021 19:35:03) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Documents/2021-2c/14-Numeros/Pre-Numero-Exercise.st----!

Numero subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LB 9/9/2021 20:50:50'!
Object subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LB 9/9/2021 20:52:11'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

self class!
!Entero methodsFor: 'no messages' stamp: 'LB 9/9/2021 20:55:35' overrides: 50881807!
+ anAdder
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
		
	^ anAdder + self class with: value.! !

self class!
!Entero methodsFor: 'as yet unclassified' stamp: 'LB 9/9/2021 20:58:10' prior: 50882015 overrides: 50881807!
+ anAdder
	"(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ]."
		
	^ anAdder + self class with: value.! !

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LB 9/9/2021 21:00:41'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'no messages' stamp: 'LB 9/9/2021 21:01:20' overrides: 50881807!
+ anAdder! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'LB 9/9/2021 21:04:15' prior: 50882043 overrides: 50881807!
+ anAdder

	| newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:04:43'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:04:48'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:04:48'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'LB 9/9/2021 21:06:13' prior: 50881807!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	
	
	self error: 'Tipo de número no soportado'
	! !
!Entero methodsFor: 'as yet unclassified' stamp: 'LB 9/9/2021 21:06:25' prior: 50882024 overrides: 50882119!
+ anAdder
	"(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ]."
		
	^ anAdder integerValue + self class with: value.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'LB 9/9/2021 21:07:30' prior: 50882119!
+ anAdder 
	"
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	"
	self shouldBeImplemented.
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'arithmetic operations' stamp: 'LB 9/9/2021 21:09:46' prior: 50882147!
+ anAdder 
	"
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	"
	self subclassResponsibility .
	
	"self error: 'Tipo de número no soportado'"
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:09:58'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:09:58'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:09:58'!
ERROR!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:09:58'!
PASSED!

one + one!
!NumeroTest methodsFor: 'tests' stamp: 'LB 9/9/2021 21:11:48' prior: 50881681!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:11:48'!
ERROR!
!NumeroTest methodsFor: 'setup' stamp: 'LB 9/9/2021 21:14:50' prior: 50881761 overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Numero with: 4.
	five := Numero with: 5.
	eight := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	negativeOneHalf := Numero with: negativeOne over: two
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:14:56'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:14:56'!
FAILURE!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:14:56'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:14:56'!
FAILURE!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:14:56'!
ERROR!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:14:56'!
FAILURE!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:14:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:15:04'!
ERROR!
!NumeroTest methodsFor: 'setup' stamp: 'LB 9/9/2021 21:15:37' prior: 50882252 overrides: 16927572!
setUp

	zero := Numero with: 0.
	one := Numero with: 1.
	two := Numero with: 2.
	three:= Numero with: 3.
	four := Numero with: 4.
	five := Numero with: 5.
	eight := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	negativeOneHalf := Numero with: negativeOne over: two
	! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/24/2020 02:23:22' prior: 50882330 overrides: 16927572!
setUp

	zero := Numero with: 0.
	one := Numero with: 1.
	two := Numero with: 2.
	three:= Numero with: 3.
	four := Numero with: 4.
	five := Numero with: 5.
	eight := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	negativeOneHalf := Numero with: negativeOne over: two
	! !

!classRemoval: #Fraccion stamp: 'LB 9/9/2021 21:28:43'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'LB 9/9/2021 21:28:43'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'LB 9/9/2021 21:28:43'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'LB 9/9/2021 21:28:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/luisb/Documents/2021-2c/14-Numeros/Numero-Exercise.st----!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/9/2021 21:32:22'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:32:22'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:32:22'!
ERROR!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/9/2021 21:36:16'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:36:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:36:16'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:36:23'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:36:23'!
ERROR!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/9/2021 21:36:23'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'LB 9/9/2021 21:38:12' prior: 50882783 overrides: 50882712!
+ anAdder 
	
	^anAdder integerValue + self class with: value
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/9/2021 21:38:16'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/9/2021 21:38:16'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/9/2021 21:38:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/9/2021 21:38:16'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LB 9/9/2021 21:38:27' prior: 50883426 overrides: 50882712!
+ anAdder 
	
	^self class with: value + anAdder integerValue
! !

----QUIT----(9 September 2021 22:00:06) CuisUniversity-4532.image priorSource: 17599547!

----STARTUP---- (12 September 2021 10:09:52) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!

!Entero methodsFor: 'arithmetic operations' stamp: 'LB 9/12/2021 10:14:52' prior: 50883566 overrides: 50882712!
+ anAdder 
	(anAdder className = #Fraccion) ifTrue: [^anAdder integerValue + self class with: value]. 
	^self class with: value + anAdder integerValue
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/12/2021 10:14:57'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/12/2021 10:14:57'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/12/2021 10:14:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/12/2021 10:14:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/12/2021 10:14:58'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/12/2021 10:14:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/12/2021 10:14:58'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:15:00'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LB 9/12/2021 10:15:11' prior: 50883579 overrides: 50882712!
+ anAdder 
	(anAdder className = #Fraccion) ifTrue: [^anAdder + self class with: value]. 
	^self class with: value + anAdder integerValue
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/12/2021 10:15:12'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/12/2021 10:15:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/12/2021 10:15:12'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:15:14'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LB 9/12/2021 10:16:13' prior: 50883727 overrides: 50882712!
+ anAdder 
	(anAdder className = #Fraccion) ifTrue: [^anAdder + (self class with: value / (Entero with: 1))]. 
	^self class with: value + anAdder integerValue
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/12/2021 10:16:14'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/12/2021 10:16:14'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/12/2021 10:16:14'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:16:16'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:16:26'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LB 9/12/2021 10:17:07' prior: 50883874 overrides: 50882712!
+ anAdder 
	(anAdder className = #Fraccion) ifTrue: [^anAdder + ((self class with: value) / (Entero with: 1))]. 
	^self class with: value + anAdder integerValue
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LB 9/12/2021 10:17:10'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LB 9/12/2021 10:17:10'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LB 9/12/2021 10:17:10'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LB 9/12/2021 10:17:11'!
ERROR!

----STARTUP---- (13 September 2021 17:17:32) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----QUIT----(13 September 2021 20:11:37) CuisUniversity-4532.image priorSource: 17661440!

----STARTUP---- (16 September 2021 09:51:20) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'LB 9/16/2021 09:51:39'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'LB 9/16/2021 09:51:40'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'LB 9/16/2021 09:51:40'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'LB 9/16/2021 09:51:40'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/luisb/Downloads/inge1-1c-2021-master/14-Numeros/Numero-Exercise.st----!

----STARTUP---- (16 September 2021 18:37:36) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


----End fileIn of /home/luisb/Downloads/Numero-Solution-2.3.st----!

----End fileIn of /home/luisb/Documents/2021-2c/15-Stack/Stack-Exercise.st----!
!OOStack methodsFor: 'nil' stamp: 'LB 9/16/2021 20:31:34'!
isEmpty
	^true! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:31:39'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:31:39'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:31:39'!
ERROR!

Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LB 9/16/2021 20:33:03'!
Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:33:26' prior: 50884576!
isEmpty
	^elements isEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:33:54'!
push
	^1! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:35:51' overrides: 16896425!
initialize! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:36:11' prior: 50884635 overrides: 16896425!
initialize
	elements := OrderedCollection new! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:36:21'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:36:58'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:36:58'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:36:58'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:36:58'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:37:04' prior: 50884639 overrides: 16896425!
initialize
	elements := OrderedCollection new! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:37:49'!
push: anElement
	^elements push anElement! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:37:52' prior: 50884687!
push: anElement
	^elements push: anElement! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:37:55'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:38:47' prior: 50884692!
push: anElement
	^elements add: anElement! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:38:51'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:38:51'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:38:51'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:38:51'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:38:51'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:40:35'!
pup
	^elements removeFirst! !

!methodRemoval: OOStack #push stamp: 'LB 9/16/2021 20:40:43'!
push
	^1!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:40:57'!
pop
	^elements removeFirst! !

!methodRemoval: OOStack #pup stamp: 'LB 9/16/2021 20:40:57'!
pup
	^elements removeFirst!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:41:00'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:41:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:41:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:41:00'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:41:00'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:41:00'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:41:00'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:41:00'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:41:00'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:41:00'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:41:00'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:41:25' prior: 50884746!
pop
	^elements removeLast! !

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:41:27'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:41:27'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:41:27'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:41:27'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:41:27'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:41:27'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:41:27'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:41:27'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:41:27'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:41:27'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:41:27'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:42:49'!
top
	^elements first! !

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:42:54'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:42:54'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:42:54'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:42:54'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:42:54'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:43:25' prior: 50884789!
pop
	^elements removeFirst! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:43:26'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:43:40' prior: 50884868!
pop
	^elements removeLast! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:43:42'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:43:53' prior: 50884875!
pop
	^elements removeFirst! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:43:55'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:44:22' prior: 50884828!
top
	^elements last! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:44:23'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:44:35' prior: 50884882!
pop
	^elements removeLast! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:44:36'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:45:11'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:45:25' overrides: 16880927!
size
	^elements size! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:45:27'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:45:27'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:45:27'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:45:27'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:46:56' prior: 50884896!
pop
	(elements isEmpty) ifTrue:[OOStack stackEmptyErrorDescription ].
	^elements removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:47:08' prior: 50884947!
pop
	(elements isEmpty) ifTrue:[OOStack stackEmptyErrorDescription ].
	^elements removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:47:10'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:47:11'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:47:11'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:47:11'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:47:11'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:47:11'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:47:11'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:47:11'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:47:11'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:47:11'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:47:36' prior: 50884953!
pop
	(elements isEmpty) ifTrue:[^OOStack stackEmptyErrorDescription ].
	^elements removeLast.! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:47:38'!
FAILURE!

OOStack stackEmptyErrorDescription!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:49:43'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:51:32' prior: 50884992!
pop
	(elements isEmpty) ifTrue:[OOStack stackEmptyErrorDescription ].
	^elements removeLast.! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:51:33'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:52:06'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 20:54:04' prior: 50885007!
pop
	(elements isEmpty) ifTrue:["Error: this collection is empty"].
	^elements removeLast.! !
!OOStack class methodsFor: 'error descriptions' stamp: 'LB 9/16/2021 20:54:21' prior: 50884557!
stackEmptyErrorDescription
	
	^ 'Error: this collection is empty'! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:54:31'!
FAILURE!

anError messageText!
!OOStack class methodsFor: 'error descriptions' stamp: 'LB 9/16/2021 20:54:57' prior: 50885026!
stackEmptyErrorDescription
	
	^ 'this collection is empty'! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 20:54:59'!
PASSED!

OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmpty category: 'Stack-Exercise' stamp: 'LB 9/16/2021 21:04:00'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'LB 9/16/2021 21:04:12'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:05:08' prior: 50885020!
pop
	elements executeWhenEmpty: ["Error: this collection is empty"].
	^elements removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:05:25'!
executeWhenEmpty: aBlock! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:05:29' overrides: 50885106!
executeWhenEmpty: aBlock! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:05:29' overrides: 50885106!
executeWhenEmpty: aBlock! !

!methodRemoval: OOStack #executeWhenEmpty: stamp: 'LB 9/16/2021 21:05:29'!
executeWhenEmpty: aBlock!
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:06:08' prior: 50885110!
executeWhenEmpty: aBlock
	^aBlock value! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:06:29'!
executeIfEmpty: aBlock! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:06:29'!
executeIfEmpty: aBlock
	^aBlock value! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:06:29' prior: 50885100!
pop
	elements executeIfEmpty: ["Error: this collection is empty"].
	^elements removeLast.! !

!methodRemoval: OOStackNotEmpty #executeWhenEmpty: stamp: 'LB 9/16/2021 21:06:29'!
executeWhenEmpty: aBlock!

!methodRemoval: OOStackEmpty #executeWhenEmpty: stamp: 'LB 9/16/2021 21:06:29'!
executeWhenEmpty: aBlock
	^aBlock value!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 21:06:43'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:07:00' prior: 50885136!
pop
	self executeIfEmpty: ["Error: this collection is empty"].
	^elements removeLast.! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:08:54' overrides: 50885153!
pop
	self executeIfEmpty: ["Error: this collection is empty"].
	^elements removeLast.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:08:54' overrides: 50885153!
pop
	self executeIfEmpty: ["Error: this collection is empty"].
	^elements removeLast.! !

!methodRemoval: OOStack #pop stamp: 'LB 9/16/2021 21:08:54'!
pop
	self executeIfEmpty: ["Error: this collection is empty"].
	^elements removeLast.!
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:09:04' prior: 50885165!
pop
	^elements removeLast.! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:09:57' prior: 50885159!
pop
	self stackEmptyErrorDescription.! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:10:02' prior: 50885180!
pop
	self class stackEmptyErrorDescription.! !

!methodRemoval: OOStackNotEmpty #executeIfEmpty: stamp: 'LB 9/16/2021 21:10:09'!
executeIfEmpty: aBlock!

!methodRemoval: OOStackEmpty #executeIfEmpty: stamp: 'LB 9/16/2021 21:10:16'!
executeIfEmpty: aBlock
	^aBlock value!
!OOStackTest methodsFor: 'test' stamp: 'LB 9/16/2021 21:10:28' prior: 50884491!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 21:10:29'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:10:48'!
pop
	^self subclassResponsibility .! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 21:10:49'!
FAILURE!
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'LB 9/16/2021 21:11:35' prior: 50885185 overrides: 50885211!
pop
	OOStack stackEmptyErrorDescription.! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LB 9/16/2021 21:11:39'!
FAILURE!

anError messageText!

----QUIT----(16 September 2021 22:18:47) CuisUniversity-4532.image priorSource: 17661651!

----STARTUP---- (19 September 2021 15:30:29) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'LB 9/19/2021 16:00:44'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackNotEmpty stamp: 'LB 9/19/2021 16:00:44'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackEmpty stamp: 'LB 9/19/2021 16:00:45'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'LB 9/19/2021 16:00:45'!
Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'LB 9/19/2021 16:00:45'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'LB 9/19/2021 16:00:46'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/luisb/Downloads/inge1-1c-2021-master/15-Stack/Stack-Exercise.st----!

----QUIT----(19 September 2021 19:06:05) CuisUniversity-4532.image priorSource: 17714482!

----STARTUP---- (21 September 2021 12:50:27) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'LB 9/21/2021 12:50:44'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-2.3'!

!classRemoval: #Entero stamp: 'LB 9/21/2021 12:50:44'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-2.3'!

!classRemoval: #Numero stamp: 'LB 9/21/2021 12:50:44'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-2.3'!

!classRemoval: #FibonacciCalculator stamp: 'LB 9/21/2021 12:50:45'!
Object subclass: #FibonacciCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-2.3'!

!classRemoval: #NumeroTest stamp: 'LB 9/21/2021 12:50:45'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two three four five eight oneFifth oneHalf twoFifth twoTwentyfifth fiveHalfs negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-2.3'!

----End fileIn of /home/luisb/Documents/Inge1-Group/14-Numeros/Numero-Exercise.st----!

----QUIT----(21 September 2021 13:00:21) CuisUniversity-4532.image priorSource: 17735665!

----STARTUP---- (27 September 2021 18:11:46) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


TestCase subclass: #TestX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!

!classDefinition: #TestX category: 'HolidayCalendar' stamp: 'LB 9/27/2021 18:16:26'!
TestCase subclass: #TestX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!TestX methodsFor: 'nil' stamp: 'LB 9/27/2021 18:17:13'!
test01! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:17:34' prior: 50886880!
test01
	
	! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:17:34'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:17:34'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:17:44'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:17:44'!
PASSED!

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'LB 9/27/2021 18:21:48'!
Object subclass: #HolidayCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:21:40' prior: 50886884!
test01
	
	| aSunday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := September/26/2021.
	
	self assert: (holidayCalendar isHoliday: aSunday)! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:21:56'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:22:07'!
isHoliday: aFixedGregorianDate 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:22:16' prior: 50886913!
isHoliday: aFixedGregorianDate 
	^true.! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:22:23'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:22:23'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:22:28' prior: 50886903!
test01
	
	| aSunday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := September/26/2021.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:25:45'!
test02
	
	| aSunday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := September/26/2021.
	
	self deny: (holidayCalendar isHoliday: aSunday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:26:25' prior: 50886936!
test02
	
	| aMonday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aMonday := September/26/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday).! !

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:26:26'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:27:11' prior: 50886919!
isHoliday: aFixedGregorianDate 
	
	^aFixedGregorianDate day = Sunday.! !

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:27:12'!
FAILURE!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:27:17'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:27:58' prior: 50886955!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = Sunday.! !

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:28:31'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:28:47' prior: 50886944!
test02
	
	| aMonday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aMonday := September/27/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday).! !

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:28:47'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:28:47'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:28:47'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:28:54'!
test03
	
	| aMonday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aMonday := September/27/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:31:21' prior: 50886987!
test03
	
	| aSaturday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/26/2021.
	
	self deny: (holidayCalendar isHoliday: aSaturday).! !

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:31:22'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:31:38' prior: 50886995!
test03
	
	| aSaturday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/26/2021.
	
	self assert: (holidayCalendar isHoliday: aSaturday).! !

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:31:39'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:31:39'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:31:39'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:31:39'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:32:53' prior: 50887006!
test03
	
	| aSaturday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	
	self assert: (holidayCalendar isHoliday: aSaturday).! !

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:32:54'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:33:54' prior: 50886965!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = Sunday or: [aPotentialHoliday day = Saturday].! !

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:35:21'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:35:21'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:35:21'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:35:21'!
PASSED!

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'LB 9/27/2021 18:38:20'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'weekDayIsHoliday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:38:16' prior: 50887034!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = weekDayIsHoliday.! !

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'LB 9/27/2021 18:38:28'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'weekDayHoliday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:38:28' prior: 50887057!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = weekDayHoliday.! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:38:36'!
FAILURE!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:38:36'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:38:36'!
FAILURE!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:38:38'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:39:20' prior: 50886928!
test01
	
	| aSunday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:39:25'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:39:33'!
markWeekDayAsHoliday: aGregorianDay 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:39:39' prior: 50887097!
markWeekDayAsHoliday: aHoliday 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:39:55' prior: 50887103!
markWeekDayAsHoliday: aHoliday 
	weekDayHoliday := Sunday.! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:39:57'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:39:57'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:39:57'!
FAILURE!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:39:57'!
FAILURE!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:40:01'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:40:01'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:40:01'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:40:01'!
FAILURE!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:40:01'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:40:26' prior: 50887023!
test03
	
	| aSaturday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).! !

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:40:27'!
FAILURE!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:40:43'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:41:41'!
test04
	
	| aSaturday holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).! !

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:42:00'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:42:44' overrides: 16896425!
initialize
	weekDayHoliday := OrderedCollection new.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:42:53' prior: 50887071!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday add: weekDayHoliday.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:43:08' prior: 50887168!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday includes: weekDayHoliday day.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:43:20' prior: 50887109!
markWeekDayAsHoliday: aHoliday 
	weekDayHoliday := aHoliday.! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:43:23'!
ERROR!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:43:23'!
ERROR!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:43:23'!
ERROR!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:43:23'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:43:43' prior: 50887180!
markWeekDayAsHoliday: aHoliday 
	weekDayHoliday add: aHoliday.! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:43:44'!
ERROR!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:43:44'!
ERROR!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:43:44'!
ERROR!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:43:44'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:44:06' prior: 50887174!
isHoliday: aPotentialHoliday 
	
	^weekDayHoliday includes: aPotentialHoliday day.! !

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:44:07'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:44:07'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:44:07'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:44:07'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:44:29'!
test05
	
	| aSaturday holidayCalendar aSunday aTuesday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	aTuesday := September/28/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:44:53' prior: 50887147!
test04
	
	| aSaturday holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:44:55' prior: 50887236!
test04
	
	| aSaturday holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:44:57'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:44:57'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:44:57'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:44:57'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:44:57'!
PASSED!

!testRun: #TestX #test05 stamp: 'LB 9/27/2021 18:44:57'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:45:30' prior: 50887222!
test05
	
	| aSaturday holidayCalendar aSunday aTuesday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	aTuesday := September/28/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	holidayCalendar markWeekDayAsHoliday: Tuesday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday ).
	self assert: (holidayCalendar isHoliday: aTuesday ).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:45:32' prior: 50887278!
test05
	
	| aSaturday holidayCalendar aSunday aTuesday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	aTuesday := September/28/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	holidayCalendar markWeekDayAsHoliday: Tuesday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday ).
	self assert: (holidayCalendar isHoliday: aTuesday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 18:45:36' prior: 50887297!
test05
	
	| aSaturday holidayCalendar aSunday aTuesday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	aTuesday := September/28/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	holidayCalendar markWeekDayAsHoliday: Tuesday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).
	self assert: (holidayCalendar isHoliday: aTuesday).! !

!testRun: #TestX #test05 stamp: 'LB 9/27/2021 18:45:37'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:45:37'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:45:37'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:45:37'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:45:37'!
PASSED!

!testRun: #TestX #test05 stamp: 'LB 9/27/2021 18:45:37'!
PASSED!

!testRun: #TestX #test05 stamp: 'LB 9/27/2021 18:47:29'!
PASSED!

!testRun: #TestX #test01 stamp: 'LB 9/27/2021 18:47:29'!
PASSED!

!testRun: #TestX #test02 stamp: 'LB 9/27/2021 18:47:29'!
PASSED!

!testRun: #TestX #test03 stamp: 'LB 9/27/2021 18:47:29'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 18:47:29'!
PASSED!

!testRun: #TestX #test05 stamp: 'LB 9/27/2021 18:47:29'!
PASSED!

!methodRemoval: TestX #test05 stamp: 'LB 9/27/2021 18:51:09'!
test05
	
	| aSaturday holidayCalendar aSunday aTuesday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	aTuesday := September/28/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	holidayCalendar markWeekDayAsHoliday: Tuesday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).
	self assert: (holidayCalendar isHoliday: aTuesday).!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:00:54'!
test01AnyWeekdayCanBeHoliday
	
	| aSunday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

!methodRemoval: TestX #test01 stamp: 'LB 9/27/2021 19:00:54'!
test01
	
	| aSunday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday).!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:01:43'!
test02CanHaveNoWeekdayHolidays
	
	| aMonday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aMonday := September/27/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday).! !

!methodRemoval: TestX #test02 stamp: 'LB 9/27/2021 19:01:43'!
test02
	
	| aMonday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aMonday := September/27/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday).!

!methodRemoval: TestX #test03 stamp: 'LB 9/27/2021 19:03:41'!
test03
	
	| aSaturday holidayCalendar |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:03:58'!
test03MoreThanOneWeekdayCanBeHoliday
	
	| aSaturday holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).! !

!methodRemoval: TestX #test04 stamp: 'LB 9/27/2021 19:03:58'!
test04
	
	| aSaturday holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:05:12' prior: 50887421!
test03MoreThanOneWeekdayCanBeHoliday
	
	| holidayCalendar aNavidad |
	
	holidayCalendar := HolidayCalendar new.
	aNavidad := December/25/2021.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aNavidad).! !

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:05:17'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:05:47' prior: 50887450!
test03MoreThanOneWeekdayCanBeHoliday
	
	| holidayCalendar aNavidad |
	
	holidayCalendar := HolidayCalendar new.
	aNavidad := December/25/2021.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aNavidad).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:06:04' prior: 50887464!
test03MoreThanOneWeekdayCanBeHoliday
	
	| aSaturday holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := September/25/2021.
	aSunday := 	September/26/2021.
	holidayCalendar markWeekDayAsHoliday: Saturday.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday).
	self assert: (holidayCalendar isHoliday: aSunday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:06:15'!
test04
		
	| holidayCalendar aNavidad |
	
	holidayCalendar := HolidayCalendar new.
	aNavidad := December/25/2021.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aNavidad).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:06:27' prior: 50887490!
test04
		
	| holidayCalendar aNavidad |
	
	holidayCalendar := HolidayCalendar new.
	aNavidad := December/25/2021.
	holidayCalendar markWeekDayAsHoliday: December /25.
	
	self assert: (holidayCalendar isHoliday: aNavidad).! !

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'LB 9/27/2021 19:07:37'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'weekDayHoliday monthDayholidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:07:33' prior: 50887208!
isHoliday: aPotentialHoliday 
	
	^(weekDayHoliday includes: aPotentialHoliday day) or:
	[monthDayholidays includes: aPotentialHoliday dayOfMonth ].! !

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'LB 9/27/2021 19:07:44'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'weekDayHoliday monthDayHolidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:07:44' prior: 50887519!
isHoliday: aPotentialHoliday 
	
	^(weekDayHoliday includes: aPotentialHoliday day) or:
	[monthDayHolidays includes: aPotentialHoliday dayOfMonth ].! !

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:08:02'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:08:02'!
ERROR!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:08:02'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:08:02'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:08:42'!
isWeekdayHoliday: aPotentialHoliday

	^ weekDayHoliday includes: aPotentialHoliday day! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:08:42' prior: 50887536!
isHoliday: aPotentialHoliday 
	
	^(self isWeekdayHoliday: aPotentialHoliday) or:
	[monthDayHolidays includes: aPotentialHoliday dayOfMonth ].! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:09:05'!
isMonthDayHoliday: aPotentialHoliday

	^ monthDayHolidays includes: aPotentialHoliday dayOfMonth! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:09:05' prior: 50887560!
isHoliday: aPotentialHoliday 
	
	^(self isWeekdayHoliday: aPotentialHoliday) or:
	[self isMonthDayHoliday: aPotentialHoliday ].! !

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:09:12'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:09:46' prior: 50887163 overrides: 16896425!
initialize
	weekDayHoliday := OrderedCollection new.
	monthDayHolidays := OrderedCollection new.! !

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:09:51'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:09:51'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:09:51'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:09:51'!
FAILURE!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:09:51'!
FAILURE!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:09:56'!
FAILURE!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:09:56'!
FAILURE!

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:10:16'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:10:16'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:10:16'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:10:16'!
FAILURE!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:10:16'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:11:20'!
markMonthDayAsholiday: aHoliday 
	monthDayHolidays add: aHoliday.! !

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:11:21'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:11:21'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:11:21'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:11:21'!
FAILURE!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:11:21'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:11:32' prior: 50887500!
test04
		
	| holidayCalendar aNavidad |
	
	holidayCalendar := HolidayCalendar new.
	aNavidad := December/25/2021.
	holidayCalendar markMonthDayAsholiday: December /25.
	
	self assert: (holidayCalendar isHoliday: aNavidad).! !

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:11:33'!
PASSED!

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:11:33'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:11:33'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:11:33'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:11:33'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:13:43'!
test06
		
	| holidayCalendar aDate anAnotherDate |
	
	holidayCalendar := HolidayCalendar new.
	aDate := December/25/2021.
	anAnotherDate := December/26/2021.
	holidayCalendar markDateAsHoliday December/25/2021.
	holidayCalendar markDateAsHoliday December/26/2021.
	
	self assert: (holidayCalendar isHoliday: aDate).
	self assert: (holidayCalendar isHoliday: anAnotherDate).! !

!testRun: #TestX #test06 stamp: 'LB 9/27/2021 19:13:51'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:14:02'!
markDateAsHoliday
	self shouldBeImplemented.! !
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:14:19' prior: 50887663!
test06
		
	| holidayCalendar aDate anAnotherDate |
	
	holidayCalendar := HolidayCalendar new.
	aDate := December/25/2021.
	anAnotherDate := December/26/2021.
	holidayCalendar markDateAsHoliday: December/25/2021.
	holidayCalendar markDateAsHoliday: December/26/2021.
	
	self assert: (holidayCalendar isHoliday: aDate).
	self assert: (holidayCalendar isHoliday: anAnotherDate).! !

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'LB 9/27/2021 19:15:38'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'weekDayHoliday monthDayHolidays dateHoliday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:15:36'!
markDateAsHoliday: aHoliday 
	dateHoliday add: aHoliday.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:15:54' prior: 50887586 overrides: 16896425!
initialize
	weekDayHoliday := OrderedCollection new.
	monthDayHolidays := OrderedCollection new.
	dateHoliday := OrderedCollection new.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:16:13'!
isDateHoliday: aPotentialHoliday

	^ dateHoliday includes: aPotentialHoliday! !

!testRun: #TestX #test06 stamp: 'LB 9/27/2021 19:16:16'!
FAILURE!

!testRun: #TestX #test06 stamp: 'LB 9/27/2021 19:16:16'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:17:07' prior: 50887575!
isHoliday: aPotentialHoliday 
	
	^((self isWeekdayHoliday: aPotentialHoliday) or:
	[self isMonthDayHoliday: aPotentialHoliday ]) or:
	[self isDateHoliday: aPotentialHoliday ].! !

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:17:07'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:17:07'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:17:07'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:17:07'!
PASSED!

!testRun: #TestX #test06 stamp: 'LB 9/27/2021 19:17:07'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:24:59'!
test07
		
	| holidayCalendar aDate anAnotherDate |
	
	holidayCalendar := HolidayCalendar new.
	aDate := December/25/2021.
	anAnotherDate := December/26/2021.
	holidayCalendar markDateAsHoliday: December/25/2021.
	holidayCalendar markDateAsHoliday: December/26/2021.
	
	self assert: (holidayCalendar isHoliday: aDate).
	self assert: (holidayCalendar isHoliday: anAnotherDate).! !

!testRun: #TestX #test07 stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!testRun: #TestX #test06 stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!testRun: #TestX #test07 stamp: 'LB 9/27/2021 19:24:59'!
PASSED!

!methodRemoval: TestX #test07 stamp: 'LB 9/27/2021 19:25:03'!
test07
		
	| holidayCalendar aDate anAnotherDate |
	
	holidayCalendar := HolidayCalendar new.
	aDate := December/25/2021.
	anAnotherDate := December/26/2021.
	holidayCalendar markDateAsHoliday: December/25/2021.
	holidayCalendar markDateAsHoliday: December/26/2021.
	
	self assert: (holidayCalendar isHoliday: aDate).
	self assert: (holidayCalendar isHoliday: anAnotherDate).!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 19:30:15' prior: 50887554!
isWeekdayHoliday: aPotentialHoliday

	^ weekDayHoliday includes: aPotentialHoliday day! !

!testRun: #TestX #test01AnyWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:30:15'!
PASSED!

!testRun: #TestX #test02CanHaveNoWeekdayHolidays stamp: 'LB 9/27/2021 19:30:15'!
PASSED!

!testRun: #TestX #test03MoreThanOneWeekdayCanBeHoliday stamp: 'LB 9/27/2021 19:30:15'!
PASSED!

!testRun: #TestX #test04 stamp: 'LB 9/27/2021 19:30:15'!
PASSED!

!testRun: #TestX #test06 stamp: 'LB 9/27/2021 19:30:15'!
PASSED!

TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13Test category: 'Rot13' stamp: 'LB 9/27/2021 20:26:40'!
TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!
!Rot13Test methodsFor: 'nil' stamp: 'LB 9/27/2021 20:26:49'!
test01! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 20:30:50' prior: 50887827!
test01
	self assert: '' equals: '' asRot13.! !

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:34:06'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:35:04'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:36:15' prior: 50887837!
asRot13
	^''.! !

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:36:28'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:36:28'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 20:40:06'!
test02
	self assert: '#' equals: '' asRot13.! !

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:40:07'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:42:44' prior: 50887841!
asRot13
	('#' = self) ifTrue: [^'#']
	ifFalse: [^''].! !

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:42:48'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 20:42:57' prior: 50887849!
test02
	self assert: '#' equals: '#' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 20:42:59' prior: 50887863!
test02
	self assert: '#' equals: '#' asRot13.! !

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:42:59'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:42:59'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:42:59'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 20:48:14'!
test03
	self assert: '!!' equals: '!!' asRot13.! !

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:48:15'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:49:46' prior: 50887856!
asRot13
	('#' = self) ifTrue: [^'#']
	ifFalse: [
		('!!' = self) ifTrue:[^'!!']
			ifFalse: [^'']].! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 20:49:47'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:49:49'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:49:49'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:49:49'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:49:49'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:50:48' prior: 50887886!
asRot13
	('#' = self) ifTrue: [^'#']
	ifFalse: [
		('!!' = self) ifTrue:[^'!!']
			ifFalse: [^'']].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:53:29' prior: 50887956!
asRot13
	('' = self) ifTrue: [^self]
	ifFalse: [^''].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:53:45' prior: 50887962!
asRot13
	('' = self) ifFrue: [^self].
	^''.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:53:52' prior: 50887967!
asRot13
	('' = self) ifFalse: [^self].
	^''.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 20:53:53'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:53:56'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:53:56'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:53:56'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:53:56'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:54:27' prior: 50887971!
asRot13
	('' = self) ifTrue: [^''].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 20:54:27'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:54:29'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:54:29'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:54:29'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:54:29'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 20:56:19'!
test04
	self assert: 'n' equals: 'a' asRot13.! !

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 20:56:21'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:57:23' prior: 50888039!
asRot13
	('' = self) ifTrue: [^''].
	^self.! !

self + 13!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 20:58:32' prior: 50888114!
asRot13
	('' = self) ifTrue: [^''].
	('a' = self) ifTrue: [^'n'].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 20:58:33'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 20:58:35'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:58:35'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:58:35'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:58:35'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 20:58:35'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 20:58:45'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 20:58:45'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 20:58:45'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 20:58:45'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 20:58:45'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:04:08'!
test05
	self assert: 'g' equals: 't' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:04:23' prior: 50888119!
asRot13
	('' = self) ifTrue: [^''].
	('a' = self) ifTrue: [^'n']. 
	('g' = self) ifTrue: [^'t']. 
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:04:25'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:04:27'!
FAILURE!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:04:39'!
FAILURE!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:05:51'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:06:10' prior: 50888201!
test05
	self assert: 't' equals: 'g' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:11:26' prior: 50888205!
asRot13
	('' = self) ifTrue: [^''].
	('a' = self) ifTrue: [^'n']. 
	('g' = self) ifTrue: [^'t']. 
	('z' = self) ifTrue: [^'m']. 
	^self.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:11:33' prior: 50888277!
asRot13
	('' = self) ifTrue: [^''].
	('a' = self) ifTrue: [^'n']. 
	('g' = self) ifTrue: [^'t']. 
	('m' = self) ifTrue: [^'z']. 
	^self.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:11:39' prior: 50888273!
test05
	self assert: 'z' equals: 'm' asRot13.! !

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:11:39'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:11:39'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:11:39'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:11:39'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:11:39'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:11:39'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:12:02' prior: 50888292!
test05
	self assert: 't' equals: 'g' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:12:09'!
test06
	self assert: 'z' equals: 'm' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:19:48' prior: 50888284!
asRot13
	('' = self) ifTrue: [^''].
	^Character asciiValue: (self first asciiValue + 13) asString.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:19:51'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:19:53'!
ERROR!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:20:13'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:20:47' prior: 50888318!
asRot13
	('' = self) ifTrue: [^''].
	^(Character asciiValue: self first asciiValue + 13) asString.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:20:53'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:20:57'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:20:57'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:20:57'!
FAILURE!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:20:57'!
FAILURE!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:20:57'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:20:57'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:20:57'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:21:00'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:22:58' prior: 50888438!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue < $m asciiValue) ifTrue: [.
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	^self.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:23:44' prior: 50888517!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue ) ifTrue: [.
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	^self.! !

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:23:45'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:25:46' prior: 50888525!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	^self.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:27:59'!
test07
	self assert: 'n' equals: 'a' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:28:00'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:28:14' prior: 50888558!
test07
	self assert: 'n' equals: 'b' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:28:15'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:28:55' prior: 50888580!
test07
	self assert: 'a' equals: 'n' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:28:56'!
FAILURE!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:29:26'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:29:42' prior: 50888587!
test07
	self assert: 'n' equals: 'a' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:29:42'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:30:19' prior: 50888549!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self = 'n') ifTrue: [^'a'].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:30:21'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:30:21'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:30:23' prior: 50888596!
test07
	self assert: 'a' equals: 'n' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:30:23'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:31:52'!
test08
	self assert: 'g' equals: 't' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:32:08' prior: 50888618!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self = 'n') ifTrue: [^'a'].
	(self = 't') ifTrue: [^'g'].
	^self.! !

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:32:10'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:32:31'!
test09
	self assert: 'm' equals: 'z' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:32:48' prior: 50888709!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self = 'n') ifTrue: [^'a'].
	(self = 't') ifTrue: [^'g'].
	(self = 'z') ifTrue: [^'m'].
	^self.! !

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:32:50'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:40:12' prior: 50888744!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:40:27'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:40:30'!
PASSED!

	self assert: 'm' equals: 'z' asRot13.!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:42:49'!
test10
	self assert: 'N' equals: 'A' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:43:24' prior: 50888778!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	self = 'A' ifTrue: [^'N'].
	^self.! !

!testRun: #Rot13Test #test10 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'LB 9/27/2021 21:43:25'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:46:15'!
test11
	self assert: 'G' equals: 'I' asRot13.! !

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:46:15'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:46:48' prior: 50888874!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	^self.! !

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:46:50'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:47:44'!
test12
	self assert: 'M' equals: 'Z' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:47:48' prior: 50888913!
test11
	self assert: 'G' equals: 'T' asRot13.! !

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:47:51'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:48:08' prior: 50888938!
test12
	self assert: 'Z' equals: 'M' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:48:23' prior: 50888943!
test11
	self assert: 'T' equals: 'G' asRot13.! !

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:48:25'!
FAILURE!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:48:25'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:48:40' prior: 50888920!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:48:40'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:48:42'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:48:45'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:50:17'!
test13
	self assert: 'M' equals: 'Z' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:50:33' prior: 50888990!
asRot13
	('' = self) ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].
	self = 'Z' ifTrue: [^'M'].
	^self.! !

!testRun: #Rot13Test #test13 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'LB 9/27/2021 21:50:35'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:53:44' prior: 50889122!
asRot13
	('' = self) ifTrue: [^''].
	(self first asLowercase asciiValue between:$a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asLowercase asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].
	self = 'Z' ifTrue: [^'M'].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:53:45'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:53:45'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:53:51' prior: 50889170!
asRot13
	('' = self) ifTrue: [^''].
	(self first asLowercase asciiValue between:$a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asLowercase asciiValue between: $n asciiValue and: $z asciiValue  )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	^self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:53:52'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:53:52'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:54:04' prior: 50889243!
asRot13
	('' = self) ifTrue: [^''].
	(self first asLowercase asciiValue between:$a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asLowercase asciiValue between:$n asciiValue and: $z asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	^self.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:54:29' prior: 50889312!
asRot13
	('' = self) ifTrue: [^''].
	(self first asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString.
	].
	(self first asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
	ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString.
	].
	^self.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'LB 9/27/2021 21:55:18'!
test14
	self assert: 'NZ' equals: 'AM' asRot13.! !

!testRun: #Rot13Test #test14 stamp: 'LB 9/27/2021 21:55:20'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:57:55' prior: 50889326!
asRot13
	('' = self) ifTrue: [^''].
	self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			^(Character asciiValue: self first asciiValue + 13) asString.
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			^(Character asciiValue: self first asciiValue - 13) asString.
		].
	].
	^self.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:58:06' prior: 50889347!
asRot13
	('' = self) ifTrue: [^''].
	self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			^(Character asciiValue: aChar asciiValue + 13) asString.
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			^(Character asciiValue: aChar asciiValue - 13) asString.
		].
	].
	^self.! !

!testRun: #Rot13Test #test14 stamp: 'LB 9/27/2021 21:58:08'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:58:31' prior: 50889362!
asRot13
	('' = self) ifTrue: [^''].
	self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13) asString.
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13) asString.
		].
	].
	^self.! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 21:59:01' prior: 50889379!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13) asString.
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13) asString.
		].
	].! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 21:59:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 21:59:02'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'LB 9/27/2021 21:59:05'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:00:59' prior: 50889394!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13) asString.
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13) asString.
		].
		^aChar
	].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:01:02' prior: 50889466!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13) asString.
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13) asString.
		].
		aChar
	].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:02:10' prior: 50889481!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13).
		].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13).
		].
		aChar
	].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:03:52' prior: 50889496!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13). ].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13). ].
			].
		
		aChar
	].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:04:06' prior: 50889510!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13). ].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13). ].
			].
		aChar
	].! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:04:49' prior: 50889527!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13). ].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13). ].
			]
	ifFalse: [aChar]
	]! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:04:51' prior: 50889544!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13). ].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13). ].
			]
	ifFalse: [aChar].
	]! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:07:19' prior: 50889561!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue + 13). ].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [
			(Character asciiValue: aChar asciiValue - 13). ].
			]
	ifFalse: [aChar].
	]! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:08:12' prior: 50889578!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue )
		ifTrue: [ (Character asciiValue: aChar asciiValue + 13). ].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue )
		ifTrue: [ (Character asciiValue: aChar asciiValue - 13). ].
			]
	ifFalse: [aChar].
	]! !
!String methodsFor: '*Rot13' stamp: 'LB 9/27/2021 22:10:03' prior: 50889595!
asRot13
	('' = self) ifTrue: [^''].
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue ) ifTrue:[
			aChar asLowercase <$n
		ifTrue: [ (Character asciiValue: aChar asciiValue + 13). ]
		ifFalse: [ (Character asciiValue: aChar asciiValue - 13). ].
			]
	ifFalse: [aChar].
	]! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LB 9/27/2021 22:10:04'!
PASSED!

----QUIT----(27 September 2021 22:37:04) CuisUniversity-4532.image priorSource: 17766794!

----STARTUP---- (30 September 2021 17:20:42) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


TestCase subclass: #TestRomans
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestRomans'!

!classDefinition: #TestRomans category: 'TestRomans' stamp: 'LB 9/30/2021 17:22:58'!
TestCase subclass: #TestRomans
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestRomans'!
!TestRomans methodsFor: 'nil' stamp: 'LB 9/30/2021 17:23:51'!
test01! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:27:46' prior: 50889697!
test01
	"1 asRoman -> 'I'"
	self assert: 'I' equals: 1 asRoman.! !

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:30:05'!
ERROR!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:31:03'!
asRoman
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:31:16' prior: 50889708!
asRoman
	'I'.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:31:19' prior: 50889712!
asRoman
	^'I'.! !

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:31:44'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:31:44'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:32:09' prior: 50889701!
test01
	self assert: 'I' equals: 1 asRoman.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:34:11'!
test02
	self assert: 'II' equals: 2 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:35:34' prior: 50889716!
asRoman
	(self = 1) ifTrue: [^'I'].
	^self.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:35:41' prior: 50889733!
asRoman
	(self = 1) ifTrue: [^'I'].
	^'II'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 17:35:56'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 17:35:56'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 17:35:56'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:35:59'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:35:59'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:35:59'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:36:35' prior: 50889738!
asRoman
	"(self = 1) ifTrue: [^'I']".
	^'I'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:36:37' prior: 50889728!
test02
	self assert: 'II' equals: 2 asRoman.! !

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:36:37'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:36:53' prior: 50889780!
asRoman
	(self = 1) ifTrue: [^'I'].
	^'II'.! !

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:37:09'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:37:09'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:37:09'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:41:16'!
test03
	self assert: 'III' equals: 3 asRoman.! !

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:41:17'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:41:34' prior: 50889792!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	^'II'.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:41:36' prior: 50889810!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	^'III'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 17:41:37'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 17:41:37'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 17:41:37'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:43:24'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:43:24'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:43:24'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:43:24'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:44:00'!
test04
	self assert: 'IV' equals: 4 asRoman.! !

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:44:02'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:44:28' prior: 50889815!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	^'IV'.! !

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:44:32'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:44:32'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:44:32'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:44:32'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:44:32'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:47:47'!
test05
	self assert: 'V' equals: 5 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:47:48' prior: 50889867!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	^'V'.! !

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:47:50'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:47:50'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:47:50'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:47:50'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:47:50'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:47:50'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:50:07' prior: 50889889!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'VI'].
	^'VII'.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:50:08' prior: 50889910!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'VI'].
	^'VI'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 17:50:09'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 17:50:09'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 17:50:09'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 17:50:09'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:50:13'!
test06
	self assert: 'VI' equals: 6 asRoman.! !

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 17:50:13'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:50:13'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:50:13'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:50:13'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:50:13'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:50:13'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 17:50:13'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:50:13'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:50:24' prior: 50889918!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	^'VI'.! !

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 17:50:26'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:51:55'!
test07
	self assert: 'VII' equals: 7 asRoman.! !

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 17:51:56'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:52:03' prior: 50889979!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	^'VII'.! !

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 17:52:04'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 17:53:46' prior: 50890010!
asRoman
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	^'VIII'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 17:53:59'!
test08
	self assert: 'VIII' equals: 8 asRoman.! !

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 17:54:00'!
PASSED!

 'I' timesRepeat: 3.!

 ['I'] timesRepeat: 3.!

 3 timesRepeat: ['I'].!

 3 timesRepeat: [^'I'].!

'I' + (self - 1) do: ['I'].!

'I' , (self - 1) do: [^'I'].!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:06:19' prior: 50890037!
asRoman
	String streamContents: [:stream | 1 to: 3 do: [:index | stream nextPut: $I ]].
	(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III'].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	^'VIII'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:06:20'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:06:20'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:06:20'!
PASSED!

String streamContents: [:stream | 1 to: 3 do: [:index | stream nextPut: $I ]].!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:06:37' prior: 50890077!
asRoman
	String streamContents: [:stream | 1 to: self do: [:index | stream nextPut: $I ]].
	"(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III']."
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	^'VIII'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:06:38'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:06:38'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:06:38'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:06:40'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:06:40'!
FAILURE!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:06:40'!
FAILURE!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:06:40'!
FAILURE!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:06:40'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:06:40'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:06:40'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:06:40'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:06:40'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:07:18' prior: 50890123!
asRoman
	
	"(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III']."
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	(self = 8) ifTrue: [^'VIII'].
	^String streamContents: [:stream | 1 to: self do: [:index | stream nextPut: $I ]].! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:07:19'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:07:19'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:07:19'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:07:21'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:07:47'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:07:47'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:07:47'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:07:49'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:08:48' prior: 50890187!
asRoman
	
	"(self = 1) ifTrue: [^'I'].
	(self = 2) ifTrue: [^'II'].
	(self = 3) ifTrue: [^'III']."
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	(self = 8) ifTrue: [^'VIII'].
	(self between: 1 and: 3) ifTrue: [
	^String streamContents: [:stream | 1 to: self do: [:index | stream nextPut: $I ]]. ].! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:08:49'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:08:49'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:08:49'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:08:51'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:15:34' prior: 50890303!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
	^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. ].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	(self = 8) ifTrue: [^'VIII'].
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:15:36'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:15:36'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:15:36'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:15:39'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:15:45' prior: 50890369!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
	^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	(self = 8) ifTrue: [^'VIII'].
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:15:50' prior: 50890432!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	(self = 8) ifTrue: [^'VIII'].
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:18:45' prior: 50890444!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	(self = 5) ifTrue: [^'V'].
	(self = 6) ifTrue: [^'VI'].
	(self = 7) ifTrue: [^'VII'].
	(self = 8) ifTrue: [^'VIII'].
	^'IX'.
	! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 18:18:46'!
test09
	self assert: 'IX' equals: 9 asRoman.! !

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:18:46'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:21:23' prior: 50890456!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self between: 5 and: 8) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:21:25'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:21:25'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:21:25'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:21:27'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:21:27'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:21:27'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:21:27'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:21:27'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:21:27'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:21:27'!
FAILURE!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:21:27'!
FAILURE!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:21:27'!
FAILURE!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:21:27'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:21:39' prior: 50890495!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self between: 5 and: 8) ifTrue: [
		^String streamContents: [:stream | 'V', self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:21:40'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:21:40'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:21:40'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:21:42'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:21:42'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:21:42'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:21:42'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:21:42'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:21:42'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:21:42'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:21:42'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:21:42'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:21:42'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:21:49' prior: 50890561!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self between: 5 and: 8) ifTrue: [
		^'V', String streamContents: [:stream |  self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:21:50'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:21:50'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:21:50'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:21:52'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:21:52'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:21:52'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:21:52'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:21:52'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:21:52'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:21:52'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:21:52'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:21:52'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:21:52'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:22:25' prior: 50890627!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self between: 5 and: 8) ifTrue: [
		^'V', String streamContents: [:stream | (self-5) timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:22:27' prior: 50890693!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self between: 5 and: 8) ifTrue: [
		^'V', String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]. 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:22:29'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:22:29'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:22:29'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:22:29'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:22:29'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:22:29'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:22:29'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:22:29'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:22:29'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:22:29'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:22:31'!
ERROR!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:23:01' prior: 50890705!
asRoman
	
	(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	].
	(self between: 5 and: 8) ifTrue: [
		^'V', (String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]). 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:23:03'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:23:03'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:23:03'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:23:05'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:30:53' prior: 50890742!
asRoman
	|x|
	"(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	]."
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		^self timesRepeat: [x := x append: $I ]
		].
	(self between: 5 and: 8) ifTrue: [
		^'V', (String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]). 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:30:55'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:30:55'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:30:55'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:30:57'!
ERROR!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:30:57'!
ERROR!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:30:57'!
ERROR!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:30:57'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:31:16' prior: 50890808!
asRoman
	|x|
	"(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	]."
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: $I ].
		^x
		].
	(self between: 5 and: 8) ifTrue: [
		^'V', (String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]). 
	].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:31:17'!
ERROR!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:31:17'!
ERROR!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:31:17'!
ERROR!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:31:17'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:32:19' prior: 50890877!
asRoman
	|x|
	"(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	]."
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: $I ].
		^x
		].
	"(self between: 5 and: 8) ifTrue: [
		^'V', (String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]). 
	]."
	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: $I ].
		^x
		].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:32:24'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:32:24'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:32:24'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:32:28'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:32:28'!
ERROR!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:32:28'!
ERROR!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:32:28'!
ERROR!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:32:28'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:32:28'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:32:28'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:32:28'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:32:28'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:32:28'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:32:31'!
ERROR!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:32:55' prior: 50890915!
asRoman
	|x|
	"(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	]."
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: $I ].
		^x.
		].
	"(self between: 5 and: 8) ifTrue: [
		^'V', (String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]). 
	]."
	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: $I ].
		^x.
		].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:32:58'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:32:58'!
ERROR!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:32:58'!
ERROR!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:32:58'!
ERROR!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:32:58'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:32:58'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:32:58'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:32:58'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:32:58'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:32:58'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:33:40' prior: 50890989!
asRoman
	|x|
	"(self between: 1 and: 3) ifTrue: [
		^String streamContents: [:stream | self timesRepeat: [stream nextPut: $I ]]. 
	]."
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		^x.
		].
	"(self between: 5 and: 8) ifTrue: [
		^'V', (String streamContents: [:stream | (self - 5) timesRepeat: [stream nextPut: $I ]]). 
	]."
	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		^x.
		].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:33:41'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:33:41'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:33:41'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:33:42'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:33:58' prior: 50891030!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		^x.
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		^x.
		].
	(self = 4) ifTrue: [^'IV'].
	^'IX'.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:35:21' prior: 50891103!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		^x.
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		^x.
		].
	(self = 4) ifTrue: [^'IV'].
	(self = 9) ifTrue: [^'IX'].
	^'X'.
	! !

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:35:23'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 18:35:35'!
test10
	self assert: 'X' equals: 10 asRoman.! !

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:35:36'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:39:18' prior: 50891114!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [^'IV'].
	(self = 9) ifTrue: [^'IX'].
	(self = 10) ifTrue: [^'X'].
	^x.
	! !

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:39:19'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:40:05' prior: 50891177!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x:='IV'].
	(self = 9) ifTrue: [x:='IX'].
	(self = 10) ifTrue: [x:='X'].
	^x.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:40:07'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:40:07'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 18:40:07'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:40:09'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:40:16' prior: 50891214!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x:='IV'].
	(self = 9) ifTrue: [x:='IX'].
	^x.
	! !

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:40:17'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:40:24' prior: 50891282!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x:='IV'].
	(self = 9) ifTrue: [x:='IX'].
	(self = 10) ifTrue: [x:='X'].
	^x.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:40:38' prior: 50891296!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	^x.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:42:53' prior: 50891309!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	^x.
	! !

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:42:54'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 18:46:30'!
test11
	self assert: 'X' equals: 10 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:46:41' prior: 50891322!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	^x.
	! !

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 18:46:42'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 18:49:57' prior: 50891359!
test11
	self assert: 'XI' equals: 11 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:50:14' prior: 50891364!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	^x.
	! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 18:50:17'!
test12
	self assert: 'XII' equals: 12 asRoman.! !

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 18:50:17'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 18:51:38' prior: 50891410!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 18:51:42'!
test13
	self assert: 'XIII' equals: 13 asRoman.! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 18:51:44'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:05:49'!
xxx: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: 'I'].
	^aString.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:06:43' prior: 50891458!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		x := self xxx:'V'.
		].

	(self between: 5 and: 8) ifTrue: [
		x := 'V'.
		(self-5) timesRepeat: [x := x append: 'I' ].
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:06:55' prior: 50891509!
xxx: aStringToBuild
	|aString|
	aString := aStringToBuild .
	(self - 5) timesRepeat: [aString := aString append: 'I'].
	^aString.
	! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 19:06:57'!
FAILURE!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 19:06:57'!
FAILURE!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 19:06:57'!
FAILURE!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:06:57'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:07:35' prior: 50891516!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ]
		].

	(self between: 5 and: 8) ifTrue: [
		x := self xxx:'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:07:36'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:09:49' prior: 50891570!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		"self timesRepeat: [x := x append: 'I' ]"
		x := self xxx:''.
		].

	(self between: 5 and: 8) ifTrue: [
		x := self xxx:'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 19:09:50'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 19:09:50'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 19:09:50'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 19:09:52'!
FAILURE!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 19:09:52'!
FAILURE!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 19:09:52'!
FAILURE!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:09:52'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:10:10' prior: 50891616!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ]
		].

	(self between: 5 and: 8) ifTrue: [
		x := self xxx:'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:10:11' prior: 50891694!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x := x append: 'I' ].
		].

	(self between: 5 and: 8) ifTrue: [
		x := self xxx:'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:47:41' prior: 50891532!
xxx: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: 'I'].
	^aString.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:48:14' prior: 50891709!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		x := self xxx:''.
		].

	(self between: 5 and: 8) ifTrue: [
		x := (self - 5) xxx:'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:48:18' prior: 50891731!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		x := self xxx: ''.
		].

	(self between: 5 and: 8) ifTrue: [
		x := (self - 5) xxx: 'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	(self = 10) ifTrue: [x := 'X'].
	(self = 11) ifTrue: [x := 'XI'].
	(self = 12) ifTrue: [x := 'XII'].
	(self = 13) ifTrue: [x := 'XIII'].
	^x.
	! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:48:20'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:49:01' prior: 50891746!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		x := self xxx: ''.
		].

	(self between: 5 and: 8) ifTrue: [
		x := (self - 5) xxx: 'V'.
		].
	
	(self between: 10 and: 13) ifTrue: [
		x := (self - 5) xxx: 'V'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	^x.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 19:49:02'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 19:49:02'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 19:49:02'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:49:04'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:49:15' prior: 50891792!
asRoman
	|x|
	x := ''.
	(self between: 1 and: 3) ifTrue: [
		x := self xxx: ''.
		].

	(self between: 5 and: 8) ifTrue: [
		x := (self - 5) xxx: 'V'.
		].
	
	(self between: 10 and: 13) ifTrue: [
		x := (self - 10) xxx: 'X'.
		].
	(self = 4) ifTrue: [x := 'IV'].
	(self = 9) ifTrue: [x := 'IX'].
	^x.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 19:49:17'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 19:49:17'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 19:49:17'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 19:49:17'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:49:49' prior: 50891838!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber := self xxx: ''.
		].

	(self between: 5 and: 8) ifTrue: [
		romanizedNumber := (self - 5) xxx: 'V'.
		].
	
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:50:18' prior: 50891882!
asRoman
	|romanizedNumber|
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber := self xxx: ''.
		].

	(self between: 5 and: 8) ifTrue: [
		romanizedNumber := (self - 5) xxx: 'V'.
		].
	
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:52:28' prior: 50891898!
asRoman
	|romanizedNumber|
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber := self xxx: ''.
		].
	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber := (self - 5) xxx: 'V'.
		].
	
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:53:16' prior: 50891913!
asRoman
	|romanizedNumber|
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber := self xxx: ''.
		].
	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber := (self - 5) xxx: 'V'.
		].
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 19:55:07' prior: 50891928!
asRoman
	|romanizedNumber|
	(self between: 0 and: 3) ifTrue: [
		romanizedNumber := self xxx: ''.
		].
	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber := (self - 5) xxx: 'V'.
		].
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 19:55:08'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:07:25'!
pepito2ConX: xInt Y: yInt Z: zString
	|romanizedNumber|

	(self between: xInt and: yInt) ifTrue: [
		romanizedNumber := (self - xInt) xxx: zString.
		].
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:07:34'!
xxxConX: xInt Y: yInt Z: zString
	|romanizedNumber|

	(self between: xInt and: yInt) ifTrue: [
		romanizedNumber := (self - xInt) xxx: zString.
		].
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #pepito2ConX:Y:Z: stamp: 'LB 9/30/2021 20:07:34'!
pepito2ConX: xInt Y: yInt Z: zString
	|romanizedNumber|

	(self between: xInt and: yInt) ifTrue: [
		romanizedNumber := (self - xInt) xxx: zString.
		].
	
	^romanizedNumber.
	!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:11:31'!
xxxConX: xInt Y: yInt Z: zString previous: romanizedNumber
	|aromanizedNumber|

	(self between: xInt and: yInt) ifTrue: [
		aromanizedNumber := (self - xInt) xxx: zString.
		].
	
	^aromanizedNumber.
	! !

!methodRemoval: SmallInteger #xxxConX:Y:Z: stamp: 'LB 9/30/2021 20:11:36'!
xxxConX: xInt Y: yInt Z: zString
	|romanizedNumber|

	(self between: xInt and: yInt) ifTrue: [
		romanizedNumber := (self - xInt) xxx: zString.
		].
	
	^romanizedNumber.
	!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:11:45' prior: 50892013!
xxxConX: xInt Y: yInt Z: zString previous: romanizedNumber
	|aRomanizedNumber|

	(self between: xInt and: yInt) ifTrue: [
		aRomanizedNumber := (self - xInt) xxx: zString.
		].
	
	^aRomanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:13:29' prior: 50891943!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber .
	"(self between: 0 and: 3) ifTrue: [
		romanizedNumber := self xxx: ''.
		]."
	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber := (self - 5) xxx: 'V'.
		].
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	
	^romanizedNumber.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 20:13:30'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 20:13:30'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 20:13:30'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:13:32'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:13:54' prior: 50892039!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber := (self - 10) xxx: 'X'.
		].
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:14:06' prior: 50892120!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:14:09'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:14:09'!
FAILURE!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:14:09'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:14:09'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:14:09'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:14:09'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:14:50' prior: 50892030!
xxxConX: xInt Y: yInt Z: zString previous: romanizedNumber

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString.
		].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:14:53'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:27:15'!
test14
	self assert: 'XIV' equals: 14 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:27:36' prior: 50892136!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:27:39'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:30:29' prior: 50892222!
test14
	self assert: 'XV' equals: 15 asRoman.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:30:32' prior: 50892278!
test14
	self assert: 'XIV' equals: 14 asRoman.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:30:38'!
test15
	self assert: 'XV' equals: 15 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:31:03' prior: 50892227!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self xxxConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	^romanizedNumber.
	! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:36:12'!
test16
	self assert: 'XIX' equals: 19 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:36:22' prior: 50892292!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self xxxConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	
	^romanizedNumber.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 20:36:23'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 20:36:23'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 20:36:23'!
PASSED!

!testRun: #TestRomans #test16 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!

!testRun: #TestRomans #test16 stamp: 'LB 9/30/2021 20:36:25'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:40:56'!
test20
	self assert: 'XX' equals: 20 asRoman.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:41:02'!
test19
	self assert: 'XIX' equals: 19 asRoman.! !

!methodRemoval: TestRomans #test16 stamp: 'LB 9/30/2021 20:41:02'!
test16
	self assert: 'XIX' equals: 19 asRoman.!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:41:36' prior: 50892316!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self xxxConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self xxxConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 20:41:37'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:45:32'!
test24
	self assert: 'XXIV' equals: 24 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:45:55' prior: 50892418!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self xxxConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self xxxConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 20:45:58'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:49:54' prior: 50892486!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self xxxConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self xxxConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self xxxConX: 25 Y: 28 Z: 'XX' previous: romanizedNumber.
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:49:59' prior: 50892553!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self xxxConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self xxxConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self xxxConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self xxxConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self xxxConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self xxxConX: 25 Y: 28 Z: 'XXV' previous: romanizedNumber.
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 20:50:33'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 20:50:41'!
test25
	self assert: 'XXV' equals: 25 asRoman.! !

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 20:50:42'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:53:05'!
xxx: aStringToBuild with: aRomanNumber
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumber].
	^aString.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 20:54:07' prior: 50892183!
xxxConX: xInt Y: yInt Z: zString previous: romanizedNumber

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString with: 'I'.
		].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 20:54:52'!
PASSED!

!methodRemoval: SmallInteger #xxx: stamp: 'LB 9/30/2021 20:55:41'!
xxx: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: 'I'].
	^aString.
	!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:03:41'!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString with: 'I'.
		].
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 21:03:41' prior: 50892581!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber.
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #xxxConX:Y:Z:previous: stamp: 'LB 9/30/2021 21:03:41'!
xxxConX: xInt Y: yInt Z: zString previous: romanizedNumber

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString with: 'I'.
		].
	
	^romanizedNumber.
	!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:04:33'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:13:49' prior: 50892700!
xxx: aStringToBuild with: aRomanNumberDigit
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:14:49'!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString with: 'I'.
		].
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 21:14:49' prior: 50892777!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #convertToRomanIfBetween:to:with:previousYYY: stamp: 'LB 9/30/2021 21:14:49'!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString with: 'I'.
		].
	
	^romanizedNumber.
	!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:14:57' prior: 50892869!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) xxx: zString with: aRomanDigitNumber.
		].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:15:00'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 21:18:25'!
test29
	self assert: 'XXIX' equals: 29 asRoman.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:18:39' prior: 50892880!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIV'].

	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:18:44' prior: 50892984!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:19:13'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:31:15' prior: 50893020!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		self asRomanUnit.
		]. 
	
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 21:31:23'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 21:31:23'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 21:31:23'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:31:26'!
ERROR!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:31:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:31:29'!
ERROR!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:31:34'!
ERROR!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:31:37'!
ERROR!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:32:06'!
asRomanUnit
	
	| romanizedNumber |
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:32:22' prior: 50893223!
asRomanUnit
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:32:38' prior: 50893241!
asRomanUnit
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:33:13' prior: 50893259!
asRomanUnit
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	
	^romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:33:23' prior: 50893102!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		self asRomanUnit.
		]. 
	
	"romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX']."
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 21:33:26'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 21:33:26'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 21:33:26'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:33:28'!
FAILURE!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:33:28'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:33:40' prior: 50893290!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		^self asRomanUnit.
		]. 
	
	"romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX']."
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:33:41'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:33:49' prior: 50893406!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		^self asRomanUnit.
		]. 
	
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:40:22'!
asRomanWithTens: tens fives: fives units: units
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	
	^romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:41:48' prior: 50893519!
asRomanWithTens: tens fives: fives units: units
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: units.

	(self = 4) ifTrue: [romanizedNumber := (units,tens)].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: fives previousYYY: romanizedNumber withXX: 'units'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	
	^romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:41:51' prior: 50893536!
asRomanWithTens: tens fives: fives units: units
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: units.

	(self = 4) ifTrue: [romanizedNumber := (units,tens)].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: fives previousYYY: romanizedNumber withXX: units.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	
	^romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:42:08' prior: 50893553!
asRomanWithTens: tens fives: fives units: units
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: units.

	(self = 4) ifTrue: [romanizedNumber := (units, fives)].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: fives previousYYY: romanizedNumber withXX: units.
	
	(self = 9) ifTrue: [romanizedNumber := (units, tens)].
	
	^romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:43:47' prior: 50893491!
asRoman
	|romanizedNumber|
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		^self asRomanWithTens: 'X' fives: 'V' units: 'I'.
		]. 
	
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 21:43:48'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 21:43:48'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LB 9/30/2021 21:43:48'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:43:49'!
PASSED!

!methodRemoval: SmallInteger #asRomanUnit stamp: 'LB 9/30/2021 21:43:57'!
asRomanUnit
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: 'I'.

	(self = 4) ifTrue: [romanizedNumber := 'IV'].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: 'V' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 9) ifTrue: [romanizedNumber := 'IX'].
	
	^romanizedNumber !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 21:45:57' prior: 50892979!
test29
	self assert: 'XXIX' equals: 29 asRoman.! !

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:45:57'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:50:04' prior: 50893587!
asRoman
	|romanizedNumber decena unidad |
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		^self asRomanWithTens: 'X' fives: 'V' units: 'I'.
		]. 
	
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:50:16' prior: 50893760!
asRoman
	|romanizedNumber decena unidad |
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanizedNumber := ''.
	(self between: 0 and: 9) ifTrue:[
		^unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
		]. 
	
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:50:20'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:53:31' prior: 50893791!
asRoman
	|romanUnit romanizedNumber decena unidad |
	
	romanizedNumber := ''.
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanUnit := unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanUnit := decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:53:49' prior: 50893869!
asRoman
	|romanTens romanUnit romanizedNumber decena unidad |
	
	romanizedNumber := ''.
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanUnit := unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens := decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	romanizedNumber := self convertToRomanIfBetween: 10 to: 13 with: 'X' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 14) ifTrue: [romanizedNumber := 'XIV'].
	romanizedNumber := self convertToRomanIfBetween: 15 to: 18 with: 'XV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 19) ifTrue: [romanizedNumber := 'XIX'].
	romanizedNumber := self convertToRomanIfBetween: 20 to: 23 with: 'XX' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 24) ifTrue: [romanizedNumber := 'XXIV'].
	romanizedNumber := self convertToRomanIfBetween: 25 to: 28 with: 'XXV' previousYYY: romanizedNumber withXX: 'I'.
	
	(self = 29) ifTrue: [romanizedNumber := 'XXIX'].

	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:54:23' prior: 50893902!
asRoman
	|romanTens romanUnit romanizedNumber decena unidad |
	
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanUnit := unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens := decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:54:27' prior: 50893935!
asRoman
	|romanTens romanUnit decena unidad |
	
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanUnit := unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens := decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit.! !

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:54:29'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:56:09' prior: 50893947!
asRoman
	|romanTens romanUnit decena unidad |
	
	decena := self // 10.
	unidad := self \\ 10.
	
	romanUnit := unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens := decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit.! !

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 21:56:52'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:57:45' prior: 50894005!
asRoman
	|romanTens romanUnit tens unidad |
	
	tens := self // 10.
	unidad := self \\ 10.
	
	romanUnit := unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens := tens asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 21:58:22' prior: 50894063!
asRoman
	|romanTens romanUnit tens units |
	
	tens := self // 10.
	units := self \\ 10.
	
	romanUnit := units asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens := tens asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit.! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:06:29'!
with: aRomanNumberDigit xxx: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 22:06:29' prior: 50892924!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) with: zString xxx: aRomanDigitNumber.
		].
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #xxx:with: stamp: 'LB 9/30/2021 22:06:29'!
xxx: aStringToBuild with: aRomanNumberDigit
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:07:02'!
timesAppend: aRomanNumberDigit to: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 22:07:03' prior: 50894093!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) timesAppend: zString to: aRomanDigitNumber.
		].
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #with:xxx: stamp: 'LB 9/30/2021 22:07:03'!
with: aRomanNumberDigit xxx: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 22:07:07'!
FAILURE!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 22:07:18'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:08:00' prior: 50894119!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) timesAppend: aRomanDigitNumber to: zString.
		].
	
	^romanizedNumber.
	! !

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 22:08:01'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:10:29' prior: 50893570!
asRomanWithTens: tens fives: fives units: units
	
	| romanizedNumber |
	romanizedNumber := ''.
	romanizedNumber := self convertToRomanIfBetween: 0 to: 3 with: '' previousYYY: romanizedNumber withXX: units.

	(self = 4) ifTrue: [^(units, fives)].
	romanizedNumber := self convertToRomanIfBetween: 5 to: 8 with: fives previousYYY: romanizedNumber withXX: units.
	
	(self = 9) ifTrue: [^(units, tens)].
	
	^romanizedNumber ! !

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'LB 9/30/2021 22:10:31'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:11:33'!
to: aStringToBuild timesAppend: aRomanNumberDigit
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 22:11:33' prior: 50894142!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) to: aRomanDigitNumber timesAppend: zString.
		].
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #timesAppend:to: stamp: 'LB 9/30/2021 22:11:33'!
timesAppend: aRomanNumberDigit to: aStringToBuild
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	!
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:12:24' prior: 50894270!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) to: zString timesAppend: aRomanDigitNumber.
		].
	
	^romanizedNumber.
	! !
!SmallInteger methodsFor: 'romans' stamp: 'LB 9/30/2021 22:12:50'!
pepito: aStringToBuild with: aRomanNumberDigit
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LB 9/30/2021 22:12:50' prior: 50894289!
convertToRomanIfBetween: xInt to: yInt with: zString previousYYY: romanizedNumber withXX: aRomanDigitNumber 

	(self between: xInt and: yInt) ifTrue: [
		^ (self - xInt) pepito: zString with: aRomanDigitNumber.
		].
	
	^romanizedNumber.
	! !

!methodRemoval: SmallInteger #to:timesAppend: stamp: 'LB 9/30/2021 22:12:50'!
to: aStringToBuild timesAppend: aRomanNumberDigit
	|aString|
	aString := aStringToBuild .
	self timesRepeat: [aString := aString append: aRomanNumberDigit].
	^aString.
	!

----QUIT----(30 September 2021 22:13:20) CuisUniversity-4532.image priorSource: 17856932!

----STARTUP---- (4 October 2021 20:22:36) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'LB 10/4/2021 20:28:06'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'LB 10/4/2021 20:28:20'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'nil' stamp: 'LB 10/4/2021 20:28:44'!
test01
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:34:30' prior: 50894354!
test01
	|robot x y direction|
	x := 10.
	y := 11.
	direction := 'N'.
	robot := MarsRover inX: x andY: y pointing: 'N'.
	
	self assert: robot positionX equals: x.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:45:01' prior: 50894358!
test01
	|marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:45:11' prior: 50894367!
test01
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:46:41'!
ERROR!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:46:53'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:47:18'!
at: aPoint heading: aSymbol 
	self shouldBeImplemented.! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:48:30'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'LB 10/4/2021 20:48:46' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: MarsRover class #error: stamp: 'LB 10/4/2021 20:49:30'!
error: aString 
	self shouldBeImplemented.!

!methodRemoval: MarsRover class #at:heading: stamp: 'LB 10/4/2021 20:49:33'!
at: aPoint heading: aSymbol 
	self shouldBeImplemented.!
!MarsRoverTests class methodsFor: 'nil' stamp: 'LB 10/4/2021 20:51:12'!
test01
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:52:07'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'LB 10/4/2021 20:52:25'!
at: aPoint heading: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint heading: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'LB 10/4/2021 20:52:53' prior: 50894418!
at: aPoint heading: aSymbol 
	^self new initializeAt: aPoint heading: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'LB 10/4/2021 20:52:58' prior: 50894427!
at: aPoint heading: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint heading: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'LB 10/4/2021 20:53:14' prior: 50894433!
at: aPoint heading: aSymbol 
	^self new initializeAt: aPoint heading: aSymbol ! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:53:22'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'LB 10/4/2021 20:53:33'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'LB 10/4/2021 20:53:34'!
Object subclass: #MarsRover
	instanceVariableNames: 'point symbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'LB 10/4/2021 20:53:34'!
initializeAt: aPoint heading: aSymbol 
	self shouldBeImplemented.
	point := aPoint.
	symbol := aSymbol.! !
!MarsRover methodsFor: 'initialization' stamp: 'LB 10/4/2021 20:53:43' prior: 50894463!
initializeAt: aPoint heading: aSymbol 
	point := aPoint.
	symbol := aSymbol.! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:54:05'!
ERROR!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:54:12'!
ERROR!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:54:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:54:24'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:54:29' prior: 50894482!
process: aString 
	! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:54:30'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:54:41'!
isAt: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:54:49' prior: 50894493!
isAt: aPoint heading: aSymbol 
	^true! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:54:50'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:54:50'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:55:44' prior: 50894375!
test01
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:56:26'!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 20:57:06' prior: 50894516!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 20:57:09'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 20:57:09'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 20:57:09'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'LB 10/4/2021 21:11:22'!
Object subclass: #MarsRover
	instanceVariableNames: 'point symbol position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:11:19' prior: 50894487!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | position := position + (0@1)]! !

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 21:12:43'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:13:55' prior: 50894498!
isAt: aPoint heading: aSymbol 
	^position := aPoint! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:13:59' prior: 50894556!
isAt: aPosition heading: aSymbol 
	^position := aPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:14:23' prior: 50894561!
isAt: aPosition heading: aSymbol 
	^position = aPosition! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'LB 10/4/2021 21:15:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'LB 10/4/2021 21:15:30' prior: 50894470!
initializeAt: aPosition heading: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:16:17' prior: 50894566!
isAt: aPosition heading: aDirection 
	^(position = aPosition) and: (direction = aDirection).
	! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 21:16:19'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 21:16:19'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:16:28' prior: 50894524!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@4 heading: #North).! !

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 21:16:29'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:16:32' prior: 50894600!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:21:57' prior: 50894611!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'ff'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 21:21:58'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/4/2021 21:22:02' prior: 50894619!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 21:22:04'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/4/2021 21:22:04'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/4/2021 21:22:04'!
PASSED!

----QUIT----(4 October 2021 21:41:52) CuisUniversity-4532.image priorSource: 18005611!

----STARTUP---- (5 October 2021 09:00:39) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


1@2 - 0@1!

(1@2) - (0@1)!

#String!

----QUIT----(5 October 2021 22:27:45) CuisUniversity-4532.image priorSource: 18015806!

----STARTUP---- (5 October 2021 22:27:51) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!classRemoval: #MarsRover stamp: 'LB 10/5/2021 22:28:30'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTests stamp: 'LB 10/5/2021 22:28:30'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----End fileIn of /home/luisb/Downloads/MarsRover.st----!

!testRun: #MarsRoverTests #test14 stamp: 'LB 10/5/2021 22:28:41'!
FAILURE!

.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/5/2021 22:36:31' prior: 50894999!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		(aCommand = $f) ifTrue: [self moveForward.] ifFalse: [
			(aCommand = $b) ifTrue: [self moveBackward.] ifFalse: [ 
				(aCommand = $l) ifTrue: [self turnLeft.] ifFalse: [
					(aCommand = $r) ifTrue: [self turnRight.] ifFalse: [^self].
				]
			]
		]
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!

!testRun: #MarsRoverTests #test14 stamp: 'LB 10/5/2021 22:36:32'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'sm 10/5/2021 14:51:47' prior: 50895037!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		(aCommand = $f) ifTrue: [self moveForward.].
		(aCommand = $b) ifTrue: [self moveBackward.]. 
		(aCommand = $l) ifTrue: [self turnLeft.].
		(aCommand = $r) ifTrue: [self turnRight.] ifFalse: [^self].
		].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/5/2021 22:41:57' prior: 50895083!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		self processCommand: aCommand ifInvalid: [^self].
		].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/5/2021 22:43:09'!
processCommand: aCommand ifInvalid: anErrorBlock
	(aCommand = $f) ifTrue: [^self moveForward.].
	(aCommand = $b) ifTrue: [^self moveBackward.]. 
	(aCommand = $l) ifTrue: [^self turnLeft.].
	(aCommand = $r) ifTrue: [^self turnRight.].
	anErrorBlock value.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 10/5/2021 22:43:27' prior: 50895095!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ifInvalid: [^self]		].! !

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/5/2021 22:43:29'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/5/2021 22:43:29'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'LB 10/5/2021 22:43:29'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

!testRun: #MarsRoverTests #test14 stamp: 'LB 10/5/2021 22:43:30'!
PASSED!

----QUIT----(5 October 2021 22:44:08) CuisUniversity-4532.image priorSource: 18016050!

----STARTUP---- (6 October 2021 09:51:15) as /home/luisb/Programs/cuisUniversity-linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTests #test14 stamp: 'LB 10/6/2021 10:00:16'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:03:13' prior: 50894779!
test13

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'wf'.
	
	self assert: (marsRover isAt: 1@3 heading: North)! !

!testRun: #MarsRoverTests #test13 stamp: 'LB 10/6/2021 10:09:11'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:09:16' prior: 50895162!
test13

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'fwf'.
	
	self assert: (marsRover isAt: 1@3 heading: North)! !

!testRun: #MarsRoverTests #test13 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!testRun: #MarsRoverTests #test14 stamp: 'LB 10/6/2021 10:09:20'!
PASSED!

!methodRemoval: MarsRoverTests #test14 stamp: 'LB 10/6/2021 10:10:18'!
test14

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'ff'.
	
	self assert: (marsRover isAt: 1@4 heading: North)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:15:49'!
test01processAMarsRoverWithEmptyStringDoNothing
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: North).! !

!methodRemoval: MarsRoverTests #test01processAMarsRoverWithEmptyStringDoNothing stamp: 'LB 10/6/2021 10:15:57'!
test01processAMarsRoverWithEmptyStringDoNothing
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: North).!
!MarsRoverTests class methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:16:05'!
test01processAMarsRoverWithEmptyStringDoNothing
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:16:05'!
test01processAMarsRoverWithEmptyStringDoNothing
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: North).! !

!methodRemoval: MarsRoverTests class #test01 stamp: 'LB 10/6/2021 10:16:05'!
test01
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).!

!methodRemoval: MarsRoverTests #test01 stamp: 'LB 10/6/2021 10:16:05'!
test01
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:16:59'!
test02processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).! !

!methodRemoval: MarsRoverTests #test02 stamp: 'LB 10/6/2021 10:16:59'!
test02
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:17:32'!
test02processAMarsRoverWithAStringWithAnBJustMoveBackwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).! !

!methodRemoval: MarsRoverTests #test03 stamp: 'LB 10/6/2021 10:17:32'!
test03
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:17:43'!
test03processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).! !

!methodRemoval: MarsRoverTests #test02processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep stamp: 'LB 10/6/2021 10:17:43'!
test02processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:19:14'!
test04processAMarsRoverWithAStringWithAnLJustRotateOnceToLeft
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: West).! !

!methodRemoval: MarsRoverTests #test04 stamp: 'LB 10/6/2021 10:19:14'!
test04
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: West).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:19:45'!
test05processAMarsRoverWithAStringWithAnRJustRotateOnceToRight
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: East).! !

!methodRemoval: MarsRoverTests #test05 stamp: 'LB 10/6/2021 10:19:45'!
test05
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: East).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:20:16'!
test02processAMarsRoverWithAStringWithABJustMoveBackwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).! !

!methodRemoval: MarsRoverTests #test02processAMarsRoverWithAStringWithAnBJustMoveBackwardOneStep stamp: 'LB 10/6/2021 10:20:16'!
test02processAMarsRoverWithAStringWithAnBJustMoveBackwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:21:32'!
test02processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).! !

!methodRemoval: MarsRoverTests #test03processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep stamp: 'LB 10/6/2021 10:21:32'!
test03processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:21:37'!
test03processAMarsRoverWithAStringWithABJustMoveBackwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).! !

!methodRemoval: MarsRoverTests #test02processAMarsRoverWithAStringWithABJustMoveBackwardOneStep stamp: 'LB 10/6/2021 10:21:37'!
test02processAMarsRoverWithAStringWithABJustMoveBackwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:21:57'!
test02processAMarsRoverWithAStringWithAFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).! !

!methodRemoval: MarsRoverTests #test02processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep stamp: 'LB 10/6/2021 10:21:57'!
test02processAMarsRoverWithAStringWithAnFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:23:32'!
test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).! !

!methodRemoval: MarsRoverTests #test02processAMarsRoverWithAStringWithAFJustMoveForwardOneStep stamp: 'LB 10/6/2021 10:23:32'!
test02processAMarsRoverWithAStringWithAFJustMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:24:01'!
test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStepToNorth
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).! !

!methodRemoval: MarsRoverTests #test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStep stamp: 'LB 10/6/2021 10:24:01'!
test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:24:26'!
test03processAMarsRoverPointingNorthWithCommandBMoveBackwardOneStepToNorth
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).! !

!methodRemoval: MarsRoverTests #test03processAMarsRoverWithAStringWithABJustMoveBackwardOneStep stamp: 'LB 10/6/2021 10:24:26'!
test03processAMarsRoverWithAStringWithABJustMoveBackwardOneStep
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:25:58'!
test04processAMarsRoverPointingNorthWithCommandLRotateOnceToLeft
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: West).! !

!methodRemoval: MarsRoverTests #test04processAMarsRoverWithAStringWithAnLJustRotateOnceToLeft stamp: 'LB 10/6/2021 10:25:58'!
test04processAMarsRoverWithAStringWithAnLJustRotateOnceToLeft
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: West).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:26:14'!
test04processAMarsRoverPointingNorthWithCommandRRotateOnceToRight
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: East).! !

!methodRemoval: MarsRoverTests #test05processAMarsRoverWithAStringWithAnRJustRotateOnceToRight stamp: 'LB 10/6/2021 10:26:14'!
test05processAMarsRoverWithAStringWithAnRJustRotateOnceToRight
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: East).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:26:21'!
test05processAMarsRoverPointingNorthWithCommandRRotateOnceToRight
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: East).! !

!methodRemoval: MarsRoverTests #test04processAMarsRoverPointingNorthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:26:21'!
test04processAMarsRoverPointingNorthWithCommandRRotateOnceToRight
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: East).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:27:12'!
test05processAMarsRoverPointingSouthWithCommandLRotateOnceToLeft
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: East).! !

!methodRemoval: MarsRoverTests #test06 stamp: 'LB 10/6/2021 10:27:12'!
test06
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: East).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:27:49'!
test07processAMarsRoverPointingSouthWithCommandRRotateOnceToRight
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: West)! !

!methodRemoval: MarsRoverTests #test07 stamp: 'LB 10/6/2021 10:27:49'!
test07
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: West)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:28:56'!
test08processAMarsRoverPointingEastWithCommandFMoveForwardOneStepToEast
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: East.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 heading: East)! !

!methodRemoval: MarsRoverTests #test08 stamp: 'LB 10/6/2021 10:28:56'!
test08
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: East.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 heading: East)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:29:48'!
test09processAMarsRoverPointingWestWithCommandFMoveForwardOneStepToWest
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 heading: West)! !

!methodRemoval: MarsRoverTests #test09 stamp: 'LB 10/6/2021 10:29:48'!
test09
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 heading: West)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:30:31'!
test10processAMarsRoverPointingSouthWithCommandFMoveForwardOneStepToSouth
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@1 heading: South)! !

!methodRemoval: MarsRoverTests #test10 stamp: 'LB 10/6/2021 10:30:31'!
test10
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@1 heading: South)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:31:00'!
test11processAMarsRoverPointingSouthWithCommandBMoveBackwardOneStepToSouth
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 heading: South)! !

!methodRemoval: MarsRoverTests #test11 stamp: 'LB 10/6/2021 10:31:00'!
test11
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 heading: South)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:31:17'!
test12processAMarsRoverPointingWestWithCommandBMoveBackwardOneStepToWest
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: West.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 2@2 heading: West)! !

!methodRemoval: MarsRoverTests #test12 stamp: 'LB 10/6/2021 10:31:17'!
test12
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: West.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 2@2 heading: West)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:32:00'!
test13processAMarsRoverWithAnErrorCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'fwf'.
	
	self assert: (marsRover isAt: 1@3 heading: North)! !

!methodRemoval: MarsRoverTests #test13 stamp: 'LB 10/6/2021 10:32:00'!
test13

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'fwf'.
	
	self assert: (marsRover isAt: 1@3 heading: North)!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'LB 10/6/2021 10:32:11'!
test13processAMarsRoverWithAnErrorCommandStopsProcessing

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'fwf'.
	
	self assert: (marsRover isAt: 1@3 heading: North)! !

!methodRemoval: MarsRoverTests #test13processAMarsRoverWithAnErrorCommand stamp: 'LB 10/6/2021 10:32:11'!
test13processAMarsRoverWithAnErrorCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: North.
	
	marsRover process: 'fwf'.
	
	self assert: (marsRover isAt: 1@3 heading: North)!

!methodRemoval: MarsRoverTests class #test01processAMarsRoverWithEmptyStringDoNothing stamp: 'LB 10/6/2021 10:33:11'!
test01processAMarsRoverWithEmptyStringDoNothing
	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).!

!testRun: #MarsRoverTests #test01processAMarsRoverWithEmptyStringDoNothing stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStepToNorth stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test03processAMarsRoverPointingNorthWithCommandBMoveBackwardOneStepToNorth stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test04processAMarsRoverPointingNorthWithCommandLRotateOnceToLeft stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test05processAMarsRoverPointingNorthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test05processAMarsRoverPointingSouthWithCommandLRotateOnceToLeft stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test07processAMarsRoverPointingSouthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test08processAMarsRoverPointingEastWithCommandFMoveForwardOneStepToEast stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test09processAMarsRoverPointingWestWithCommandFMoveForwardOneStepToWest stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test10processAMarsRoverPointingSouthWithCommandFMoveForwardOneStepToSouth stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test11processAMarsRoverPointingSouthWithCommandBMoveBackwardOneStepToSouth stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test12processAMarsRoverPointingWestWithCommandBMoveBackwardOneStepToWest stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test13processAMarsRoverWithAnErrorCommandStopsProcessing stamp: 'LB 10/6/2021 10:34:19'!
PASSED!

!testRun: #MarsRoverTests #test01processAMarsRoverWithEmptyStringDoNothing stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStepToNorth stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test03processAMarsRoverPointingNorthWithCommandBMoveBackwardOneStepToNorth stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test04processAMarsRoverPointingNorthWithCommandLRotateOnceToLeft stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test05processAMarsRoverPointingNorthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test05processAMarsRoverPointingSouthWithCommandLRotateOnceToLeft stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test07processAMarsRoverPointingSouthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test08processAMarsRoverPointingEastWithCommandFMoveForwardOneStepToEast stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test09processAMarsRoverPointingWestWithCommandFMoveForwardOneStepToWest stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test10processAMarsRoverPointingSouthWithCommandFMoveForwardOneStepToSouth stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test11processAMarsRoverPointingSouthWithCommandBMoveBackwardOneStepToSouth stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test12processAMarsRoverPointingWestWithCommandBMoveBackwardOneStepToWest stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test13processAMarsRoverWithAnErrorCommandStopsProcessing stamp: 'LB 10/6/2021 10:34:28'!
PASSED!

!testRun: #MarsRoverTests #test01processAMarsRoverWithEmptyStringDoNothing stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test02processAMarsRoverPointingNorthWithCommandFMoveForwardOneStepToNorth stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test03processAMarsRoverPointingNorthWithCommandBMoveBackwardOneStepToNorth stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test04processAMarsRoverPointingNorthWithCommandLRotateOnceToLeft stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test05processAMarsRoverPointingNorthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test05processAMarsRoverPointingSouthWithCommandLRotateOnceToLeft stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test07processAMarsRoverPointingSouthWithCommandRRotateOnceToRight stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test08processAMarsRoverPointingEastWithCommandFMoveForwardOneStepToEast stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test09processAMarsRoverPointingWestWithCommandFMoveForwardOneStepToWest stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test10processAMarsRoverPointingSouthWithCommandFMoveForwardOneStepToSouth stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test11processAMarsRoverPointingSouthWithCommandBMoveBackwardOneStepToSouth stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test12processAMarsRoverPointingWestWithCommandBMoveBackwardOneStepToWest stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

!testRun: #MarsRoverTests #test13processAMarsRoverWithAnErrorCommandStopsProcessing stamp: 'LB 10/6/2021 10:34:44'!
PASSED!

----QUIT----(6 October 2021 10:37:06) CuisUniversity-4532.image priorSource: 18032053!